dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(ggz_client, 0.0.4pre)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl Check for standard build environment
dnl ====================================

dnl Make sure ${prefix}/include is on include path
dnl ==============================================
if test "x${prefix}" = "xNONE"; then
   CPPFLAGS="$CPPFLAGS -I${ac_default_prefix}/include"
   LDFLAGS="$LDFLAGS -L${ac_default_prefix}/lib"
else
   CPPFLAGS="$CPPFLAGS -I${prefix}/include"
   LDFLAGS="$LDFLAGS -L${prefix}/lib"
fi

AC_PROG_CC
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_CPP
AM_PROG_CC_STDC
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET


dnl Compiling Options
dnl =================
AC_ARG_WITH(included-easysock, [  --with-included-easysock Use the easysock lib included here],, with_included_easysock=no)
AC_ARG_ENABLE(debug,           [  --enable-debug          Enable debugging ],, enable_debug=no)
AC_ARG_ENABLE(debug-gdb,       [  --enable-debug-gdb      enable GDB debugging ],,enable_debug_gdb=no)
AC_ARG_ENABLE(debug-mem,       [  --enable-debug-mem      enable mem debugging ],,enable_debug_mem=no)
AC_ARG_ENABLE(debug-socket,    [  --enable-debug-socket   enable socket debugging ],, enable_debug_socket=no)

dnl Client Frontends
dnl ================
AC_ARG_ENABLE(client, [  --disable-client        Don't build GGZ clients],, enable_client=yes)
AC_ARG_ENABLE(textfe, [  --disable-textfe        Don't build Text frontend],, enable_textfe=yes)
AC_ARG_ENABLE(gtkfe,  [  --disable-gtkfe         Don't build Gtk frontend],, enable_gtkfe=yes)
AC_ARG_ENABLE(grubby, [  --disable-grubby        Don't build Grubby bot],, enable_grubby=no)

dnl Games
dnl =====
AC_ARG_ENABLE(games,  [  --disable-games         Don't build GGZ game modules],, enable_games=yes)


dnl Check for header files
dnl ======================
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(sys/time.h unistd.h)

dnl Check for gettext support
dnl =========================
ALL_LINGUAS="de pt_BR"
AM_GNU_GETTEXT
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
fi

dnl Check for typedefs, structures, and compiler characteristics
dnl ============================================================
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_HEADER_TIME
AC_EGREP_CPP(WAIT_ANY, [ #include <sys/wait.h>
		 WAIT_ANY ], AC_MSG_WARN(*** Cannot find WAIT_ANY, defining our own )
	         AC_DEFINE(WAIT_ANY, (pid_t)-1))


dnl Check for library functions
dnl ===========================
AC_CHECK_FUNC(poll)

if test "$with_included_easysock" = no; then
    AC_CHECK_LIB(easysock, es_make_socket, 
        [AC_CHECK_HEADER(easysock.h, 
            [AC_EGREP_CPP([[0-9]\.[0-9]\.2], [#include <easysock.h>
			   EASYSOCK_VERSION ], EASYSOCK_LIB="-leasysock",
                AC_MSG_WARN(*** Need easysock 0.0.2 or later -- using internal)
                with_included_easysock=yes)],
	    AC_MSG_WARN(*** Cannot find easysock.h -- using internal)
	    with_included_easysock=yes)],
        AC_MSG_WARN(**** Cannot find easysock library -- using internal)
        with_included_easysock=yes)
fi


dnl What to compile
dnl ===============

SUBDIRS=""
FRONTENDDIRS=""

dnl Do lots of easysock stuff if using included one
dnl ===============================================
if test "$with_included_easysock" = yes; then
    SUBDIRS="$SUBDIRS easysock"
    EASYSOCK_INC="-I\$(top_srcdir)/easysock"
    EASYSOCK_LIB="\$(top_builddir)/easysock/libeasysock.a"


dnl Check for PF_LOCAL/PF_UNIX
dnl ==========================
    AC_MSG_CHECKING([for PF_LOCAL])
    AC_EGREP_CPP(PF_LOCAL, [ #include <sys/socket.h>
                 PF_LOCAL ], AC_MSG_RESULT(no) 
			     AC_MSG_CHECKING([for PF_UNIX])
			     AC_EGREP_CPP(PF_UNIX, [ #include <sys/socket.h>
				          PF_UNIX ], AC_MSG_RESULT(no)
				                     AC_MSG_ERROR(*** Cannot PF_LOCAL or PF_UNIX),
                                          AC_MSG_RESULT(yes)
					  AC_DEFINE(PF_LOCAL, PF_UNIX)
			                  AC_DEFINE(AF_LOCAL, AF_UNIX)), 
                 AC_MSG_RESULT(yes))

dnl Check for msghdr member msg_control
dnl ===================================
    AC_EGREP_HEADER([size_t msg_controllen], sys/socket.h, 
		       AC_DEFINE(HAVE_MSGHDR_MSG_CONTROL))


    AC_CHECK_FUNC(socket, ,
        AC_CHECK_LIB(socket, socket,
	    AC_CHECK_HEADER(sys/socket.h, LDADD="-lsocket",
	        AC_MSG_ERROR(*** Cannot find socket headers ); exit ),
	    AC_MSG_ERROR(*** Cannot find socket library ); exit ))

    AC_CHECK_FUNC(gethostbyname, ,
        AC_CHECK_LIB(nsl, gethostbyname, LDADD="$LDADD -lnsl",
	    AC_MSG_ERROR(*** Cannot find nsl library ); exit ))

    AC_CHECK_FUNC(inet_ntoa, ,
        AC_CHECK_LIB(nsl, inet_ntoa, LDADD="$LDADD -lnsl",
	    AC_MSG_ERROR(*** Cannot find nsl library ); exit ))
fi


if test "$enable_client" = yes; then
    SUBDIRS="$SUBDIRS src"

    if test "$enable_textfe" = yes; then
        FRONTENDDIRS="$FRONTENDDIRS text"
    fi
    
    if test "$enable_gtkfe" = yes; then
        AM_PATH_GTK(1.2.0, FRONTENDDIRS="$FRONTENDDIRS gtk",
		       AC_MSG_WARN(*** Can't build GTK frontend: GTK not found)
		       enable_gtkfe=no)

        AC_CHECK_LIB(popt, poptGetNextOpt,
            AC_CHECK_HEADER(popt.h, LDADD="$LDADD -lpopt",
                AC_MSG_ERROR(*** Cannot find popt.h header); exit),
        AC_MSG_ERROR(*** Cannot find popt library ); exit)
    fi

    if test "$enable_grubby" = yes; then
        FRONTENDDIRS="$FRONTENDDIRS grubby"
    fi
    
fi

if test "$enable_games" = yes; then
    SUBDIRS="$SUBDIRS game_clients"
fi
    
SUBDIRS="$SUBDIRS po intl"

dnl Use -Wall if we have gcc.
dnl =========================
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl


dnl Debug modes
dnl ===========
if test "$enable_debug" = yes; then
    AC_DEFINE(DEBUG)
    DFLAGS="DEBUG"
fi

if test "$enable_debug_socket" = yes; then
    AC_DEFINE(DEBUG_SOCKET)
    DFLAGS="$DFLAGS DEBUG_SOCKET"
fi

if test "$enable_debug_mem" = yes; then
    AC_DEFINE(DEBUG_MEM)
    DFLAGS="$DFLAGS DEBUG_MEM"
    LDADD="$LDADD -ldmalloc"
fi

if test "$enable_debug_gdb" = yes; then
    CFLAGS="$CFLAGS -ggdb"
fi


dnl Various dirs
dnl ============
if test "x${sysconfdir}" = 'x${prefix}/etc'; then
  if test "x${prefix}" = "xNONE"; then
    ggzconfdir="${ac_default_prefix}/etc"  
  else
    ggzconfdir="${prefix}/etc"
  fi
else
  ggzconfdir="${sysconfdir}"
fi
AC_DEFINE_UNQUOTED(GGZCONFDIR, "${ggzconfdir}")


if test "x${libdir}" = 'x${exec_prefix}/lib'; then
  if test "x${exec_prefix}" = "xNONE"; then
    if test "x${prefix}" = "xNONE"; then
      ggzexecmoddir="${ac_default_prefix}/lib/ggz"
    else
      ggzexecmoddir="${prefix}/lib/ggz"
    fi
  else
    ggzexecmoddir="${exec_prefix}/lib/ggz"
  fi
else
  ggzexecmoddir="${libdir}/ggz"
fi
AC_DEFINE_UNQUOTED(GAMEDIR, "${ggzexecmoddir}")

packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")



AC_SUBST(LDADD)
AC_SUBST(EASYSOCK_INC)
AC_SUBST(EASYSOCK_LIB)
AC_SUBST(SUBDIRS)
AC_SUBST(FRONTENDDIRS)
AC_SUBST(ggzconfdir)
AC_SUBST(ggzexecmoddir)
AC_SUBST(packagesrcdir)

AC_OUTPUT([Makefile 
           easysock/Makefile
	   ggz/Makefile
	   ggz/ggzrc.test
	   src/Makefile
	   src/ggzcore/Makefile
	   src/frontend/Makefile
	   src/frontend/text/Makefile
	   src/frontend/gtk/Makefile
	   src/frontend/grubby/Makefile
	   game_clients/Makefile
	   game_clients/spades/Makefile
	   game_clients/tictactoe/Makefile	
	   game_clients/dots/Makefile
	   game_clients/lapocha/Makefile
	   game_clients/reversi/Makefile
	   game_clients/combat/Makefile
		 game_clients/combat/pixmaps/Makefile
		 game_clients/combat/maps/Makefile
	   game_clients/hastings/Makefile
	   game_clients/chinese-checkers/Makefile
     game_clients/chess/Makefile
	   intl/Makefile
	   po/Makefile.in
	   ])


dnl Status Output
dnl =============
echo ""
echo "Options"
echo "    General Debuging..$enable_debug"
echo "    Socket Debuging...$enable_debug_socket"
echo "    GDB Debuging......$enable_debug_gdb"
echo "    Memmory Debuging..$enable_debug_mem"
echo ""
echo "Clients"
echo "    Text..............$enable_textfe"
echo "    GTK+..............$enable_gtkfe"
echo "    Grubby............$enable_grubby"
echo ""
echo "-------------------------"
echo "At the prompt type \"make\" to"
echo "compile the game clients and"
echo "front ends that are listed above."
echo ""
echo "When compleate su to root"
echo "and type \"make install\" to"
echo "install the client software."
