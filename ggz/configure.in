dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_CONFIG_SUBDIRS( easysock )
AM_INIT_AUTOMAKE(ggz_client, 0.0.1)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl Compiling Options
dnl =====================
AC_ARG_ENABLE(server, [  --disable-games         Don't build NetGames games], games=$enableval, games=yes)
AC_ARG_ENABLE(client, [  --disable-client        Don't build NetGames clients], client=$enableval, client=yes)
AC_ARG_ENABLE(debug,  [  --enable-debug          enable debugging ],, enable_debug=no)
AC_ARG_ENABLE(debug-gdb,    [  --enable-debug-gdb      enable GDB debugging ],,enable_debug_gdb=no)
AC_ARG_ENABLE(debug-mem,    [  --enable-debug-mem      enable mem debugging ],,enable_debug_mem=no)
AC_ARG_ENABLE(debug-socket, [  --enable-debug-socket   enable socket debugging ],, enable_debug_socket=no)


dnl Check for standard build environment
dnl ====================================
AC_PROG_CC
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_CPP
AM_PROG_CC_STDC
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET

dnl Check for header files
dnl ======================
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(sys/time.h unistd.h)


dnl Check for typedefs, structures, and compiler characteristics
dnl ============================================================
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_HEADER_TIME
AC_EGREP_CPP(WAIT_ANY, [ #include <sys/wait.h>
		 WAIT_ANY ], AC_MSG_WARN(*** Cannot find WAIT_ANY, defining our own )
	         AC_DEFINE(WAIT_ANY, (pid_t)-1))



dnl Check for library functions
dnl ===========================
AC_CHECK_FUNC(select)
AC_CHECK_FUNC(socket, ,
    AC_CHECK_LIB(socket, socket,
	AC_CHECK_HEADER(sys/socket.h, LDADD="-lsocket",
	    AC_MSG_ERROR(*** Cannot find socket headers ); exit ),
	AC_MSG_ERROR(*** Cannot find socket library ); exit ))

AC_CHECK_FUNC(gethostbyname, ,
    AC_CHECK_LIB(nsl, gethostbyname, LDADD="$LDADD -lnsl",
	AC_MSG_ERROR(*** Cannot find nsl library ); exit ))

AC_CHECK_FUNC(inet_ntoa, ,
    AC_CHECK_LIB(nsl, inet_ntoa, LDADD="$LDADD -lnsl",
	AC_MSG_ERROR(*** Cannot find nsl library ); exit ))

AC_CHECK_LIB(popt, poptGetNextOpt,
    AC_CHECK_HEADER(popt.h, LDADD="$LDADD -lpopt",
        AC_MSG_ERROR(*** Cannot find popt.h header); exit),
    AC_MSG_ERROR(*** Cannot find popt library ); exit)
    
dnl AC_CHECK_LIB(pthread, pthread_create,
dnl    AC_CHECK_HEADER(pthread.h, LDADD="$LDADD -lpthread" 
dnl         CFLAGS="$CFLAGS -D_REENTRANT"
dnl         AC_DEFINE(_XOPEN_SOURCE, 500),
dnl         AC_MSG_ERROR(*** Cannot find pthread.h header); exit),
dnl    AC_MSG_ERROR(*** Cannot find pthread library ); exit)


    
dnl Check for client libs
dnl =====================
if test "$client" = yes; then
   AM_PATH_GTK(1.2.0, ,
       AC_MSG_WARN(*** GTK client will not be built: GTK not found);
       client=no)
fi


LIBS=$tmp_LIBS

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

dnl Debug modes
dnl ===========
if test "$enable_debug" = yes; then
    AC_DEFINE(DEBUG)
    DFLAGS="DEBUG"
fi

if test "$enable_debug_socket" = yes; then
    AC_DEFINE(DEBUG_SOCKET)
    DFLAGS="$DFLAGS DEBUG_SOCKET"
fi

if test "$enable_debug_mem" = yes; then
    AC_DEFINE(DEBUG_MEM)
    DFLAGS="$DFLAGS DEBUG_MEM"
    LDADD="$LDADD -ldmalloc"
fi

if test "$enable_debug_gdb" = yes; then
    CFLAGS="$CFLAGS -ggdb"
fi


dnl Various dirs
dnl ============

if test "x${sysconfdir}" = 'x${prefix}/etc'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(SYSCONFDIR, "${ac_default_prefix}/etc")
  else
    AC_DEFINE_UNQUOTED(SYSCONFDIR, "${prefix}/etc")
  fi
else
  AC_DEFINE_UNQUOTED(SYSCONFDIR, "${sysconfdir}")
fi

if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
fi

packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")



dnl Which progs to compile
dnl ======================

SUBDIRS="easysock"

if test "$games" = yes; then
    SUBDIRS="$SUBDIRS game_clients"
fi
if test "$client" = yes; then
    SUBDIRS="$SUBDIRS ggz"
fi

AC_SUBST(PROGS)
AC_SUBST(LDADD)
AC_SUBST(SUBDIRS)

AC_OUTPUT([Makefile 
	   ggz/Makefile
	   game_clients/Makefile
	   game_clients/spades/Makefile
	   ])


dnl Status Output
dnl =============
echo ""
echo "*** The following programs will be built: $PROGS"
echo "*** with the following debugging flags: $DFLAGS"
echo ""
echo "WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING!"
echo ""
echo "You may now compile ggz with 'make', but do *NOT* attempt to 'make install'"
echo "You *MUST* run ggz from the directory in which it was compiled, like this:"
echo ""
echo "cd ggz; ./ggz"
echo ""
echo "This will start the ggz client"
echo "Future versions will be able to be run from any directory"
echo ""
echo "WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING! WARNING!"


