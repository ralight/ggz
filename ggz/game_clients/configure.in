dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)

if test -r $srcdir/package; then
   . $srcdir/package
fi

DEFAULT_PACKAGE="ggz-gtk-games"
DEFAULT_VERSION="0.0.5pre"
DEFAULT_SUBDIRS="spades tictactoe dots lapocha ggzcards reversi combat hastings chinese-checkers chess"

dnl If an override is present, use it
dnl =================================
AC_ARG_WITH(game, [  --with-game=DIR         Dir for game module], game="$withval", game="")

dnl Order of precedence: command-line > OVERRIDE_XXX > DEFAULT_XXX
dnl ==============================================================

if test "$game" != ""; then
   subdirs=$game
   version=`cat $game/module.dsc | grep Version | sed 's/Version = //'`
   game=`cat $game/module.dsc | grep Name | sed 's/Name = //' | tr [A-Z] [a-z]`
   package=ggz-gtk-$game
elif test "$OVERRIDE_PACKAGE" != ""; then 
   package=$OVERRIDE_PACKAGE
   version=$OVERRIDE_VERSION
   subdirs=$OVERRIDE_SUBDIRS
else
   package=$DEFAULT_PACKAGE
   version=$DEFAULT_VERSION
   subdirs=$DEFAULT_SUBDIRS
fi

AM_INIT_AUTOMAKE($package, $version)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl Check for standard build environment
dnl ====================================

dnl Make sure ${prefix}/include is on include path
dnl ==============================================
if test "x${prefix}" = "xNONE"; then
   CPPFLAGS="$CPPFLAGS -I${ac_default_prefix}/include"
   LDFLAGS="$LDFLAGS -L${ac_default_prefix}/lib"
else
   CPPFLAGS="$CPPFLAGS -I${prefix}/include"
   LDFLAGS="$LDFLAGS -L${prefix}/lib"
fi

AC_PROG_CC
AC_PROG_CPP
AC_ISC_POSIX
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Compiling Options
dnl =================
AC_ARG_ENABLE(debug,           [  --enable-debug          Enable debugging ],, enable_debug=no)
AC_ARG_ENABLE(debug-gdb,       [  --enable-debug-gdb      enable GDB debugging ],,enable_debug_gdb=no)
AC_ARG_ENABLE(gettext,         [  --disable-gettext       disable gettext  ], enable_gettext=no, enable_gettext=yes)

dnl Check for header files
dnl ======================
AC_HEADER_STDC

dnl Check for gettext support
dnl =========================
dnl ALL_LINGUAS="de pt_BR"
dnl AM_GNU_GETTEXT
dnl if test "x${prefix}" = "xNONE"; then
dnl  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale")
dnl else
dnl  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
dnl fi

if test "$enable_gettext" = yes; then
	CFLAGS="$CFLAGS -DENABLE_NLS"
	allsubdirs="$subdirs po"
else
	allsubdirs="$subdirs"
fi

dnl Check for typedefs, structures, and compiler characteristics
dnl ============================================================
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL


dnl Check for libs
dnl ==============
AM_PATH_GTK(1.2.0,, AC_MSG_ERROR(*** Can't build GTK games: GTK not found))


AC_ARG_WITH(ggz-config,[  --with-ggz-config=PATH  Path to ggz-config (optional)],
            ggz_config="$withval", ggz_config="no")


if test "$ggz_config" != "no"; then
   AC_CHECK_FILE($ggz_config, GGZ_CONFIG=$ggz_config, 
			      AC_MSG_WARN(*** Specifed ggz-config not found -- searching path) 
			      ggz_config=no)
fi

if test "$ggz_config" = "no"; then
   AC_PATH_PROGS(GGZ_CONFIG, ggz-config, no)
fi

if test "$GGZ_CONFIG" = "no"; then
   AC_MSG_ERROR(*** Couldn't find ggz-config)
fi

AC_CHECK_LIB(easysock, es_make_socket,
    AC_CHECK_HEADER(easysock.h, LDADD="$LDADD -leasysock",
        AC_MSG_ERROR(*** Cannot find easysock.h header)),
AC_MSG_ERROR(*** Cannot find easysock library ))

AC_CHECK_LIB(ggzcore, ggzcore_server_new,
    AC_CHECK_HEADER(ggzcore.h, LDADD="$LDADD -lggzcore",
        AC_MSG_ERROR(*** Cannot find ggzcore.h header)),
AC_MSG_ERROR(*** Cannot find ggzcore library ), -leasysock)


dnl Use -Wall if we have gcc.
dnl =========================
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl


dnl Debug modes
dnl ===========
if test "$enable_debug" = yes; then
    AC_DEFINE(DEBUG)
    DFLAGS="DEBUG"
fi

if test "$enable_debug_gdb" = yes; then
    CFLAGS="$CFLAGS -ggdb"
fi


dnl Various dirs
dnl ============

ggzexecmoddir=`$GGZ_CONFIG --gamedir`
AC_DEFINE_UNQUOTED(GAMEDIR, "${ggzexecmoddir}")

ggzdatadir=`$GGZ_CONFIG --datadir`
AC_DEFINE_UNQUOTED(GGZDATADIR, "${ggzdatadir}")

packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

SUBDIRS=$allsubdirs

AC_SUBST(LDADD)
AC_SUBST(subdirs)
AC_SUBST(SUBDIRS)
AC_SUBST(ggzexecmoddir)
AC_SUBST(ggzdatadir)
AC_SUBST(packagesrcdir)

AC_OUTPUT([Makefile 
	   package
	   spades/Makefile
	   spades/module.dsc
	   tictactoe/Makefile	
	   tictactoe/module.dsc
	   dots/Makefile
	   dots/module.dsc
	   lapocha/Makefile
	   lapocha/module.dsc
	   ggzcards/Makefile
	   ggzcards/module.dsc
	   reversi/Makefile
	   reversi/module.dsc
	   combat/Makefile
	   combat/module.dsc
	   combat/pixmaps/Makefile
	   combat/maps/Makefile
	   hastings/Makefile
	   hastings/module.dsc
	   chinese-checkers/Makefile
	   chinese-checkers/module.dsc
	   chinese-checkers/pixmaps/Makefile
	   chess/Makefile
	   chess/module.dsc
	   chess/libcgc/Makefile
	   po/Makefile
	   ])


dnl Status Output
dnl =============
echo ""
echo "Options"
echo "    General Debugging..$enable_debug"
echo "    GDB Debugging......$enable_debug_gdb"
echo ""
echo "-------------------------"
echo "At the prompt type \"make\" to compile the game modules and"
echo "When complete, su to root and type \"make install\" to"
echo "install the client software."
echo ""
