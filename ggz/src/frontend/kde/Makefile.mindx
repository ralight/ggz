# Makefile for KGGZ
# (C) 2000 Josef Spillner
# Please use configure now! If it doesn't work, use this file.
# Type 'make' or 'make fast' to compile, and make install as root.

# Revision 1.1: Taken from mindx birthday demo (2000-10-??) (josef)
# Revision 1.5: Changed structure to fit to CVS,
# translated comments, release + install + uninstall option (2000-10-29) (josef)
# Revision 1.5.1: Added Desktop icon/applink for KDE2 (2000-10-29) (josef)
# Revision 1.5.2: Added kicker entry and first i18n for icons (2000-11-04) (josef)
# Revision 1.5.3: RedHat FSH support (2000-11-17) (josef)
# Revision 1.5.4: Support for the KHTML widget, and config.h (2000-12-10) (josef)
# kicker entry is now a submenu with ggz-gtk and ggz-txt respectively, and stored in $HOME/.kde/...
# Revision 1.5.5: Icons, and removed a bug (now only root may install) (2000-12-16) (josef)
# Revision 1.6: Complete i18n support, including incremental builds (2000-12-25) (josef)
# Revision 1.6.1: Now support for the Zone MIMEtype, and preparation for autoconf version (2000-12-30) (josef)
# Revision 2.0: Makefile renamed to Makefile.mindx, which will still by maintained by hand.
# Also added 'make fast', which uses implicit compilation rules (suffix rules). (2000-12-31) (josef)


# The important dirs - this is now autoconf stuff in Makefile.am
# KDEDIR=/usr/local/kde - this is obsolete, don't use it anymore
# QTDIR=/usr/local/qt - same
KDELIBS=/usr/local/kde/lib
KDEINCS=/usr/local/kde/include
QTLIBS=/usr/local/qt/lib
QTINCS=/usr/local/qt/include
TARGETDIR=/usr/local

# Uncomment the odd lines to use QTextBrowser only, else uses KHTML
#LIBS_KHTML=
LIBS_KHTML=-lkhtml
#USE_KHTML=
USE_KHTML=-DUSE_KHTML

# Uncomment the lines to use FTP updates
LIBS_FTP=
USE_FTP=-DUSE_FTP

# Uncomment the line to use ggzd server control
USE_SERVER=-DUSE_SERVER

# The version of KGGZ
VERSION=0.0.4pre3

#################################################################################

# Internal variables
QUIET=@
PROGRESS=-n "\#"
SHELL=/bin/sh
CXX=g++
CPP_TEMP=-I../../ggzcore
LD_TEMP=../../ggzcore/libggzcore.a ../../../easysock/libeasysock.a
CPPFLAGS=-c -I$(KDEINCS) -I$(QTINCS) $(CPP_TEMP) -fno-rtti $(USE_KHTML) $(USE_FTP) $(USE_SERVER) -DHAVE_CONFIG_H
LDFLAGS=-L$(KDELIBS) -L$(QTLIBS)
#LIBS: -ldl -lDCOP ommitted, as they are not necessary
LIBS=-lkdeui -lkdecore -lqt $(LIBS_KHTML) $(LIBS_FTP)
DESTDIR=$(TARGETDIR)
MODE=-m 644 -o `cat .user.user` -g `cat .user.group`
# Implicit rules definitions
CXXFLAGS=$(CPPFLAGS)
MAKE=make -f Makefile.mindx --silent


# List of sources
SOURCES=kggz_grubby kggz_install kggz_playerinfo kggz_profiles kggz_hosts kggz_ftp kggz kggz_update kggz_roomsmenu \
	kggz_browser kggz_state kggz_chat kggz_startup kggz_tables kggz_users \
	kggz_chatwidget kggz_motd kggz_teams \
	kggz_preferences kggz_games kggz_settings kggz_connect kggz_launch \
	kggz_server

# List of i18n .po files
POFILES=de pt_BR

# Rules
default: all
all: compile compile_moc i18n icon link
uninstall: clean distclean
release: clean_tmp package unclean_tmp upload
fast: fastcompile i18n icon link


# Fast compilation
fastcompile:
	$(QUIET) echo KGGZ - The KDE client for the GNU Gaming Zone - Version: $(VERSION)
	$(QUIET) echo Fast compilation and moc invokation:
	$(QUIET) SOURCELIST='$(SOURCES)'; \
	for i in $$SOURCELIST; do \
		OBJLIST=`echo -n $$OBJLIST $$i.fast" "`; \
        done; \
	$(MAKE) $$OBJLIST
	$(QUIET) $(CXX) $(CXXFLAGS) -c main.cpp -o main.o
	$(QUIET) echo $(PROGESS)

%.fast: %.cpp
	$(QUIET) CXXFILE=$(patsubst %.fast,%.o,$@); \
	$(MAKE) $$CXXFILE; \
	echo $(PROGRESS)

.cpp.o:
	$(QUIET) MOCFILE=$(patsubst %.cpp,%.moc.cpp,$<); \
	MOCHEADER=$(patsubst %.cpp,%.h,$<); \
	$(CXX) $(CXXFLAGS) -c $< -o $@; \
	$(QTDIR)/bin/moc -nw -o $$MOCFILE $$MOCHEADER; \
	$(CXX) $(CPPFLAGS) $$MOCFILE

# Building KGGZ in 3 steps, plus i18n, plus icon, plus install, or clean up
compile:
	$(QUIET) echo KGGZ - The KDE client for the GNU Gaming Zone - Version: $(VERSION)
	$(QUIET) echo Compilation of the source files:
	$(QUIET) echo Flags: $(USE_KHTML) $(USE_FTP) $(USE_SERVER)
	$(QUIET) SOURCELIST='$(SOURCES)'; \
	for i in $$SOURCELIST; do \
		$(CXX) $(CPPFLAGS) $$i.cpp; \
		echo $(PROGRESS); \
	done
	$(QUIET) $(CXX) $(CPPFLAGS) main.cpp;
	$(QUIET) echo $(PROGRESS);
	$(QUIET) echo

compile_moc:
	$(QUIET) echo Meta objects compiler invokation:
	$(QUIET) SOURCELIST='$(SOURCES)'; \
	for i in $$SOURCELIST; do \
		$(QTDIR)/bin/moc -nw -o $$i.moc.cpp $$i.h; \
		$(CXX) $(CPPFLAGS) $$i.moc.cpp; \
		echo $(PROGRESS); \
	done; \
	echo;

icon:
	$(QUIET) echo $(HOME) > .user.homedir
	$(QUIET) echo `whoami` > .user.user
	$(QUIET) echo `groups | cut -d " " -f 1`  > .user.group

i18n:
	$(QUIET) echo I18n Support
	$(QUIET) xgettext -C -ki18n -kI18N_NOOP -ktranslate *.cpp -o po/kggz.pot
	$(QUIET) cd po; \
	CATALOGS='$(POFILES)'; \
	for cat in $$CATALOGS; do \
		if test -s $$cat.po; then \
			echo $(PROGRESS); \
		else \
			echo Creating $$cat.po; \
			cp kggz.pot $$cat.po; \
		fi; \
		msgmerge -o $$cat.new $$cat.po kggz.pot 1>/dev/null 2>/dev/null; \
		if test -s $$cat.new; then \
			grep -v "\"POT-Creation" $$cat.new > $$cat.new.2; \
			grep -v "\"POT-Creation" $$cat.po > $$cat.new.1; \
			if diff -q $$cat.new.1 $$cat.new.2 >/dev/null; then \
				rm $$cat.new; \
			else \
				mv $$cat.new $$cat.po; \
			fi; \
			rm -f $$cat.new.1 $$cat.new.2; \
		fi; \
	done; \
	echo; \
	msgfmt -o kggz.mo $(LANG).po; \
	cd ..


link:
	$(QUIET) echo Link stage:
	$(QUIET) SOURCELIST='$(SOURCES)'; \
	for i in $$SOURCELIST; do \
		OBJLIST=`echo -n $$OBJLIST $$i.o" "`; \
		MOCOBJLIST=`echo -n $$MOCOBJLIST $$i.moc.o" "`; \
        done; \
	$(CXX) $(LDFLAGS) $(LIBS) -o kggz main.o $$OBJLIST $$MOCOBJLIST $(LD_TEMP)
	$(QUIET) echo Ready. Now run "'make install'" as root!

install:
	$(QUIET) echo Installing KGGZ
	$(QUIET) install -m 755 kggz $(DESTDIR)/bin
	$(QUIET) rm -rf $(DESTDIR)/share/kggz/
	$(QUIET) mkdir --mode=755 $(DESTDIR)/share/kggz/
	$(QUIET) mkdir --mode=755 $(DESTDIR)/share/kggz/images/
	$(QUIET) mkdir --mode=755 $(DESTDIR)/share/kggz/images/icons/
	$(QUIET) mkdir --mode=755 $(DESTDIR)/share/kggz/images/games/
	$(QUIET) mkdir --mode=755 $(DESTDIR)/share/kggz/help/
	$(QUIET) install -m 644 images/icons/*.png $(DESTDIR)/share/kggz/images/icons/
	$(QUIET) install -m 644 images/games/*.png $(DESTDIR)/share/kggz/images/games/
	$(QUIET) install -m 644 images/*.png $(DESTDIR)/share/kggz/images/
	$(QUIET) install -m 644 help/*.html $(DESTDIR)/share/kggz/help/
	$(QUIET) echo Creating menu entries and desktop icon
	$(QUIET) install -d `cat .user.homedir`/Desktop/
	$(QUIET) install -d `cat .user.homedir`/.kde/share/locale/l10n/$(LANG)/
	$(QUIET) install -d `cat .user.homedir`/.kde/share/services/
	$(QUIET) install -d `cat .user.homedir`/.kde/share/mimelnk/application/
	$(QUIET) install -d `cat .user.homedir`/.kde/share/applnk/Games/ggz/
	$(QUIET) install -d `cat .user.homedir`/.kde/share/icons/
	$(QUIET) install $(MODE) images/wm/GNU\ Gaming\ Zone `cat .user.homedir`/Desktop/
	$(QUIET) install $(MODE) images/wm/zone.desktop.services `cat .user.homedir`/.kde/share/services/zone.desktop
	$(QUIET) install $(MODE) images/wm/zone.desktop.applnk `cat .user.homedir`/.kde/share/applnk/Games/zone.desktop
	$(QUIET) install $(MODE) images/wm/zone.desktop.mimelnk `cat .user.homedir`/.kde/share/mimelnk/application/zone.desktop
	$(QUIET) install $(MODE) images/wm/kggz.desktop `cat .user.homedir`/.kde/share/applnk/Games/ggz/
	$(QUIET) install $(MODE) images/wm/ggz-gtk.desktop `cat .user.homedir`/.kde/share/applnk/Games/ggz/
	$(QUIET) install $(MODE) images/wm/ggz-txt.desktop `cat .user.homedir`/.kde/share/applnk/Games/ggz/
	$(QUIET) install $(MODE) images/wm/ggz.directory `cat .user.homedir`/.kde/share/applnk/Games/ggz/.directory
	$(QUIET) install $(MODE) images/wm/*.png `cat .user.homedir`/.kde/share/icons/
	$(QUIET) install $(MODE) po/kggz.mo `cat .user.homedir`/.kde/share/locale/l10n/$(LANG)/
	$(QUIET) echo Done! Have fun playing GGZ!

clean:
	$(QUIET) echo Clean up on disk.
	$(QUIET) rm -rf *.o
	$(QUIET) rm -rf *.moc.cpp
	$(QUIET) rm -f po/*.mo
	$(QUIET) rm -f kggz

distclean:
	$(QUIET) echo Remove everything.
	$(QUIET) rm -rf ../tmp.12345
	$(QUIET) rm -rf ../kggz-$(VERSION).tar.gz
	$(QUIET) rm -rf $(DESTDIR)/bin/kggz
	$(QUIET) rm -rf $(DESTDIR)/share/kggz/
	$(QUIET) rm -rf `cat .user.homedir`/Desktop/GNU\ Gaming\ Zone
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/icons/zone.png
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/icons/kggz.png
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/icons/ggz-gtk.png
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/icons/ggz-txt.png
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/icons/kggz_small.png
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/applnk/Games/ggz/
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/applnk/Games/zone.desktop
	$(QUIET) rm -rf `cat .user.homedir`/.kde/share/mimelnk/application/zone.desktop
	$(QUIET) rm -rf .user.*


# Only for maintainers: building packages
clean_tmp:
	# TODO: select files for release separately
	$(QUIET) echo Clean up temporarily
	$(QUIET) mkdir ../tmp.12345
	$(QUIET) touch tmp.12345.o
	$(QUIET) touch tmp.12345.moc.cpp
	$(QUIET) touch tmp.12345.kggz
	$(QUIET) mv -f *.o ../tmp.12345
	$(QUIET) mv -f *.moc.cpp ../tmp.12345
	$(QUIET) mv -f *kggz ../tmp.12345

unclean_tmp:
	$(QUIET) echo Restore temporary files
	$(QUIET) mv -f ../tmp.12345/* .
	$(QUIET) rm -rf ../tmp.12345
	$(QUIET) rm -rf tmp.12345.*

package:
	$(QUIET) echo Make a release; \
	chmod -R go+r *; \
	chmod -R go+r .*; \
	cd ..; \
	mv kde kggz-$(VERSION); \
	tar -cf kggz-$(VERSION).tar kggz-$(VERSION); \
	mv kggz-$(VERSION) kde; \
	gzip --force --best kggz-$(VERSION).tar; \
	cd kde; \
	echo Release $(VERSION) built successfully!

upload:
	$(QUIET) echo Putting KGGZ on mindx.sourceforge.net
	$(QUIET) scp ../kggz-$(VERSION).tar.gz dr_maux@mindx.sourceforge.net:/home/groups/ftp/pub/mindx/
	$(QUIET) rm ../kggz-$(VERSION).tar.gz
	$(QUIET) echo Ready!
