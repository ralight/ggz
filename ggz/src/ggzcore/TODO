- implement GGZ_NET_ERROR event

- implement GGZ_PROTO_ERROR event

- an error sybsystem is crucial
  Kinds of errors:
  Catastrophic errors: non-recoverable "give-up-and-die" errors like
                      failed malloc()
  Network errors: pathalogical errors that cause a disconnection
  Bad data from server, or game module: ?
  Bad data from user: report or ignore
  What to do when an error occurs during a callback?1

- Move over to ggzcore_malloc/free

- redo GGZTable to store actual seat information, not open/bots/etc.

- finish up room object: table lists updates

- Remove the ggzcore_server_get_XXX_names() function

- Fix the player/table pointing problem

- Implement GGZModule

- rather than permanently having a callback for events like
  SERVER_ROOM_CHANGE, we will register one when the client makes a
  request for a room change.  This hook then gets removed after it is
  called.  We can use this mechanism to pass information such as
  whether a verbose listing was requested, or what room was requested
  (this is really a frontend TODO)

- Provide a GGZ_AUTOLOAD option to automatically load room and type
  lists (and motd?) upon logging in and the player and table lists
  upon entering a room.

- Reimplement net functionality as its own object

- Allow option for non-blocking socket: to make this easier, the
  protocol could be altered so that each message sends its length in
  bytes right after the opcode.  This is also easier if there are no
  "conditionals" in the messages.  The verbose information can be
  obtained in a separate message

