.TH "ggzmod.h" 3 "21 May 2005" "Version 0.0.11" "GGZMod" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ggzmod.h \- Common functions for interfacing a game server and GGZ. 
.SH SYNOPSIS
.br
.PP
\fC#include <ggz.h>\fP
.br
\fC#include <ggz_common.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBGGZMOD_VERSION_MAJOR\fP   0"
.br
.ti -1c
.RI "#define \fBGGZMOD_VERSION_MINOR\fP   0"
.br
.ti -1c
.RI "#define \fBGGZMOD_VERSION_MICRO\fP   11"
.br
.ti -1c
.RI "#define \fBGGZMOD_VERSION_IFACE\fP   '3:1:1'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBGGZMod\fP \fBGGZMod\fP"
.br
.RI "\fIA GGZmod object, used for tracking a ggz<->table connection. \fP"
.ti -1c
.RI "typedef void(* \fBGGZModHandler\fP )(\fBGGZMod\fP *mod, \fBGGZModEvent\fP e, const void *data)"
.br
.RI "\fIEvent handler prototype. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBGGZModState\fP { \fBGGZMOD_STATE_CREATED\fP, \fBGGZMOD_STATE_CONNECTED\fP, \fBGGZMOD_STATE_WAITING\fP, \fBGGZMOD_STATE_PLAYING\fP, \fBGGZMOD_STATE_DONE\fP }"
.br
.RI "\fITable states. \fP"
.ti -1c
.RI "enum \fBGGZModEvent\fP { \fBGGZMOD_EVENT_STATE\fP, \fBGGZMOD_EVENT_SERVER\fP, \fBGGZMOD_EVENT_PLAYER\fP, \fBGGZMOD_EVENT_SEAT\fP, \fBGGZMOD_EVENT_SPECTATOR_SEAT\fP, \fBGGZMOD_EVENT_CHAT\fP, \fBGGZMOD_EVENT_STATS\fP, \fBGGZMOD_EVENT_ERROR\fP }"
.br
.RI "\fICallback events. \fP"
.ti -1c
.RI "enum \fBGGZModType\fP { \fBGGZMOD_GGZ\fP, \fBGGZMOD_GAME\fP }"
.br
.RI "\fIThe 'type' of ggzmod. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGGZMod\fP * \fBggzmod_new\fP (\fBGGZModType\fP type)"
.br
.RI "\fICreate a new ggzmod object. \fP"
.ti -1c
.RI "void \fBggzmod_free\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIDestroy a finished ggzmod object. \fP"
.ti -1c
.RI "int \fBggzmod_get_fd\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIGet the file descriptor for the GGZMod socket. \fP"
.ti -1c
.RI "\fBGGZModType\fP \fBggzmod_get_type\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIGet the type of the ggzmod object. \fP"
.ti -1c
.RI "\fBGGZModState\fP \fBggzmod_get_state\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIGet the current state of the table. \fP"
.ti -1c
.RI "int \fBggzmod_get_server_fd\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIGet the fd of the game server connection. \fP"
.ti -1c
.RI "int \fBggzmod_get_num_seats\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIGet the total number of seats at the table. \fP"
.ti -1c
.RI "\fBGGZSeat\fP \fBggzmod_get_seat\fP (\fBGGZMod\fP *ggzmod, int seat)"
.br
.RI "\fIGet all data for the specified seat. \fP"
.ti -1c
.RI "int \fBggzmod_get_num_spectator_seats\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIGet the maximum number of spectators. This function returns the maximum number of spectator seats available. A game can use this to iterate over the spectator seats to look for spectators occupying them. Since spectators may come and go at any point and there is no limit on the number of spectators, you should consider this value to be dynamic and call this function again each time you're looking for spectators. \fP"
.ti -1c
.RI "\fBGGZSpectatorSeat\fP \fBggzmod_get_spectator_seat\fP (\fBGGZMod\fP *ggzmod, int seat)"
.br
.RI "\fIGet a spectator's data. \fP"
.ti -1c
.RI "const char * \fBggzmod_get_player\fP (\fBGGZMod\fP *ggzmod, int *is_spectator, int *seat_num)"
.br
.RI "\fIGet data about this player. \fP"
.ti -1c
.RI "void * \fBggzmod_get_gamedata\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIReturn gamedata pointer. \fP"
.ti -1c
.RI "void \fBggzmod_set_gamedata\fP (\fBGGZMod\fP *ggzmod, void *data)"
.br
.RI "\fISet gamedata pointer. \fP"
.ti -1c
.RI "void \fBggzmod_set_handler\fP (\fBGGZMod\fP *ggzmod, \fBGGZModEvent\fP e, \fBGGZModHandler\fP func)"
.br
.RI "\fISet a handler for the given event. \fP"
.ti -1c
.RI "int \fBggzmod_dispatch\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fICheck for and handle input. \fP"
.ti -1c
.RI "int \fBggzmod_set_state\fP (\fBGGZMod\fP *ggzmod, \fBGGZModState\fP state)"
.br
.RI "\fIChange the table's state. \fP"
.ti -1c
.RI "int \fBggzmod_connect\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIConnect to ggz. \fP"
.ti -1c
.RI "int \fBggzmod_disconnect\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIDisconnect from ggz. \fP"
.ti -1c
.RI "void \fBggzmod_request_stand\fP (\fBGGZMod\fP *ggzmod)"
.br
.RI "\fIStand up (move from your seat into a spectator seat). \fP"
.ti -1c
.RI "void \fBggzmod_request_sit\fP (\fBGGZMod\fP *ggzmod, int seat_num)"
.br
.RI "\fISit down (move from a spectator seat into a player seat). \fP"
.ti -1c
.RI "void \fBggzmod_request_boot\fP (\fBGGZMod\fP *ggzmod, const char *name)"
.br
.RI "\fIBoot a player. Only the game host may do this. \fP"
.ti -1c
.RI "void \fBggzmod_request_bot\fP (\fBGGZMod\fP *ggzmod, int seat_num)"
.br
.RI "\fIChange the requested seat from an opean seat to a bot. \fP"
.ti -1c
.RI "void \fBggzmod_request_open\fP (\fBGGZMod\fP *ggzmod, int seat_num)"
.br
.RI "\fIChange the requested seat from a bot to an open seat. \fP"
.ti -1c
.RI "void \fBggzmod_request_chat\fP (\fBGGZMod\fP *ggzmod, const char *chat_msg)"
.br
.RI "\fIChat! This initiates a table chat. \fP"
.ti -1c
.RI "int \fBggzmod_player_get_record\fP (\fBGGZMod\fP *ggzmod, \fBGGZSeat\fP *seat, int *wins, int *losses, int *ties, int *forfeits)"
.br
.RI "\fIGet the player's win-loss record. \fP"
.ti -1c
.RI "int \fBggzmod_player_get_rating\fP (\fBGGZMod\fP *ggzmod, \fBGGZSeat\fP *seat, int *rating)"
.br
.RI "\fIGet the player's rating. \fP"
.ti -1c
.RI "int \fBggzmod_player_get_ranking\fP (\fBGGZMod\fP *ggzmod, \fBGGZSeat\fP *seat, int *ranking)"
.br
.RI "\fIGet the player's ranking. \fP"
.ti -1c
.RI "int \fBggzmod_player_get_highscore\fP (\fBGGZMod\fP *ggzmod, \fBGGZSeat\fP *seat, int *highscore)"
.br
.RI "\fIGet the player's highscore. \fP"
.ti -1c
.RI "int \fBggzmod_spectator_get_record\fP (\fBGGZMod\fP *ggzmod, \fBGGZSpectatorSeat\fP *seat, int *wins, int *losses, int *ties, int *forfeits)"
.br
.RI "\fIGet the spectator's win-loss record. \fP"
.ti -1c
.RI "int \fBggzmod_spectator_get_rating\fP (\fBGGZMod\fP *ggzmod, \fBGGZSpectatorSeat\fP *seat, int *rating)"
.br
.RI "\fIGet the spectator's rating. \fP"
.ti -1c
.RI "int \fBggzmod_spectator_get_ranking\fP (\fBGGZMod\fP *ggzmod, \fBGGZSpectatorSeat\fP *seat, int *ranking)"
.br
.RI "\fIGet the spectator's ranking. \fP"
.ti -1c
.RI "int \fBggzmod_spectator_get_highscore\fP (\fBGGZMod\fP *ggzmod, \fBGGZSpectatorSeat\fP *seat, int *highscore)"
.br
.RI "\fIGet the spectator's highscore. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Common functions for interfacing a game server and GGZ. 

This file contains all libggzmod functions used by game servers to interface with GGZ (and vice versa). Just include \fBggzmod.h\fP and make sure your program is linked with libggzmod. Then use the functions below as appropriate.
.PP
GGZmod currently provides an event-driven interface. Data from communication sockets is read in by the library, and a handler function (registered as a callback) is invoked to handle any events. The calling program should not read/write data from/to the GGZ socket unless it really knows what it is doing.
.PP
That this does not apply to the client sockets: ggzmod provides one file desriptor for communicating (TCP) to each client. If data is ready to be read by one of these file descriptors ggzmod may invoke the appropriate handler (see below), but will never actually read any data.
.PP
For more information, see the documentation at http://ggz.sf.net/. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBGGZMod\fP \fBGGZMod\fP"
.PP
A GGZmod object, used for tracking a ggz<->table connection. 
.PP
A game client should track a pointer to a GGZMod object; it contains all the state information for communicating with GGZ. The GGZ client will track one such object for every game table that is running. 
.SS "typedef void(* \fBGGZModHandler\fP)(\fBGGZMod\fP *mod, \fBGGZModEvent\fP e, const void *data)"
.PP
Event handler prototype. 
.PP
A function of this type will be called to handle a ggzmod event. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP The ggzmod state object. 
.br
\fIe\fP The event that has occured. 
.br
\fIdata\fP Pointer to additional data for the event. The additional data will be of the following form:
.IP "\(bu" 2
GGZMOD_EVENT_STATE: The old state (GGZModState*)
.IP "\(bu" 2
GGZMOD_EVENT_SERVER: The fd of the server connection (int*)
.IP "\(bu" 2
GGZMOD_EVENT_PLAYER: The old player data (int[2])
.IP "\(bu" 2
GGZMOD_EVENT_SEAT: The old seat (GGZSeat*)
.IP "\(bu" 2
GGZMOD_EVENT_SPECTATOR_SEAT: The old seat (GGZSpectatorSeat*)
.IP "\(bu" 2
GGZMOD_EVENT_ERROR: An error string (char*) 
.PP
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBGGZModEvent\fP"
.PP
Callback events. 
.PP
Each of these is a possible GGZmod event. For each event, the table may register a handler with GGZmod to handle that event. 
.PP
\fBSee also:\fP
.RS 4
\fBGGZModHandler\fP 
.PP
\fBggzmod_set_handler\fP 
.RE
.PP

.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZMOD_EVENT_STATE \fP\fP
Module status changed This event occurs when the game's status changes. The old state (a GGZModState*) is passed as the event's data. 
.PP
\fBSee also:\fP
.RS 4
\fBGGZModState\fP 
.RE
.PP

.TP
\fB\fIGGZMOD_EVENT_SERVER \fP\fP
A new server connection has been made This event occurs when a new connection to the game server has been made. The fd is passed as the event's data. 
.TP
\fB\fIGGZMOD_EVENT_PLAYER \fP\fP
The player's seat status has changed. 
.PP
This event occurs when the player's seat status changes; i.e. he changes seats or starts/stops spectating. The event data is a int[2] pair consisting of the old {is_spectator, seat_num}. 
.TP
\fB\fIGGZMOD_EVENT_SEAT \fP\fP
A seat change. 
.PP
This event occurs when a seat change occurs. The old seat (a GGZSeat*) is passed as the event's data. The seat information will be updated before the event is invoked. 
.TP
\fB\fIGGZMOD_EVENT_SPECTATOR_SEAT \fP\fP
A spectator seat change. 
.PP
This event occurs when a spectator seat change occurs. The old spectator (a GGZSpectator*) is passed as the event's data. The spectator information will be updated before the event is invoked. 
.TP
\fB\fIGGZMOD_EVENT_CHAT \fP\fP
A chat message event. 
.PP
This event occurs when we receive a chat. The chat may have originated in another game client or from the GGZ client; in either case it will be routed to us. The chat information (a GGZChat*) is passed as the event's data. Note that the chat may originate with a player or a spectator, and they may have changed seats or left the table by the time it gets to us. 
.TP
\fB\fIGGZMOD_EVENT_STATS \fP\fP
A player's stats have been updated. 
.PP
\fBSee also:\fP
.RS 4
\fBggzmod_player_get_record\fP 
.PP
\fBggzmod_player_get_rating\fP 
.PP
\fBggzmod_player_get_ranking\fP 
.PP
\fBggzmod_player_get_highscore\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The name of the player whose stats have changed. 
.RE
.PP

.TP
\fB\fIGGZMOD_EVENT_ERROR \fP\fP
An error has occurred This event occurs when a GGZMod error has occurred. An error message (a char*) will be passed as the event's data. GGZMod may attempt to recover from the error, but it is not guaranteed that the GGZ connection will continue to work after an error has happened. 
.SS "enum \fBGGZModState\fP"
.PP
Table states. 
.PP
Each table has a current 'state' that is tracked by ggzmod. First the table is executed and begins running. Then it receives a launch event from GGZ and begins waiting for players. At some point a game will be started and played at the table, after which it may return to waiting. Eventually the table will probably halt and then the program will exit.
.PP
More specifically, the game is in the CREATED state when it is first executed. It moves to the CONNECTED state after GGZ first communicates with it, and to WAITING after the connection is established with the game server. After this, the game server may use ggzmod_set_state to change between WAITING, PLAYING, and DONE states. A WAITING game is considered waiting for players (or whatever), while a PLAYING game is actively being played (this information may be, but currently is not, propogated back to GGZ for display purposes). Once the state is changed to DONE, the table is considered dead and will exit shortly thereafter (ggzmod_loop will stop looping, etc.) (see the kill_on_exit game option).
.PP
Each time the game state changes, a GGZMOD_EVENT_STATE event will be propogated to the game server. 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZMOD_STATE_CREATED \fP\fP
Initial state. The game starts out in this state. Once the state is changed it should never be changed back. 
.TP
\fB\fIGGZMOD_STATE_CONNECTED \fP\fP
Connected state. After the GGZ client and game client get connected, the game changes into this state automatically. Once this happens messages may be sent between these two. Once the game leaves this state it should never be changed back. 
.TP
\fB\fIGGZMOD_STATE_WAITING \fP\fP
Waiting state. After the game client and game server are connected, the client enters the waiting state. The game client may now call ggzmod_set_state to change between WAITING, PLAYING, and DONE states. 
.TP
\fB\fIGGZMOD_STATE_PLAYING \fP\fP
Playing state. This state is only entered after the game client changes state to it via ggzmod_set_state. State may be changed back and forth between WAITING and PLAYING as many times as are wanted. 
.TP
\fB\fIGGZMOD_STATE_DONE \fP\fP
Done state. Once the game client is done running, ggzmod_set_state should be called to set the state to done. At this point nothing 'new' can happen. The state cannot be changed again after this. However the game client will not be terminated by the GGZ client; GGZ just waits for it to exit of its own volition. 
.SS "enum \fBGGZModType\fP"
.PP
The 'type' of ggzmod. 
.PP
The 'flavor' of GGZmod object this is. Affects what operations are allowed. 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZMOD_GGZ \fP\fP
Used by the ggz client ('ggz'). 
.TP
\fB\fIGGZMOD_GAME \fP\fP
Used by the game client ('table'). 
.SH "Function Documentation"
.PP 
.SS "int ggzmod_connect (\fBGGZMod\fP * ggzmod)"
.PP
Connect to ggz. 
.PP
Call this function to make an initial GGZ <-> game connection.
.IP "\(bu" 2
When called by the game server, this function makes the physical connection to ggz.
.IP "\(bu" 2
When called by ggz, it will launch a table and connect to it. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure. 
.RE
.PP

.PP

.SS "int ggzmod_disconnect (\fBGGZMod\fP * ggzmod)"
.PP
Disconnect from ggz. 
.PP
.IP "\(bu" 2
When called by the game server, this function stops the connection to GGZ. It should only be called when the table is ready to exit.
.IP "  \(bu" 4
When called by the GGZ server, this function will kill and clean up after the table. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure. 
.RE
.PP

.PP

.PP

.SS "int ggzmod_dispatch (\fBGGZMod\fP * ggzmod)"
.PP
Check for and handle input. 
.PP
This function handles input from the communications sockets:
.IP "\(bu" 2
It will check for input, but will not block.
.IP "\(bu" 2
It will monitor input from the GGZmod socket.
.IP "\(bu" 2
It will monitor input from player sockets only if a handler is registered for the PLAYER_DATA event.
.IP "\(bu" 2
It will call an event handler as necessary. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
-1 on error, the number of events handled (0-1) on success. 
.RE
.PP

.PP

.SS "void ggzmod_free (\fBGGZMod\fP * ggzmod)"
.PP
Destroy a finished ggzmod object. 
.PP
After the connection is through, the object may be freed. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.RE
.PP

.SS "int ggzmod_get_fd (\fBGGZMod\fP * ggzmod)"
.PP
Get the file descriptor for the GGZMod socket. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
GGZMod's main ggz <-> table socket FD. 
.RE
.PP

.SS "void* ggzmod_get_gamedata (\fBGGZMod\fP * ggzmod)"
.PP
Return gamedata pointer. 
.PP
Each GGZMod object can be given a 'gamedata' pointer that is returned by this function. This is useful for when a single process serves multiple GGZmod's. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the gamedata block (or NULL if none). 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzmod_set_gamedata\fP 
.RE
.PP

.SS "int ggzmod_get_num_seats (\fBGGZMod\fP * ggzmod)"
.PP
Get the total number of seats at the table. 
.PP
\fBReturns:\fP
.RS 4
The number of seats, or -1 on error. 
.RE
.PP
\fBNote:\fP
.RS 4
If no connection is present, -1 will be returned. 
.PP
While in GGZMOD_STATE_CREATED, we don't know the number of seats. 
.RE
.PP

.SS "int ggzmod_get_num_spectator_seats (\fBGGZMod\fP * ggzmod)"
.PP
Get the maximum number of spectators. This function returns the maximum number of spectator seats available. A game can use this to iterate over the spectator seats to look for spectators occupying them. Since spectators may come and go at any point and there is no limit on the number of spectators, you should consider this value to be dynamic and call this function again each time you're looking for spectators. 
.PP
\fBReturns:\fP
.RS 4
The number of available spectator seats, or -1 on error. 
.RE
.PP

.SS "const char* ggzmod_get_player (\fBGGZMod\fP * ggzmod, int * is_spectator, int * seat_num)"
.PP
Get data about this player. 
.PP
Call this function to find out where at the table this player is sitting. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.br
\fIis_spectator\fP Will be set to TRUE iff player is spectating. 
.br
\fIseat_num\fP Will be set to the number of our (spectator) seat. 
.RE
.PP
\fBReturns:\fP
.RS 4
The name of the player (or NULL on error). 
.RE
.PP

.SS "\fBGGZSeat\fP ggzmod_get_seat (\fBGGZMod\fP * ggzmod, int seat)"
.PP
Get all data for the specified seat. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.br
\fIseat\fP The seat number (0..(number of seats - 1)). 
.RE
.PP
\fBReturns:\fP
.RS 4
A valid \fBGGZSeat\fP structure, if seat is a valid seat. 
.RE
.PP

.SS "int ggzmod_get_server_fd (\fBGGZMod\fP * ggzmod)"
.PP
Get the fd of the game server connection. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The server connection fd 
.RE
.PP

.SS "\fBGGZSpectatorSeat\fP ggzmod_get_spectator_seat (\fBGGZMod\fP * ggzmod, int seat)"
.PP
Get a spectator's data. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.br
\fIseat\fP The number, between 0 and (number of spectators - 1). 
.RE
.PP
\fBReturns:\fP
.RS 4
A valid GGZSpectator structure, if given a valid seat. 
.RE
.PP

.SS "\fBGGZModState\fP ggzmod_get_state (\fBGGZMod\fP * ggzmod)"
.PP
Get the current state of the table. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The state of the table. 
.RE
.PP

.SS "\fBGGZModType\fP ggzmod_get_type (\fBGGZMod\fP * ggzmod)"
.PP
Get the type of the ggzmod object. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The type of the GGZMod object (GGZ or GAME). 
.RE
.PP

.SS "\fBGGZMod\fP* ggzmod_new (\fBGGZModType\fP type)"
.PP
Create a new ggzmod object. 
.PP
Before connecting through ggzmod, a new ggzmod object is needed. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP The type of ggzmod. Should be GGZMOD_GAME for game servers. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGGZModType\fP 
.RE
.PP

.SS "int ggzmod_player_get_highscore (\fBGGZMod\fP * ggzmod, \fBGGZSeat\fP * seat, int * highscore)"
.PP
Get the player's highscore. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a highscore; FALSE if not or on error. 
.RE
.PP

.SS "int ggzmod_player_get_ranking (\fBGGZMod\fP * ggzmod, \fBGGZSeat\fP * seat, int * ranking)"
.PP
Get the player's ranking. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a ranking; FALSE if not or on error. 
.RE
.PP

.SS "int ggzmod_player_get_rating (\fBGGZMod\fP * ggzmod, \fBGGZSeat\fP * seat, int * rating)"
.PP
Get the player's rating. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a rating; FALSE if not or on error. 
.RE
.PP

.SS "int ggzmod_player_get_record (\fBGGZMod\fP * ggzmod, \fBGGZSeat\fP * seat, int * wins, int * losses, int * ties, int * forfeits)"
.PP
Get the player's win-loss record. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a record; FALSE if not or on error. 
.RE
.PP

.SS "void ggzmod_request_boot (\fBGGZMod\fP * ggzmod, const char * name)"
.PP
Boot a player. Only the game host may do this. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.br
\fIname\fP The name of the player to boot. 
.RE
.PP

.SS "void ggzmod_request_bot (\fBGGZMod\fP * ggzmod, int seat_num)"
.PP
Change the requested seat from an opean seat to a bot. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.br
\fIseat_num\fP The number of the seat to toggle. 
.RE
.PP

.SS "void ggzmod_request_chat (\fBGGZMod\fP * ggzmod, const char * chat_msg)"
.PP
Chat! This initiates a table chat. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.br
\fIchat_msg\fP The chat message. 
.RE
.PP
\fBNote:\fP
.RS 4
The chat message should be in UTF-8. 
.RE
.PP

.SS "void ggzmod_request_open (\fBGGZMod\fP * ggzmod, int seat_num)"
.PP
Change the requested seat from a bot to an open seat. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.br
\fIseat_num\fP The number of the seat to toggle. 
.RE
.PP

.SS "void ggzmod_request_sit (\fBGGZMod\fP * ggzmod, int seat_num)"
.PP
Sit down (move from a spectator seat into a player seat). 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.br
\fIseat_num\fP The seat to sit in. 
.RE
.PP

.SS "void ggzmod_request_stand (\fBGGZMod\fP * ggzmod)"
.PP
Stand up (move from your seat into a spectator seat). 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.RE
.PP

.SS "void ggzmod_set_gamedata (\fBGGZMod\fP * ggzmod, void * data)"
.PP
Set gamedata pointer. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZMod object. 
.br
\fIdata\fP The gamedata block (or NULL for none). 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzmod_get_gamedata\fP 
.RE
.PP

.SS "void ggzmod_set_handler (\fBGGZMod\fP * ggzmod, \fBGGZModEvent\fP e, \fBGGZModHandler\fP func)"
.PP
Set a handler for the given event. 
.PP
As described above, GGZmod uses an event-driven structure. Each time an event is called, the event handler (there can be only one) for that event will be called. This function registers such an event handler. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The GGZmod object. 
.br
\fIe\fP The GGZmod event. 
.br
\fIfunc\fP The handler function being registered. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzmod_get_gamedata\fP 
.RE
.PP

.SS "int ggzmod_set_state (\fBGGZMod\fP * ggzmod, \fBGGZModState\fP state)"
.PP
Change the table's state. 
.PP
This function should be called to change the state of a table. A game can use this function to change state between WAITING and PLAYING, or to set it to DONE. 
.PP
\fBParameters:\fP
.RS 4
\fIggzmod\fP The ggzmod object. 
.br
\fIstate\fP The new state. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure/error. 
.RE
.PP

.SS "int ggzmod_spectator_get_highscore (\fBGGZMod\fP * ggzmod, \fBGGZSpectatorSeat\fP * seat, int * highscore)"
.PP
Get the spectator's highscore. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a highscore; FALSE if not or on error. 
.RE
.PP

.SS "int ggzmod_spectator_get_ranking (\fBGGZMod\fP * ggzmod, \fBGGZSpectatorSeat\fP * seat, int * ranking)"
.PP
Get the spectator's ranking. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a ranking; FALSE if not or on error. 
.RE
.PP

.SS "int ggzmod_spectator_get_rating (\fBGGZMod\fP * ggzmod, \fBGGZSpectatorSeat\fP * seat, int * rating)"
.PP
Get the spectator's rating. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a rating; FALSE if not or on error. 
.RE
.PP

.SS "int ggzmod_spectator_get_record (\fBGGZMod\fP * ggzmod, \fBGGZSpectatorSeat\fP * seat, int * wins, int * losses, int * ties, int * forfeits)"
.PP
Get the spectator's win-loss record. 
.PP
\fBReturns:\fP
.RS 4
TRUE if there is a record; FALSE if not or on error. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for GGZMod from the source code.
