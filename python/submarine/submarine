#!/usr/bin/env python
# Submarine - a server for the battleship game
# Copyright (C) 2007 Josef Spillner <josef@ggzgamingzone.org>
# Published under GNU GPL conditions

from Numeric import *
import sys
import time
#import random
#import os, pwd
#import re

# FIXME: This game needs 4XPath from 4suite.org (python-xml package)
import xml.dom.minidom
import xml.xpath
import socket

print "###-submarine-###"

import ggzdmod

try:
	import ggzsettings
	DATAPATH = ggzsettings.DATAPATH + "/submarine/"
	sys.path = [ggzsettings.MODULEPATH + "/submarine/"] + sys.path
	sys.path = [ggzsettings.MODULEPATH + "/common/"] + sys.path
except:
	DATAPATH = "./"
	sys.path = ["../lib/"] + sys.path

class Network:
	def __init__(self):
		self.sock = None

	def init(self, fd):
		self.sock = socket.fromfd(fd, socket.AF_INET, socket.SOCK_STREAM)

	def sendxml(self, element):
		str = element.toxml()
		self.sock.send(str)

	def getxml(self):
		str = self.sock.recv(1024)
		print "XMLSTR", str
		element = xml.dom.minidom.parseString(str)
		print "ELEMENT", element
		return element

def nickmessage(name):
	impl = xml.dom.minidom.getDOMImplementation()
	doc = impl.createDocument(None, "kmessage", None)
	message = doc.documentElement
	msgtype = doc.createElement("msgtype")
	message.appendChild(msgtype)
	msgtype_text = doc.createTextNode("2")
	msgtype.appendChild(msgtype_text)
	nickname = doc.createElement("nickname")
	message.appendChild(nickname)
	nickname_text = doc.createTextNode(name)
	nickname.appendChild(nickname_text)
	return message

class Submarine:
	def __init__(self):
		self.net = None
		self.messagequeues = [[], []]

	def setNet(self, net):
		self.net = net

	def work(self, num, message):
		print "<= message from", num
		print "MESSAGE", message

		mtype = xml.xpath.Evaluate('string(/kmessage/msgtype)', message)
		print "TYPE", mtype
		if mtype == "0":
			# Client module information, handled by GGZ
			# We drop in the nickname message here
			seat = ggzdmod.getSeat(num)
			name = seat[2]
			message = nickmessage(name)
			self.messagequeues[num].append(message)
			print "*STORE*", name, "for", num
		elif mtype == "1":
			# ???
			pass
		elif mtype == "2":
			# Nickname, handled by GGZ
			pass
		elif mtype == "3":
			# All ships set
			pass
		elif mtype == "4":
			# Explosion attempt
			fieldx = xml.xpath.Evaluate('string(/kmessage/fieldx)', message)
			fieldy = xml.xpath.Evaluate('string(/kmessage/fieldy)', message)
		elif mtype == "5":
			# Explosion answer
			fieldx = xml.xpath.Evaluate('string(/kmessage/fieldx)', message)
			fieldy = xml.xpath.Evaluate('string(/kmessage/fieldy)', message)
			fieldstate = xml.xpath.Evaluate('string(/kmessage/fieldstate)', message)
			xstart = xml.xpath.Evaluate('string(/kmessage/xstart)', message)
			ystart = xml.xpath.Evaluate('string(/kmessage/ystart)', message)
			xstop = xml.xpath.Evaluate('string(/kmessage/xstop)', message)
			ystop = xml.xpath.Evaluate('string(/kmessage/ystop)', message)
			death = xml.xpath.Evaluate('string(/kmessage/death)', message)
			if fieldstate == "1":
				# hit
				if death:
					pass
				else:
					pass
			elif fieldstate == "99":
				# miss
				pass
		elif mtype == "6":
			# Game over
			ship0 = xml.xpath.Evaluate('string(/kmessage/ship0)', message)
			ship1 = xml.xpath.Evaluate('string(/kmessage/ship1)', message)
			ship2 = xml.xpath.Evaluate('string(/kmessage/ship2)', message)
			ship3 = xml.xpath.Evaluate('string(/kmessage/ship3)', message)
		elif mtype == "7":
			# Play-again
			pass

		openseats = ggzdmod.countSeats(ggzdmod.SEAT_OPEN)
		if openseats == 0:
			self.workPending(num)
			oppseat = ggzdmod.getSeat(1 - num)
			self.net.init(oppseat[3])
			print "=> send message to", oppseat
			self.net.sendxml(message)
		else:
			print "** freeze for later send"
			self.messagequeues[num].append(message)

	def workPending(self, num):
		if len(self.messagequeues[1 - num]) > 0:
			print "** thaw queued messages"
			oppseat = ggzdmod.getSeat(num)
			self.net.init(oppseat[3])
			for message in self.messagequeues[1 - num]:
				#message = self.messagequeues[1 - num][i]
				self.net.sendxml(message)
			self.messagequeues[1 - num] = []

def hook_state (state):
	print "* state:", str(state)

def hook_join (num, type, name, fd):
	global submarine

	print "* join:", num, type, name, fd
	print "fd =", fd
	#net.init(fd)

	submarine.workPending(num)

def hook_leave (num, type, name, fd):
	print "* leave:", num, type, name, fd

def hook_data (num, type, name, fd):
	global submarine

	print "* data:", num, type, name, fd
	print "fd =", fd
	net.init(fd)

	message = net.getxml()
	submarine.setNet(net)
	submarine.work(num, message)

def hook_error (arg):
	print "* error:", arg
	sys.exit(-1)

def initggz():
	ggzdmod.setHandler(ggzdmod.EVENT_STATE, hook_state)
	ggzdmod.setHandler(ggzdmod.EVENT_JOIN, hook_join)
	ggzdmod.setHandler(ggzdmod.EVENT_LEAVE, hook_leave)
	ggzdmod.setHandler(ggzdmod.EVENT_DATA, hook_data)
	ggzdmod.setHandler(ggzdmod.EVENT_ERROR, hook_error)

def main():
	global net
	global submarine

	print "### launched"

	""" Setup """

	submarine = Submarine()

	print "### go init ggz"

	initggz()
	net = Network()

	print "### now go loop"

	ggzdmod.connect()
	ggzdmod.mainLoop()

	""" Main loop """

	while 1:
		pass

if __name__ == "__main__":
	main()

