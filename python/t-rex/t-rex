#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Tournament table launcher
# Copyright (C) 2008 Josef Spillner <josef@ggzgamingzone.org>
# Published under GNU GPL conditions

import os, sys
import ConfigParser
import pg
import math

try:
	import ggzsettings
	sys.path = [ggzsettings.PYTHONPATH] + sys.path
	sys.path = [ggzsettings.MODULEPATH + "/common/"] + sys.path
except:
	import platform
	ver_info = sys.version_info
	ver = str(ver_info[0]) + "." + str(ver_info[1])
	arch = platform.system().lower() + "-" + platform.machine() + "-" + ver
	sys.path = ["../pyggzcore/build/lib." + arch] + sys.path
	sys.path = ["../lib"] + sys.path

import ggzcoresimple
import commonuri

global_room_data = None
global_abort = False
global_tournamenttables = None
global_roomlist = None

def ggz_game_event(id, data):
	pass

def ggz_room_event(id, data):
	if id == ggzcoresimple.ROOM_CHAT_EVENT:
		#type = data[0]
		#player = data[1]
		#message = unic(data[2])

		#chatoutput.append(player + ": " + message)
		pass
	elif id == ggzcoresimple.ROOM_TABLE_LIST:
		tablelist = data
	elif id == ggzcoresimple.ROOM_PLAYER_LIST:
		playerlist = data
	elif id == ggzcoresimple.ROOM_TABLE_UPDATE:
		tablelist = data
	elif id == ggzcoresimple.ROOM_ENTER:
		#tablelist = data
		pass
	elif id == ggzcoresimple.ROOM_LEAVE:
		#tablelist = data
		pass

def join_room():
	global global_room_data
	global global_roomlist

	(room, pair) = global_room_data
	try:
		num = global_roomlist.index(room)
	except:
		print "ERROR: room " + room + " not found"
		global_room_data = None
		return
	print "->", room
	ggzcoresimple.server.join_room(room)

def ggz_server_event(id, data):
	global global_abort
	global global_room_data
	global global_roomlist

	if id == ggzcoresimple.SERVER_CONNECTED:
		print "- connected"
	elif id == ggzcoresimple.SERVER_CONNECT_FAIL:
		print "- connection failure"
		global_abort = True
	elif id == ggzcoresimple.SERVER_NEGOTIATED:
		print "- negotiated"
		ggzcoresimple.server.login()
	elif id == ggzcoresimple.SERVER_LOGGED_IN:
		print "- logged in"
	elif id == ggzcoresimple.SERVER_ROOM_LIST:
		print "- room list"
		global_roomlist = data[1]
	elif id == ggzcoresimple.SERVER_ENTERED:
		print "- entered"
		print "## launching table now ##"
		(room, pair) = global_room_data
		print "## pair is", pair
		ggzcoresimple.room.launchtrex("t-rex autolaunched table", pair[0], pair[1])
		print "## done with launch ##"
		global_room_data = None
	elif id == ggzcoresimple.SERVER_ENTER_FAIL:
		print "- entering failed"
		global_abort = True
	elif id == ggzcoresimple.SERVER_LOGIN_FAIL:
		print "- login failed"
		global_abort = True
	elif id == ggzcoresimple.SERVER_STATE_CHANGE:
		state = ggzcoresimple.server.get_state()
		if state == ggzcoresimple.STATE_OFFLINE:
			serverstate = "offline"
		elif state == ggzcoresimple.STATE_CONNECTING:
			serverstate = "connecting"
		elif state == ggzcoresimple.STATE_ONLINE:
			serverstate = "online"
		elif state == ggzcoresimple.STATE_LOGGING_IN:
			serverstate = "logging in"
		elif state == ggzcoresimple.STATE_LOGGED_IN:
			serverstate = "logged in"
		elif state == ggzcoresimple.STATE_ENTERING_ROOM:
			serverstate = "entering room"
		elif state == ggzcoresimple.STATE_BETWEEN_ROOMS:
			serverstate = "between rooms"
		elif state == ggzcoresimple.STATE_IN_ROOM:
			serverstate = "in room"
		elif state == ggzcoresimple.STATE_LAUNCHING_TABLE:
			serverstate = "launching table"
		elif state == ggzcoresimple.STATE_JOINING_TABLE:
			serverstate = "joining table"
		elif state == ggzcoresimple.STATE_AT_TABLE:
			serverstate = "at table"
		elif state == ggzcoresimple.STATE_LEAVING_TABLE:
			serverstate = "leaving table"
		elif state == ggzcoresimple.STATE_LOGGING_OUT:
			serverstate = "logging out"
		else:
			serverstate = "(unknown)"
		print "- state changed: " + serverstate

def ggz_progress(uri):
	global global_room_data
	global global_abort
	global global_tournamenttables
	global global_tournamenttablelist
	global global_roomlist

	ggzcoresimple.setHandler(ggzcoresimple.EVENT_SERVER, ggz_server_event)
	ggzcoresimple.setHandler(ggzcoresimple.EVENT_ROOM, ggz_room_event)
	ggzcoresimple.setHandler(ggzcoresimple.EVENT_GAME, ggz_game_event)

	ggzcoresimple.server.set_hostinfo(uri.host, uri.port, ggzcoresimple.CONNECTION_SECURE_OPTIONAL)
	if uri.password:
		ggzcoresimple.server.set_logininfo(ggzcoresimple.LOGIN, uri.username, uri.password)
	else:
		ggzcoresimple.server.set_logininfo(ggzcoresimple.LOGIN_GUEST, uri.username, "")

	global_room_data = None

	ggzcoresimple.server.connect()

	global_tournamenttablelist = []
	for room in global_tournamenttables.keys():
		for pair in global_tournamenttables[room]:
			print room, pair, "*****"
			global_tournamenttablelist.append((room, pair))

	while not global_abort:
		if not global_room_data:
			if global_roomlist:
				state = ggzcoresimple.server.get_state()
				if state == ggzcoresimple.STATE_IN_ROOM or state == ggzcoresimple.STATE_LOGGED_IN:
					if len(global_tournamenttablelist) > 0:
						global_room_data = global_tournamenttablelist.pop()
						join_room()
		ggzcoresimple.server.process()

	sys.exit(-1)

def played(cns, p1, p2):
	x = {}
	y = {}
	number = 0

	q1 = cns.query("SELECT match FROM matchplayers WHERE handle = '" + p1 + "'")
	for row in q1.dictresult():
		x[row["match"]] = row["match"]

	q2 = cns.query("SELECT match FROM matchplayers WHERE handle = '" + p2 + "'")
	for row in q2.dictresult():
		if x.has_key(row["match"]):
			y[number] = row["match"]
			number += 1

	for pair in y.keys():
		#print "//", pair
		match = y[pair]
		# FIXME: use correct date of match
		q = cns.query("SELECT id, winner FROM matches WHERE id = '" + str(match) + "' AND date > '0'")
		if len(q.dictresult()) == 1:
			winner = q.dictresult()[0]["winner"]
			#print "//", winner
			return winner

	return None

def main(cns):
	global global_tournamenttables
	
	global_tournamenttables = {}
	players = {}

	q = cns.query("SELECT name, room, id, game FROM tournaments")
	for row in q.dictresult():
		name = row["name"]
		room = row["room"]
		id = row["id"]
		game = row["game"]
		print "Tournament", name, "of game", game, "in", room

		qp = cns.query("SELECT name, number FROM tournamentplayers WHERE id = '" + str(id) + "'")
		for row in qp.dictresult():
			pname = row["name"]
			pnumber = row["number"]
			if not players.has_key(id):
				players[id] = {}
			players[id][pnumber] = pname
			#print "-", pname

		level = int(math.log(len(players[id])) / math.log(2))
		xnum = len(players[id]) / 2
		opoffset = 0
		op = 1
		winners = {}

		for l in range(level, 0, -1):
			if l == level:
				for p in range(0, len(players[id]), 2):
					p1 = players[id][p]
					p2 = players[id][p + 1]
					#print "** match **", p1, p2

					winner = played(cns, p1, p2)
					if winner:
						#print "*=====*", winner, "@", op
						winners[op] = winner
					else:
						# open table here
						print "[table]", p1, p2, "@", room
						if not global_tournamenttables.has_key(room):
							global_tournamenttables[room] = []
						global_tournamenttables[room].append((p1, p2))

					op += 1
			else:
				xnum = xnum / 2
				op1 = opoffset + 1
				op2 = opoffset + 2
				for p in range(xnum):
					#print "# winner of", op1, "<=>", op2

					if winners.has_key(op1) and winners.has_key(op2):
						p1 = winners[op1]
						p2 = winners[op2]
						winner = played(cns, p1, p2)
						if winner:
							#print "*^=^=^*", winner, "@", op
							winners[op] = winner
						else:
							# open table here
							print "[table]", p1, p2, "@", room
							if not global_tournamenttables.has_key(room):
								global_tournamenttables[room] = []
							global_tournamenttables[room].append((p1, p2))
					else:
						# do not open table here
						pass

					op1 += 2
					op2 += 2
					opoffset += 2
					op += 1

	if len(global_tournamenttables.keys()) > 0:
		uri = commonuri.Uri("ggz://t-rex@localhost:5688/")
		ggz_progress(uri)

if __name__ == '__main__':
	if len(sys.argv) != 2:
		print "t-rex </path/to/ggzd.conf>"
		sys.exit(1)

	if sys.argv[1] == "--help":
		print "t-rex - the GGZ Gaming Zone tournament table manager"
		sys.exit(0)

	ini = ConfigParser.SafeConfigParser()
	files = ini.read(sys.argv[1])
	if len(files) == 0:
		print "Error: configuration file not found"
		sys.exit(1)

	if ini.has_section("General"):
		dbhost = ini.get("General", "DatabaseHost")
		dbport = ini.get("General", "DatabasePort")
		dbname = ini.get("General", "DatabaseName")
		dbuser = ini.get("General", "DatabaseUsername")
		dbpass = ini.get("General", "DatabasePassword")
		dbtype = ini.get("General", "DatabaseType")

	if dbtype != "pgsql":
		print "Error: currently works for pgsql databases only"
		sys.exit(1)

	cns = pg.DB(host=dbhost, port=int(dbport), dbname=dbname, user=dbuser, passwd=dbpass)

	main(cns)

