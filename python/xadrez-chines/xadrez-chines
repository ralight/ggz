#!/usr/bin/env python
# Copyright (C) 2004 Josef Spillner <josef@ggzgamingzone.org>
# Published under GNU GPL conditions

import pygame
import pygame.image
from pygame.locals import *
from Numeric import *
import socket
import sys
import time
import random
import os, pwd

class Proto:
	def __init__(self):
		self.move_invalid = 101
		self.move_ok = 102

def ai(x):
	pass

def validate(oldx, oldy, x, y):
	global field
	global proto

	ret = proto.move_invalid

	oldfigure = ""
	oldcolor = ""
	if field[oldx][oldy] is not "":
		if field[oldx][oldy].count(":") == 2:
			(oldfigure, oldcolor, oldoptions) = field[oldx][oldy].split(":")
		elif field[oldx][oldy].count(":") == 1:
			(oldfigure, oldcolor) = field[oldx][oldy].split(":")
			oldoptions = ""
	print "go with", oldfigure, "of color", oldcolor, "and options", oldoptions
	figure = ""
	color = ""
	if field[x][y] is not "":
		if field[x][y].count(":") == 2:
			(figure, color, options) = field[x][y].split(":")
		elif field[x][y].count(":") == 1:
			(figure, color) = field[x][y].split(":")
			options = ""
	print "to", figure, "of color", color

	if oldfigure == "":
		return proto.move_invalid
	if oldcolor == color:
		return proto.move_invalid

	rivercross = 0
	if oldy < 5 and y >= 5:
		rivercross = 1
	if oldy >= 5 and y < 5:
		rivercross = 1

	insidecastle = 0
	if (x >= 3 and x <= 5) and (oldx >= 3 and oldx <= 5):
		if (oldy >= 7 and oldy <= 9) and (oldy >= 7 and oldy <= 9):
				insidecastle = 1
		if (oldy >= 0 and oldy <= 2) and (oldy >= 0 and oldy <= 2):
				insidecastle = 1

	print "try with rivercross", rivercross, "and insidecastle", insidecastle
	print "figure", oldfigure, "oldx/y", oldx, oldy, "x/y", x, y

	if oldfigure == "pawn":
		if rivercross:
			# XXX: promote
			field[oldx][oldy] = oldfigure + ":" + oldcolor + ":" + oldoptions + ",promoted"
		if oldcolor == "white":
			if x == oldx and y == oldy + 1:
				ret = proto.move_ok
		if oldcolor == "black":
			if x == oldx and y == oldy - 1:
				ret = proto.move_ok
		if "promoted" in oldoptions:
			if y == oldy and x == oldx - 1:
				ret = proto.move_ok
			if y == oldy and x == oldx + 1:
				ret = proto.move_ok

	if oldfigure == "knight":
		# XXX can be blocked!
		if abs(oldy - y) == 2 and abs(oldx - x) == 1:
			ret = proto.move_ok
		if abs(oldy - y) == 1 and abs(oldx - x) == 2:
			ret = proto.move_ok

	if oldfigure == "bishop":
		# XXX: can be blocked!
		if not rivercross:
			if abs(oldx - x) == 2 and abs(oldy - y) == 2:
				ret = proto.move_ok

	if oldfigure == "bodyguard":
		if insidecastle:
			if abs(oldy - y) == 1 and abs(oldx - x) == 1:
				ret = proto.move_ok

	if oldfigure == "cannon":
		# XXX: jumps!
		if oldx == x or oldy == y:
			ret = proto.move_ok

	if oldfigure == "rock":
		# XXX: can be blocked!
		if oldx == x or oldy == y:
			ret = proto.move_ok

	if oldfigure == "king":
		if insidecastle:
			if abs(oldx - x) == 1 and y == oldy:
				ret = proto.move_ok
			if abs(oldy - y) == 1 and x == oldx:
				ret = proto.move_ok

	return ret

def main():
	global net
	global madeturn
	global surface
	global winner
	global proto

	global field

	proto = Proto()

	""" Pygame setup """

	pygame.init()
	pygame.display.set_caption("Xadrez Chines/SDL")

	screen = pygame.display.set_mode((800, 600), DOUBLEBUF)

	pygame.mouse.set_visible(0)

	surface = pygame.Surface((800, 600))

	""" Game board background """

	for i in range(0, 300):
		x = sin(i / 15.0) * 20
		surface.fill((0, abs(i - 150), 150 - abs(150 - i)), ((10, i * 2), (560 + x, 1)))

	""" Menu """

	for i in range(0, 600):
		x = sin(i / 30.0) * 20
		surface.fill((65, 140, 100), ((560 + x + 10, i), (2, 1)))
		surface.fill((95, 160, 100), ((560 + x + 12, i), (2, 1)))
		surface.fill((125, 180, 100), ((560 + x + 14, i), (2, 1)))
		surface.fill((155, 200, 100), ((560 + x + 16, i), (799 - (560 + x + 16) - 10, 1)))

		surface.fill((65, 140, 100), ((0, i), (10, 1)))
		surface.fill((65, 140, 100), ((788, i), (10, 1)))

	""" Menu captions """

	font = pygame.font.Font(None, 44)
	xadrez = font.render("XADREZ", 1, (165, 140, 0))
	chines = font.render("CHINES", 1, (165, 140, 0))
	sdl = font.render("SDL", 1, (165, 140, 0))
	font2 = pygame.font.Font(None, 70)
	slash = font2.render("/", 1, (165, 140, 0))

	surface.blit(xadrez, (580, 90))
	surface.blit(chines, (580, 120))
	surface.blit(sdl, (710, 150))
	surface.blit(slash, (700, 125))

	#playernames(surface, username(), "opponent")

	""" Game stones """

	img = {}
	img['pawn:white'] = pygame.image.load("pawn.png")
	img['bodyguard:white'] = pygame.image.load("bodyguard.png")
	img['bishop:white'] = pygame.image.load("bishop.png")
	img['knight:white'] = pygame.image.load("knight.png")
	img['cannon:white'] = pygame.image.load("cannon.png")
	img['rock:white'] = pygame.image.load("rock.png")
	img['king:white'] = pygame.image.load("king.png")

	alphapix = img['pawn:white']

	for pix in img.keys():
		(name, white) = pix.split(":")

		img[name + ':' + 'black'] = pygame.Surface((32, 32), 0, alphapix)
		for j in range(0, 32):
			for i in range(0, 32):
				(red, green, blue, alpha) = img[name + ':' + 'white'].get_at((i, j))
				if alpha:
					red = 255 - red
					green = 255 - green
					blue = 255 - blue
					img[name + ':' + 'black'].set_at((i, j), (red, green, blue, alpha))

	""" Points on the game board """

	stone = pygame.Surface((16, 16), 0, alphapix)
	for j in range(0, 16):
		x = sin(j / 5.0) * 8
		stone.fill((255, 255, 255, 30), ((8 - x, j), (2 * x, 1)))

	startstone = pygame.Surface((24, 24), 0, alphapix)
	for j in range(0, 24):
		x = sin(j / 7.5) * 12
		startstone.fill((255, 255, 255, 30), ((12 - x, j), (2 * x, 1)))

	blob = pygame.Surface((32, 32), 0, alphapix)
	for j in range(0, 32):
		x = sin(j / 10.0) * 16
		blob.fill((255, 255, 255, 30), ((16 - x, j), (2 * x, 1)))
	blob.fill((255, 255, 255, 100), ((14, 14), (2, 2)))

	field = {}
	for i in range(10):
		field[i] = {}
		for j in range(11):
			field[i][j] = ''
	#field = zeros([9, 10], "")

	for i in range(0, 5):
		field[i * 2][3] = 'pawn:white'
		field[i * 2][6] = 'pawn:black'

	field[1][2] = 'cannon:white'
	field[7][2] = 'cannon:white'
	field[1][7] = 'cannon:black'
	field[7][7] = 'cannon:black'

	field[0][0] = 'rock:white'
	field[1][0] = 'knight:white'
	field[2][0] = 'bishop:white'
	field[3][0] = 'bodyguard:white'
	field[4][0] = 'king:white:foo'
	field[5][0] = 'bodyguard:white'
	field[6][0] = 'bishop:white'
	field[7][0] = 'knight:white'
	field[8][0] = 'rock:white'

	field[0][9] = 'rock:black'
	field[1][9] = 'knight:black'
	field[2][9] = 'bishop:black'
	field[3][9] = 'bodyguard:black'
	field[4][9] = 'king:black'
	field[5][9] = 'bodyguard:black'
	field[6][9] = 'bishop:black'
	field[7][9] = 'knight:black'
	field[8][9] = 'rock:black'
	
	for j in range(0, 11):
		if j is not 5:
			for i in range(0, 9):
				surface.blit(stone, (i * 55 + 40, j * 55 + 20))

	for j in (0, 10):
		for i in range(0, 9):
			surface.blit(startstone, (i * 55 + 40 - 4, j * 55 + 20 - 4))

	for j in (3, 7):
		for i in range(0, 5):
			surface.blit(startstone, (i * 2 * 55 + 40 - 4, j * 55 + 20 - 4))

	for j in (2, 8):
		for i in range(0, 2):
			surface.blit(startstone, (i * 6 * 55 + 55 + 40 - 4, j * 55 + 20 - 4))

	""" Frame around points """

	vline = pygame.Surface((8, 215))
	vline.fill((255, 255, 255))
	vline.set_alpha(15, RLEACCEL)

	hline = pygame.Surface((445, 8))
	hline.fill((255, 255, 255))
	hline.set_alpha(15, RLEACCEL)

	shline = pygame.Surface((125, 8))
	shline.fill((255, 255, 255))
	shline.set_alpha(15, RLEACCEL)

	svline = pygame.Surface((8, 115))
	svline.fill((255, 255, 255))
	svline.set_alpha(15, RLEACCEL)

	surface.blit(vline, (43, 28))
	surface.blit(vline, (483, 28))

	surface.blit(vline, (43, 360))
	surface.blit(vline, (483, 360))

	surface.blit(hline, (40, 25))
	surface.blit(hline, (40, 573))

	surface.blit(hline, (40, 245))
	surface.blit(hline, (40, 355))

	surface.blit(shline, (205, 135))
	surface.blit(shline, (205, 465))
	surface.blit(shline, (205, 80))
	surface.blit(shline, (205, 520))

	surface.blit(svline, (206, 28))
	surface.blit(svline, (261, 28))
	surface.blit(svline, (316, 28))
	surface.blit(svline, (206, 467))
	surface.blit(svline, (261, 467))
	surface.blit(svline, (316, 467))

	""" Main loop """

	madeturn = 0
	againturn = 0
	aierror = 0
	humanerror = 0
	gameover = 0
	winner = 0
	message = ""

	mouse = blob
	pressed = 0

	lastpos = (-1, -1)

	pygame.event.clear()

	while 1:
		pygame.event.pump()

		keyinput = pygame.key.get_pressed()

		if keyinput[K_ESCAPE] or pygame.event.peek(QUIT):
			break

		(b1, b2, b3) = pygame.mouse.get_pressed()
		if b1 and not pressed and not madeturn:
			(x, y) = pygame.mouse.get_pos()
			x = (x - 40 + 16) / 55
			y = (y - 20 + 16) / 55
			if y > 5:
				y = y - 1
			if x >= 0 and x < 9 and y >= 0 and y < 11:
				figure = ""
				color = ""
				options = ""
				if field[x][y] is not "":
					if field[x][y].count(":") == 1:
						(figure, color) = field[x][y].split(":")
					elif field[x][y].count(":") == 2:
						(figure, color, options) = field[x][y].split(":")
				print "got", figure, "of color", color
				(oldx, oldy) = lastpos
				print "lastpos:", oldx, oldy
				if oldx >= 0 and oldy >= 0:
					val = validate(oldx, oldy, x, y)
					if val is not proto.move_invalid:
						tmp = field[oldx][oldy]
						field[oldx][oldy] = ""
						field[x][y] = tmp
						madeturn = 1
						humanerror = 0
					else:
						humanerror = 1
					lastpos = (-1, -1)
				else:
					if figure is not "":
						message = "Where to move to?"
						lastpos = (x, y)
			pressed = 1

		if not b1 and pressed:
			pressed = 0

		screen.blit(surface, (0, 0))

		#(x, y, player) = blobpos
		#(x, y) = (0, 0)
		#screen.blit(blob, (x * 55 + 40 - 8, y * 55 + 20 - 8))

		river = 0
		for y in range(0, 11):
			if y == 5:
				river = 1
			for x in range(0, 9):
				if field[x][y] is not "":
					index = field[x][y]
					if index.count(":") == 2:
						tmp = index.split(":")
						index = tmp[0] + ":" + tmp[1]
					screen.blit(img[index], (x * 55 + 40 - 8, (y + river) * 55 + 20 - 8))

		(x, y) = pygame.mouse.get_pos()
		screen.blit(mouse, (x - 16, y - 16))

		if (y == 0 and x == 4) or (y == 10 and x == 4):
			if y == 0:
				winner = 2
			else:
				winner = 1

		if winner:
			font4 = pygame.font.Font(None, 24)
			if winner == 2:
				waiting = font4.render("Game over, you lost", 1, (165, 140, 0))
			else:
				waiting = font4.render("Game over, you won", 1, (165, 140, 0))
			screen.blit(waiting, (770 - waiting.get_width(), 400))
			gameover = 1
			madeturn = 1

		if madeturn and not gameover:
			font4 = pygame.font.Font(None, 24)
			if aierror:
				waiting = font4.render("AI error, game over", 1, (165, 140, 0))
			else:
				waiting = font4.render("Waiting for opponent", 1, (165, 140, 0))
			screen.blit(waiting, (770 - waiting.get_width(), 400))

		if humanerror:
			font4 = pygame.font.Font(None, 24)
			waiting = font4.render("Not allowed, try again", 1, (165, 140, 0))
			screen.blit(waiting, (770 - waiting.get_width(), 400))

		elif message:
			font4 = pygame.font.Font(None, 24)
			waiting = font4.render(message, 1, (165, 140, 0))
			screen.blit(waiting, (770 - waiting.get_width(), 400))

		pygame.display.flip()

		if madeturn and not aierror and not gameover:
			madeturn = 0
			message = ""
			#else:
			#	aierror = 1

if __name__ == "__main__":
	main()

