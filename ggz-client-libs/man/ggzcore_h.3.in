.TH "ggzcore.h" 3 "13 Sep 2001" "GGZ Client Libs (GGZmod and GGZcore)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ggzcore.h \- The interface for the ggzcore library used by GGZ clients. 
.SH SYNOPSIS
.br
.PP
\fC#include <stdarg.h>\fR
.br
\fC#include <poll.h>\fR
.br
.SS Data Structures

.in +1c
.ti -1c
.RI "struct \fB_GGZOptions\fR"
.br
.in -1c
.SS Defines

.in +1c
.ti -1c
.RI "#define \fBggzcore_malloc\fR(x)	"
.br
.ti -1c
.RI "#define \fBggzcore_realloc\fR(x, y)	"
.br
.ti -1c
.RI "#define \fBggzcore_free\fR(x)		"
.br
.ti -1c
.RI "#define \fBggzcore_strdup\fR(x)	"
.br
.ti -1c
.RI "#define \fBGGZ_CONFIO_RDONLY\fR  ((unsigned char) 0x01)"
.br
.ti -1c
.RI "#define \fBGGZ_CONFIO_RDWR\fR  ((unsigned char) 0x02)"
.br
.ti -1c
.RI "#define \fBGGZ_CONFIO_CREATE\fR  ((unsigned char) 0x04)"
.br
.in -1c
.SS Typedefs

.in +1c
.ti -1c
.RI "typedef struct \fB_GGZOptions\fR  \fBGGZOptions\fR"
.br
.ti -1c
.RI "typedef \fBGGZHookReturn\fR (* \fBGGZHookFunc\fR )(unsigned int id, void *event_data, void *user_data)"
.br
.ti -1c
.RI "typedef void (* \fBGGZDestroyFunc\fR )(void *data)"
.br
.ti -1c
.RI "typedef struct _GGZNet \fBGGZNet\fR"
.br
.ti -1c
.RI "typedef struct _GGZServer \fBGGZServer\fR"
.br
.ti -1c
.RI "typedef struct _GGZRoom \fBGGZRoom\fR"
.br
.ti -1c
.RI "typedef struct _GGZPlayer \fBGGZPlayer\fR"
.br
.ti -1c
.RI "typedef struct _GGZTable \fBGGZTable\fR"
.br
.ti -1c
.RI "typedef struct _GGZGameType \fBGGZGameType\fR"
.br
.ti -1c
.RI "typedef struct _GGZModule \fBGGZModule\fR"
.br
.ti -1c
.RI "typedef struct _GGZGame \fBGGZGame\fR"
.br
.in -1c
.SS Enumerations

.in +1c
.ti -1c
.RI "enum \fBGGZOptionFlags\fR { \fBGGZ_OPT_PARSER\fR =  0x0001, \fBGGZ_OPT_MODULES\fR =  0x0002, \fBGGZ_OPT_THREADED_IO\fR =  0x0004     }"
.br
.ti -1c
.RI "enum \fBGGZDebugLevel\fR { \fBGGZ_DBG_EVENT\fR =  0x00000001, \fBGGZ_DBG_NET\fR =  0x00000002, \fBGGZ_DBG_USER\fR =  0x00000004, \fBGGZ_DBG_SERVER\fR =  0x00000008, \fBGGZ_DBG_CONF\fR =  0x00000010, \fBGGZ_DBG_POLL\fR =  0x00000020, \fBGGZ_DBG_STATE\fR =  0x00000040, \fBGGZ_DBG_PLAYER\fR =  0x00000080, \fBGGZ_DBG_ROOM\fR =  0x00000100, \fBGGZ_DBG_TABLE\fR =  0x00000200, \fBGGZ_DBG_GAMETYPE\fR =  0x00000400, \fBGGZ_DBG_HOOK\fR =  0x00000800, \fBGGZ_DBG_INIT\fR =  0x00001000, \fBGGZ_DBG_MEMORY\fR =  0x00002000, \fBGGZ_DBG_MEMDETAIL\fR =  0x00004000, \fBGGZ_DBG_MODULE\fR =  0x00008000, \fBGGZ_DBG_GAME\fR =  0x00010000, \fBGGZ_DBG_XML\fR =  0x00020000, \fBGGZ_DBG_ALL\fR =  0xFFFFFFFF }"
.br
.ti -1c
.RI "enum \fBGGZHookReturn\fR { \fBGGZ_HOOK_OK\fR, \fBGGZ_HOOK_REMOVE\fR, \fBGGZ_HOOK_ERROR\fR, \fBGGZ_HOOK_CRISIS\fR }"
.br
.ti -1c
.RI "enum \fBGGZLoginType\fR { \fBGGZ_LOGIN\fR, \fBGGZ_LOGIN_GUEST\fR, \fBGGZ_LOGIN_NEW\fR }"
.br
.ti -1c
.RI "enum \fBGGZSeatType\fR { \fBGGZ_SEAT_OPEN\fR =  -1, \fBGGZ_SEAT_BOT\fR =  -2, \fBGGZ_SEAT_RESERVED\fR =  -3, \fBGGZ_SEAT_NONE\fR =  -4, \fBGGZ_SEAT_PLAYER\fR =  -5 }"
.br
.ti -1c
.RI "enum \fBGGZServerEvent\fR { \fBGGZ_CONNECTED\fR, \fBGGZ_CONNECT_FAIL\fR, \fBGGZ_NEGOTIATED\fR, \fBGGZ_NEGOTIATE_FAIL\fR, \fBGGZ_LOGGED_IN\fR, \fBGGZ_LOGIN_FAIL\fR, \fBGGZ_MOTD_LOADED\fR, \fBGGZ_ROOM_LIST\fR, \fBGGZ_TYPE_LIST\fR, \fBGGZ_ENTERED\fR, \fBGGZ_ENTER_FAIL\fR, \fBGGZ_LOGOUT\fR, \fBGGZ_NET_ERROR\fR, \fBGGZ_PROTOCOL_ERROR\fR, \fBGGZ_CHAT_FAIL\fR, \fBGGZ_STATE_CHANGE\fR }"
.br
.ti -1c
.RI "enum \fBGGZRoomEvent\fR { \fBGGZ_PLAYER_LIST\fR, \fBGGZ_TABLE_LIST\fR, \fBGGZ_CHAT\fR, \fBGGZ_ANNOUNCE\fR, \fBGGZ_PRVMSG\fR, \fBGGZ_BEEP\fR, \fBGGZ_ROOM_ENTER\fR, \fBGGZ_ROOM_LEAVE\fR, \fBGGZ_TABLE_UPDATE\fR, \fBGGZ_TABLE_LAUNCHED\fR, \fBGGZ_TABLE_LAUNCH_FAIL\fR, \fBGGZ_TABLE_JOINED\fR, \fBGGZ_TABLE_JOIN_FAIL\fR, \fBGGZ_TABLE_LEFT\fR, \fBGGZ_TABLE_LEAVE_FAIL\fR, \fBGGZ_TABLE_DATA\fR }"
.br
.ti -1c
.RI "enum \fBGGZGameEvent\fR { \fBGGZ_GAME_LAUNCHED\fR, \fBGGZ_GAME_LAUNCH_FAIL\fR, \fBGGZ_GAME_NEGOTIATED\fR, \fBGGZ_GAME_NEGOTIATE_FAIL\fR, \fBGGZ_GAME_DATA\fR, \fBGGZ_GAME_OVER\fR, \fBGGZ_GAME_IO_ERROR\fR, \fBGGZ_GAME_PROTO_ERROR\fR }"
.br
.ti -1c
.RI "enum \fBGGZStateID\fR { \fBGGZ_STATE_OFFLINE\fR, \fBGGZ_STATE_CONNECTING\fR, \fBGGZ_STATE_ONLINE\fR, \fBGGZ_STATE_LOGGING_IN\fR, \fBGGZ_STATE_LOGGED_IN\fR, \fBGGZ_STATE_ENTERING_ROOM\fR, \fBGGZ_STATE_IN_ROOM\fR, \fBGGZ_STATE_BETWEEN_ROOMS\fR, \fBGGZ_STATE_LAUNCHING_TABLE\fR, \fBGGZ_STATE_JOINING_TABLE\fR, \fBGGZ_STATE_AT_TABLE\fR, \fBGGZ_STATE_LEAVING_TABLE\fR, \fBGGZ_STATE_LOGGING_OUT\fR }"
.br
.ti -1c
.RI "enum \fBGGZChatOp\fR { \fBGGZ_CHAT_NORMAL\fR =  	0x40, \fBGGZ_CHAT_ANNOUNCE\fR = 	0x60, \fBGGZ_CHAT_BEEP\fR =  	0x80, \fBGGZ_CHAT_PERSONAL\fR = 	0xC0 }"
.br
.in -1c
.SS Functions

.in +1c
.ti -1c
.RI "void* \fB_ggzcore_malloc\fR (const unsigned int, char *, int)"
.br
.ti -1c
.RI "void* \fB_ggzcore_realloc\fR (const void *, const unsigned int, char *, int)"
.br
.ti -1c
.RI "int \fB_ggzcore_free\fR (const void *, char *, int)"
.br
.ti -1c
.RI "char* \fB_ggzcore_strdup\fR (const char *, char *, int)"
.br
.ti -1c
.RI "int \fBggzcore_init\fR (\fBGGZOptions\fR options)"
.br
.ti -1c
.RI "void \fBggzcore_destroy\fR (void)"
.br
.ti -1c
.RI "GGZServer* \fBggzcore_server_new\fR (void)"
.br
.ti -1c
.RI "int \fBggzcore_server_reset\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_add_event_hook\fR (GGZServer *server, const GGZServerEvent event, const \fBGGZHookFunc\fR func)"
.br
.ti -1c
.RI "int \fBggzcore_server_add_event_hook_full\fR (GGZServer *server, const GGZServerEvent event, const \fBGGZHookFunc\fR func, void *data)"
.br
.ti -1c
.RI "int \fBggzcore_server_remove_event_hook\fR (GGZServer *server, const GGZServerEvent event, const \fBGGZHookFunc\fR func)"
.br
.ti -1c
.RI "int \fBggzcore_server_remove_event_hook_id\fR (GGZServer *server, const GGZServerEvent event, const unsigned int hook_id)"
.br
.ti -1c
.RI "int \fBggzcore_server_set_hostinfo\fR (GGZServer *server, const char *host, const unsigned int port)"
.br
.ti -1c
.RI "int \fBggzcore_server_set_logininfo\fR (GGZServer *server, const GGZLoginType type, const char *handle, const char *password)"
.br
.ti -1c
.RI "int \fBggzcore_server_log_session\fR (GGZServer *server, const char *filename)"
.br
.ti -1c
.RI "char* \fBggzcore_server_get_host\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_get_port\fR (GGZServer *server)"
.br
.ti -1c
.RI "GGZLoginType \fBggzcore_server_get_type\fR (GGZServer *server)"
.br
.ti -1c
.RI "char* \fBggzcore_server_get_handle\fR (GGZServer *server)"
.br
.ti -1c
.RI "char* \fBggzcore_server_get_password\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_get_fd\fR (GGZServer *server)"
.br
.ti -1c
.RI "GGZStateID \fBggzcore_server_get_state\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_get_num_rooms\fR (GGZServer *server)"
.br
.ti -1c
.RI "GGZRoom* \fBggzcore_server_get_cur_room\fR (GGZServer *server)"
.br
.ti -1c
.RI "GGZRoom* \fBggzcore_server_get_nth_room\fR (GGZServer *server, const unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_server_get_num_gametypes\fR (GGZServer *server)"
.br
.ti -1c
.RI "GGZGameType* \fBggzcore_server_get_nth_gametype\fR (GGZServer *server, const unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_server_is_online\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_is_logged_in\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_is_in_room\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_is_at_table\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_connect\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_login\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_motd\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_list_rooms\fR (GGZServer *server, const int type, const char verbose)"
.br
.ti -1c
.RI "int \fBggzcore_server_list_gametypes\fR (GGZServer *server, const char verbose)"
.br
.ti -1c
.RI "int \fBggzcore_server_join_room\fR (GGZServer *server, const unsigned int room)"
.br
.ti -1c
.RI "int \fBggzcore_server_logout\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_data_is_pending\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_read_data\fR (GGZServer *server)"
.br
.ti -1c
.RI "int \fBggzcore_server_write_data\fR (GGZServer *server)"
.br
.ti -1c
.RI "void \fBggzcore_server_free\fR (GGZServer *server)"
.br
.ti -1c
.RI "GGZRoom* \fBggzcore_room_new\fR (void)"
.br
.ti -1c
.RI "int \fBggzcore_room_init\fR (GGZRoom *room, const GGZServer *server, const unsigned int id, const char *name, const unsigned int game, const char *desc)"
.br
.ti -1c
.RI "void \fBggzcore_room_free\fR (GGZRoom *room)"
.br
.ti -1c
.RI "char* \fBggzcore_room_get_name\fR (GGZRoom *room)"
.br
.ti -1c
.RI "char* \fBggzcore_room_get_desc\fR (GGZRoom *room)"
.br
.ti -1c
.RI "GGZGameType* \fBggzcore_room_get_gametype\fR (GGZRoom *room)"
.br
.ti -1c
.RI "int \fBggzcore_room_get_num_players\fR (GGZRoom *room)"
.br
.ti -1c
.RI "GGZPlayer* \fBggzcore_room_get_nth_player\fR (GGZRoom *room, const unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_room_get_num_tables\fR (GGZRoom *room)"
.br
.ti -1c
.RI "GGZTable* \fBggzcore_room_get_nth_table\fR (GGZRoom *room, const unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_room_add_event_hook\fR (GGZRoom *room, const GGZRoomEvent event, const \fBGGZHookFunc\fR func)"
.br
.ti -1c
.RI "int \fBggzcore_room_add_event_hook_full\fR (GGZRoom *room, const GGZRoomEvent event, const \fBGGZHookFunc\fR func, void *data)"
.br
.ti -1c
.RI "int \fBggzcore_room_remove_event_hook\fR (GGZRoom *room, const GGZRoomEvent event, const \fBGGZHookFunc\fR func)"
.br
.ti -1c
.RI "int \fBggzcore_room_remove_event_hook_id\fR (GGZRoom *room, const GGZRoomEvent event, const unsigned int hook_id)"
.br
.ti -1c
.RI "int \fBggzcore_room_list_players\fR (GGZRoom *room)"
.br
.ti -1c
.RI "int \fBggzcore_room_list_tables\fR (GGZRoom *room, const int type, const char global)"
.br
.ti -1c
.RI "int \fBggzcore_room_chat\fR (GGZRoom *room, const \fBGGZChatOp\fR opcode, const char *player, const char *msg)"
.br
.ti -1c
.RI "int \fBggzcore_room_launch_table\fR (GGZRoom *room, GGZTable *table)"
.br
.ti -1c
.RI "int \fBggzcore_room_join_table\fR (GGZRoom *room, const unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_room_leave_table\fR (GGZRoom *room)"
.br
.ti -1c
.RI "int \fBggzcore_room_send_game_data\fR (GGZRoom *room, char *buffer)"
.br
.ti -1c
.RI "char* \fBggzcore_player_get_name\fR (GGZPlayer *player)"
.br
.ti -1c
.RI "GGZTable* \fBggzcore_player_get_table\fR (GGZPlayer *player)"
.br
.ti -1c
.RI "GGZTable* \fBggzcore_table_new\fR (void)"
.br
.ti -1c
.RI "int \fBggzcore_table_init\fR (GGZTable *table, GGZGameType *gametype, char *desc, const unsigned int num_seats)"
.br
.ti -1c
.RI "void \fBggzcore_table_free\fR (GGZTable *table)"
.br
.ti -1c
.RI "int \fBggzcore_table_add_player\fR (GGZTable *table, char *name, const unsigned int seat)"
.br
.ti -1c
.RI "int \fBggzcore_table_add_bot\fR (GGZTable *table, char *name, const unsigned int seat)"
.br
.ti -1c
.RI "int \fBggzcore_table_add_reserved\fR (GGZTable *table, char *name, const unsigned int seat)"
.br
.ti -1c
.RI "int \fBggzcore_table_remove_player\fR (GGZTable *table, char *name)"
.br
.ti -1c
.RI "int \fBggzcore_table_get_id\fR (GGZTable *table)"
.br
.ti -1c
.RI "GGZGameType* \fBggzcore_table_get_type\fR (GGZTable *table)"
.br
.ti -1c
.RI "char* \fBggzcore_table_get_desc\fR (GGZTable *table)"
.br
.ti -1c
.RI "char \fBggzcore_table_get_state\fR (GGZTable *table)"
.br
.ti -1c
.RI "int \fBggzcore_table_get_num_seats\fR (GGZTable *table)"
.br
.ti -1c
.RI "int \fBggzcore_table_get_num_open\fR (GGZTable *table)"
.br
.ti -1c
.RI "int \fBggzcore_table_get_num_bots\fR (GGZTable *table)"
.br
.ti -1c
.RI "char* \fBggzcore_table_get_nth_player_name\fR (GGZTable *table, const unsigned int num)"
.br
.ti -1c
.RI "GGZSeatType \fBggzcore_table_get_nth_player_type\fR (GGZTable *table, const unsigned int num)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_name\fR (GGZGameType *type)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_prot_engine\fR (GGZGameType *type)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_prot_version\fR (GGZGameType *type)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_version\fR (GGZGameType *type)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_author\fR (GGZGameType *type)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_url\fR (GGZGameType *type)"
.br
.ti -1c
.RI "char* \fBggzcore_gametype_get_desc\fR (GGZGameType *type)"
.br
.ti -1c
.RI "int \fBggzcore_gametype_get_max_players\fR (GGZGameType *type)"
.br
.ti -1c
.RI "int \fBggzcore_gametype_get_max_bots\fR (GGZGameType *type)"
.br
.ti -1c
.RI "int \fBggzcore_gametype_num_players_is_valid\fR (GGZGameType *type, unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_gametype_num_bots_is_valid\fR (GGZGameType *type, unsigned int num)"
.br
.ti -1c
.RI "void \fBggzcore_debug\fR (const \fBGGZDebugLevel\fR level, const char *fmt,...)"
.br
.ti -1c
.RI "void \fBggzcore_error_sys\fR (const char *fmt,...)"
.br
.ti -1c
.RI "void \fBggzcore_error_sys_exit\fR (const char *fmt,...)"
.br
.ti -1c
.RI "void \fBggzcore_error_msg\fR (const char *fmt,...)"
.br
.ti -1c
.RI "void \fBggzcore_error_msg_exit\fR (const char *fmt,...)"
.br
.ti -1c
.RI "int \fBggzcore_conf_initialize\fR (const char *g_path, const char *u_path)"
.br
.ti -1c
.RI "int \fBggzcore_conf_write_string\fR (const char *section, const char *key, const char *value)"
.br
.ti -1c
.RI "int \fBggzcore_conf_write_int\fR (const char *section, const char *key, int value)"
.br
.ti -1c
.RI "int \fBggzcore_conf_write_list\fR (const char *section, const char *key, int argc, char **argv)"
.br
.ti -1c
.RI "char* \fBggzcore_conf_read_string\fR (const char *section, const char *key, const char *def)"
.br
.ti -1c
.RI "int \fBggzcore_conf_read_int\fR (const char *section, const char *key, int def)"
.br
.ti -1c
.RI "int \fBggzcore_conf_read_list\fR (const char *section, const char *key, int *argcp, char ***argvp)"
.br
.ti -1c
.RI "int \fBggzcore_conf_remove_section\fR (const char *section)"
.br
.ti -1c
.RI "int \fBggzcore_conf_remove_key\fR (const char *section, const char *key)"
.br
.ti -1c
.RI "int \fBggzcore_conf_commit\fR (void)"
.br
.ti -1c
.RI "int \fBggzcore_confio_parse\fR (const char *path, const unsigned char options)"
.br
.ti -1c
.RI "void \fBggzcore_confio_close\fR (int handle)"
.br
.ti -1c
.RI "int \fBggzcore_confio_commit\fR (int handle)"
.br
.ti -1c
.RI "int \fBggzcore_confio_write_string\fR (int handle, const char *section, const char *key, const char *value)"
.br
.ti -1c
.RI "int \fBggzcore_confio_write_int\fR (int handle, const char *section, const char *key, int value)"
.br
.ti -1c
.RI "int \fBggzcore_confio_write_list\fR (int handle, const char *section, const char *key, int argc, char **argv)"
.br
.ti -1c
.RI "char* \fBggzcore_confio_read_string\fR (int handle, const char *section, const char *key, const char *def)"
.br
.ti -1c
.RI "int \fBggzcore_confio_read_int\fR (int handle, const char *section, const char *key, int def)"
.br
.ti -1c
.RI "int \fBggzcore_confio_read_list\fR (int handle, const char *section, const char *key, int *argcp, char ***argvp)"
.br
.ti -1c
.RI "int \fBggzcore_confio_remove_section\fR (int handle, const char *section)"
.br
.ti -1c
.RI "int \fBggzcore_confio_remove_key\fR (int handle, const char *section, const char *key)"
.br
.ti -1c
.RI "unsigned int \fBggzcore_module_get_num\fR (void)"
.br
.ti -1c
.RI "int \fBggzcore_module_add\fR (const char *name, const char *version, const char *prot_engine, const char *prot_version, const char *author, const char *frontend, const char *url, const char *exe_path, const char *icon_path, const char *help_path)"
.br
.ti -1c
.RI "int \fBggzcore_module_get_num_by_type\fR (const char *game, const char *engine, const char *version)"
.br
.ti -1c
.RI "GGZModule* \fBggzcore_module_get_nth_by_type\fR (const char *game, const char *engine, const char *version, const unsigned int num)"
.br
.ti -1c
.RI "int \fBggzcore_module_launch\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_game\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_version\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_prot_engine\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_prot_version\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_author\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_frontend\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_url\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_icon_path\fR (GGZModule *module)"
.br
.ti -1c
.RI "char* \fBggzcore_module_get_help_path\fR (GGZModule *module)"
.br
.ti -1c
.RI "char** \fBggzcore_module_get_argv\fR (GGZModule *module)"
.br
.ti -1c
.RI "GGZGame* \fBggzcore_game_new\fR (void)"
.br
.ti -1c
.RI "int \fBggzcore_game_init\fR (GGZGame *game, GGZModule *module)"
.br
.ti -1c
.RI "void \fBggzcore_game_free\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_add_event_hook\fR (GGZGame *game, const GGZGameEvent event, const \fBGGZHookFunc\fR func)"
.br
.ti -1c
.RI "int \fBggzcore_game_add_event_hook_full\fR (GGZGame *game, const GGZGameEvent event, const \fBGGZHookFunc\fR func, void *data)"
.br
.ti -1c
.RI "int \fBggzcore_game_remove_event_hook\fR (GGZGame *game, const GGZGameEvent event, const \fBGGZHookFunc\fR func)"
.br
.ti -1c
.RI "int \fBggzcore_game_remove_event_hook_id\fR (GGZGame *game, const GGZGameEvent event, const unsigned int hook_id)"
.br
.ti -1c
.RI "int \fBggzcore_game_data_is_pending\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_read_data\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_write_data\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_get_fd\fR (GGZGame *game)"
.br
.ti -1c
.RI "GGZModule* \fBggzcore_game_get_module\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_launch\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_join\fR (GGZGame *game)"
.br
.ti -1c
.RI "int \fBggzcore_game_send_data\fR (GGZGame *game, char *buffer)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
The interface for the ggzcore library used by GGZ clients.
.PP
.PP
.SH DEFINE DOCUMENTATION
.PP 
.SS #define ggzcore_free(x)
.PP
\fBValue:\fR
.PP
.nf
                         _ggzcore_free(x, __FUNCTION__ " in " \
                         __FILE__,  __LINE__)
.fi
.SS #define ggzcore_malloc(x)
.PP
\fBValue:\fR
.PP
.nf
                           _ggzcore_malloc(x, __FUNCTION__ " in " \
                           __FILE__, __LINE__)
.fi
.SS #define ggzcore_realloc(x, y)
.PP
\fBValue:\fR
.PP
.nf
                               _ggzcore_realloc(x, y, __FUNCTION__ " in " \
                               __FILE__, __LINE__)
.fi
.SS #define ggzcore_strdup(x)
.PP
\fBValue:\fR
.PP
.nf
                           _ggzcore_strdup(x, __FUNCTION__ " in " \
                           __FILE__, __LINE__)
.fi
.SH TYPEDEF DOCUMENTATION
.PP 
.SS typedef void(* GGZDestroyFunc)(void *data)
.PP
GGZ object destroy function type 
.SS typedef \fBGGZHookReturn\fR(* GGZHookFunc)(unsigned int id, void *event_data, void *user_data)
.PP
GGZ Event hook function type, used as a vallback for events 
.SS typedef struct \fB_GGZOptions\fR GGZOptions
.PP
Options structure for ggzcore library 
.SH ENUMERATION TYPE DOCUMENTATION
.PP 
.SS enum GGZChatOp
.PP
Chat subops 
.SS enum GGZDebugLevel
.PP
Debugging categories 
.SS enum GGZHookReturn
.PP
GGZ Hook function return types 
.SH FUNCTION DOCUMENTATION
.PP 
.SS int ggzcore_conf_commit (void)
.PP
\fBggzcore_conf_commit\fR() - Commits the core user config file to disk
.PP
@return: int : 0 if successful, -1 on error 
.SS int ggzcore_conf_read_int (const char * section, const char * key, int def)
.PP
\fBggzcore_conf_read_int\fR() - Read a integer from the configuration file(s)
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to get value from 
.TP
\fB\fIkey\fR\fR
key value was stored under 
.TP
\fB\fIdef\fR\fR
default value to return if none is found
.PP
\fBReturns: \fR
.in +1c
an integer from the configuration file OR the default value
.PP
\fBNote: \fR
.in +1c
There is no guaranteed way to find if the call failed. If you must know, call ggzcore_conf_read_string with a NULL default value and check for the NULL return. 
.SS int ggzcore_conf_read_list (const char * section, const char * key, int * argcp, char *** argvp)
.PP
\fBggzcore_conf_read_list\fR() - Read a list from the configuration file(s)
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to get value from 
.TP
\fB\fIkey\fR\fR
key value was stored under 
.TP
\fB\fIargcp\fR\fR
ptr to int which will receive the list entry count 
.TP
\fB\fIargvp\fR\fR
a pointer to a dynamically allocated array that \fBggzcore_conf_read_list\fR() will build
.PP
\fBReturns: \fR
.in +1c
int : 0 if successful, -1 on error 
.SS char * ggzcore_conf_read_string (const char * section, const char * key, const char * def)
.PP
\fBggzcore_conf_read_string\fR() - Read a string from the configuration file(s)
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to get value from 
.TP
\fB\fIkey\fR\fR
key value was stored under 
.TP
\fB\fIdef\fR\fR
default value to return if none is found
.PP
\fBReturns: \fR
.in +1c
a dynamically allocated string from the configuration file OR a dynamically allocated copy of the default string
.PP
\fBNote: \fR
.in +1c
The default may be set to NULL, in which case a NULL will be returned if the value could not be found in either configuration file. 
.SS int ggzcore_conf_remove_key (const char * section, const char * key)
.PP
\fBggzcore_conf_remove_key\fR() - Removes a key entry from the user config file
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to remove 
.TP
\fB\fIkey\fR\fR
key entry to remove
.PP
\fBReturns: \fR
.in +1c
int : 0 if success, -1 on error, 1 on soft error (section/key didn't exist) 
.SS int ggzcore_conf_remove_section (const char * section)
.PP
\fBggzcore_conf_remove_section\fR() - Removes a section from the user config file
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to remove
.PP
\fBReturns: \fR
.in +1c
int : 0 if successful, -1 on error, 1 on soft error (section did not exist) 
.SS int ggzcore_conf_write_int (const char * section, const char * key, int value)
.PP
\fBggzcore_conf_write_int\fR() - Write a integer to the user config file
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to store value in 
.TP
\fB\fIkey\fR\fR
key to store value under 
.TP
\fB\fIvalue\fR\fR
value to store
.PP
\fBReturns: \fR
.in +1c
int : 0 if successful, -1 on error 
.SS int ggzcore_conf_write_list (const char * section, const char * key, int argc, char ** argv)
.PP
\fBggzcore_conf_write_list\fR() - Write a list to the user config file
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to store value in 
.TP
\fB\fIkey\fR\fR
key to store value under 
.TP
\fB\fIargc\fR\fR
count of string arguments in list 
.TP
\fB\fIargv\fR\fR
array of NULL terminated strings
.PP
\fBReturns: \fR
.in +1c
int : 0 if successful, -1 on error 
.SS int ggzcore_conf_write_string (const char * section, const char * key, const char * value)
.PP
\fBggzcore_conf_write_string\fR() - Write a string to the user config file
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIsection\fR\fR
section to store value in 
.TP
\fB\fIkey\fR\fR
key to store value under 
.TP
\fB\fIvalue\fR\fR
value to store
.PP
\fBReturns: \fR
.in +1c
int : 0 if successful, -1 on error 
.SS void ggzcore_destroy (void)
.PP
\fBggzcore_destroy\fR() - Cleanup function for ggzcore lib. 
.SS int ggzcore_init (\fBGGZOptions\fR options)
.PP
\fBggzcore_init\fR() - Initializtion function for ggzcore lib.
.PP
\fBParameters: \fR
.in +1c
.TP
\fB\fIoptions\fR\fR
options structure
.PP
\fBReturns: \fR
.in +1c
int : 0 if successful, -1 on failure 
.SS void ggzcore_room_free (GGZRoom * room)
.PP
De-allocate room object and its children 
.SS int ggzcore_room_init (GGZRoom * room, const GGZServer * server, const unsigned int id, const char * name, const unsigned int game, const char * desc)
.PP
Initialize room object 
.SS GGZRoom * ggzcore_room_new (void)
.PP
Allocate space for a new room object 
.SS GGZServer * ggzcore_server_new (void)
.PP
Function for allocating and initializing new GGZServer object 
.SH AUTHOR
.PP 
Generated automatically by Doxygen for GGZ Client Libs (GGZmod and GGZcore) from the source code.