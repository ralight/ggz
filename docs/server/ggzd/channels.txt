Connection channels between GGZ components
==========================================

Description
-----------

As a network-centric project, GGZ often pushes current standard system network
facilities to their limits. One such example is the use of channels between
the GGZ server, core client, game server and game client.
Here's the sketch of the overall network layout again:

       [GGZ server] <===== TCP/XML ====> [GGZ core client]
            |                                  |
TCP/binary  |                                  | TCP/binary
            |                                  |
       [game server] <==== TCP/any ======> [game client]

The main connection between the GGZ server and the core client is established
using normal bind() and connect() operations on sockets.

The binary connections between the GGZ components and the game components are
created as a socketpair() before forking off the game components. The game
components are informed about their side of the pair, i.e. the file descriptor
to the GGZ components, through the variable GGZSOCKET, in addition to GGZMODE
which tells them that they run in GGZ mode at all.
On platforms where socketpair() is not available, i.e. win32, GGZPORT will
instead tell the game components where to connect to on localhost to establish
the control connection.

Finally, the connection between game server and game client is created as a
new session on the main GGZ connection, and then each end is handed over to
the game components through ggz_write_fd() and ggz_read_fd(). The already open
file descriptors must then be used for communication with the peers, either
directly or by using wrapper functions and classes.

Programming language issues
---------------------------

In C and pure C++, it works like described above, implemented by the ggz(d)mod
and ggzdmod++ libraries. ggz_write_fd/ggz_read_fd() are used to transmit file
descriptors. Using fdopen() and the ggz_write_*/ggz_send_* (easysock)
functions one can consume already opened file descriptors in games.

In C++ with Qt, the kggz(d)mod libraries implement the above scheme. A variant
of ggz_read_fd() is used to transmit the file descriptors. Using
KGGZRaw::setNetwork() or KGGZPacket::slotNetwork() in the kggznet library,
consuming already opened file descriptors in games is possible. Both are
based on Qt's QAbstractSocket::setSocketDescriptor().

In Python, the pyggz(d)mod libraries implement the scheme. The wrappers use
ggz_read_fd() via ggz(d)mod internally to transmit the file descriptors,
although a dedicated wrapper is made available through the PyAncillary class.
Using the Python method Socket::fromfd() it is possible to use already open
file descriptors in the game.

In Ruby, similarly to Python, the ruggz(d)mod libraries implement the scheme,
and the wrappers use ggz_read_fd() via ggz(d)mod internally for the file
descriptor transmission. Games can use GGZRawSocket::for_fd() to use already
open file descriptors, which is built on Ruby's Socket class.

Java is the most difficult one. Not only lacks it a file descriptor
transmission facility similar to all the other languages beside C/C++, but it
also doesn't easily allow to open sockets on already open file descriptors.
Hence, the class GGZChannel must be used for both which builds on the 'nio'
package.

Alternative socket transmission
-------------------------------

On win32, both socketpair() and ggz_read_fd()/ggz_write_fd() is currently not
available. Hence, the control socket to the game client is transmitted through
GGZPORT (see above), and the socket to the game server is replaced by
connection information to the game server instead.
This is not ideal but works for game clients.

On the Java platform, similar restrictions apply. Furthermore, since Java is
likely used for game servers, the workarounds are not as easy as they are on
Windows. If the usage of already open file descriptors was solved, then using
pre-allocated file descriptor arrays would work to inform game servers about
incoming connections which are accepted by jggzdmod and then dup2()'d to the
array. However, since solving it requires at least wrapping C code like libc,
we can as well wrap libggz and get file descriptor transmission for free, thus
not having to extend the game server launch code. Another reason is that it
is slower to redirect traffic through another process.

Summary
-------

Game developers using the mentioned programming languages can count on the
following features:

Language   | use open file descriptor    | transmit file descriptors
-----------+-----------------------------+----------------------------
C/pure C++ | yes: write(), fdopen() etc. | yes: implemented in libggz
C++/Qt     | yes: in QAbstractSocket     | yes: implemented in kggzmod
Python     | yes: in Socket class        | only through PyAncillary [libggz]
Ruby       | yes: in Socket class        | no
Java       | only through GGZChannel     | only through GGZChannel [libggz]

