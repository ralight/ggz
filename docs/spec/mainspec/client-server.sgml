<para>
  The client and GGZ server will communicate via the protocol
  described here.  Individual games will of course communicate via
  their own protocol. These messages are transferred on a separate
  (direct) connection between game client and game server.
  While GGZ games are free to use whatever communication protocol
  they like, the GGZ protocol itself is currently encoded in XML.
</para>

<para>
  Interactions are presented here categorically. For a complete
  reference of client-server interactions, please see the
  <link linkend="appendix">appendix</link>.
</para>

<section id="logging-in">
  <title>Logging in</title>

  <para>
    When a client first connects to the server, the server will start
	the <link linkend="msg.session">SESSION</link> and respond
    with <link linkend="msg.server.server">SERVER</link>, notifying
    the client of the server type, name and protocol version number.  If the
    server is full (ie. no more user logins allowed), it will indicate this.
    After establishing a connection to the server, the client may send
    one of three commands to login:

    <itemizedlist>
      <listitem>
	<para>
	  <link linkend="req.login">LOGIN</link> is used for
	  normal player logins.  The server will respond with a
	  <link linkend="rsp.result">RESULT</link> tag.
	  There are 3 types: First-time logins (which result in an
	  account to be created and a password to be assigned),
	  anonymous logins (which don't require a password),
	  and registered logins.
	</para>
      </listitem>
	</itemizedlist>

    <note>
      <para>
	Clients may choose to send login requests immediately, not
	waiting for the <link
	linkend="msg.server.server">SERVER</link>.  This is
	acceptable, provided the client handle the case where the
	server tells that it doesn't accept any more connections
	(i.e. is full). It will
	receive no further notification that the login has failed.
	</para>
    </note>
  </para>

  <para>
    After a successful login, the server may optionally send a
	message-of-the-day to the client via a <link
    linkend="msg.motd">MOTD</link> tag. This is a text message,
    possibly with embedded color codes. For more details, see
	the part about the MOTD system in the GGZ design specification.
  </para>

  <para>
    Any time after logging in, the client may logout of the server by
    closing the session, i.e. by sending the closing part of the
	<link linkend="msg.session">SESSION</link> tag. The server
    will end its <link linkend="msg.session">SESSION</link> then, too.
    Clients should <emphasis>not</emphasis> simply disconnect from
    the server without logging out as player data and game statistics
    may not get written back to the database.

    <note>
      <para>
	A client may only login once. At the present, if the player
	wishes to re-login for some reason (eg. to become anonymous, or
	to switch accounts), he will have to logout and then back in
	again. We may make account-switching possible at a future date,
	once we implement player preferences.
      </para>
    </note>

    <warning>
      <para>
	Although it is not explicitly disallowed by the server,
	clients are discouraged from allowing players to logout while
	at a game table. The client should send the appropriate
	<link linkend="req.table.leave">LEAVE</link> request first.
      </para>
    </warning>
  </para>
</section>

<section id="server-info">
  <title>Requesting server information</title>

  <para>
    After logging in, there are several pieces of information about
    the server which the client may request:

    <itemizedlist>
      <listitem>
	<para>
	  To request a list of game types which the server supports,
	  the client should as for the game list via the tag
	  <link linkend="req.list">LIST</link>. The server
	  will then send the client the list of supported games via
	  a <link linkend="rsp.result">RESULT</link> tag which encloses a
	  <link linkend="rsp.list">LIST</link>. Only
	  games which are supported by both the particular client
	  <emphasis>and</emphasis> the server may be played.
	</para>
	
      </listitem>

      <listitem>
	<para>
	  To request a list of the game rooms present on the server,
	  clients should send a
	  <link linkend="req.list">LIST</link> tag with the room
	  parameter. The server will then send back a
	  <link linkend="rsp.list">LIST</link> (again, within a
	  <link linkend="rsp.result">RESULT</link> tag)
	  with the desired information.
	</para>
      </listitem>

      <listitem>
	<para>
	  If the server has a message-of-the-day, it will send it to
	  the client upon login (see the section on <link
	  linkend="logging-in">logging in</link>).  The client may
	  request to see it again, however, by sending <link
	  linkend="msg.motd">MOTD</link>.  If there is a
	  message-of-the-day, the server will send it via <link
	  linkend="msg.motd">MOTD</link>.  If it does not exist,
	  the server will ignore the request.
	</para>
      </listitem>

    </itemizedlist>
  </para>

  <para>
    Some infomration about the server may change while the player is
    logged in.  If this occurs, the server will send an <link
    linkend="server-updates">update notification</link>.
  </para>

</section>

<section id="rooms">
  <title>Rooms</title>
  <para>
    Most of the real action on a GGZ server occurs in rooms.  Each
    room supports a particular game type, and provides a place for
    players to <link linkend="chatting">chat</link> back and forth
    with friends.  When a client first logs in, the player is not in a
    specific room, but in limbo.  In order to chat with other players
    or join a <link linkend="table-management">table</link>, the
    player must enter a specific room.
  </para>

  <para>
    Changing rooms is done via <link
    linkend="req.enter">ENTER</link>.  The server will
    respond to the room-change request with <link
    linkend="rsp.result">RESULT</link>.  There is no
    equivalent command to leave a room since leaving the room takes
    place automatically when a player joins some other room (We can't
    have players in two places at once, now can we?).
  </para>
</section>

<section id="room-info">
  <title>Requesting room information</title>

  <para>
    Once the player has entered a room, he or she will no doubt want
    to know who else is there and if there are any games being
    played.

    <itemizedlist>
      <listitem>
	<para>
	  To request a list of the players in the current room and
	  what tables the are at, a client may send
	  <link linkend="req.list">LIST</link> with type 'player'.
	  The server will respond with a list of
	  <link linkend="rsp.list.player">PLAYER</link> tags.
	</para>
      </listitem>

      <listitem>
	<para>
	  Similarly, to request a list of the game tables in the room,
	  the client should send
	  <link linkend="req.list">LIST</link> of type 'table'.
	  The server will respond via a list of
	  <link linkend="rsp.list.table">TABLE</link> tags.
	</para>
      </listitem>
    </itemizedlist>
  </para>

  <para>
    Rooms are busy places with players entering and leaving, and
    tables being launched and destroyed.  To keep the client from
    having to continually resend list requests, the server will send
    periodic <link linkend="server-updates">updates</link>.
  </para>

</section>


<section id="server-updates">
  <title>Server updates</title>

  <para>
    While the player is logged in, information about the server may
    change, espeically if that information pertains to the players or
    tables in a perticular room.  Rather than insist that the client
    send a new list request periodically, the server will send update
    messages to the client:

    <itemizedlist>
      <listitem>
	<para>
	  If the the room list changes in any way, the server will
	  send out a room
	  <link linkend="msg.update">UPDATE</link> to each
	  of the clients.  Note that currently there is no mechanism
	  to change the rooms on the fly, so this message will never
	  occur.  However, it is probable that this functionality will
	  be added in the future.
	</para>
      </listitem>

      <listitem>
	<para>
	  If another player enters or leaves the room, the server will
	  send an
	  <link linkend="msg.update">UPDATE</link> of type 'player' to
	  all of <emphasis>other</emphasis> players in that room.  A
	  player will never receive a player update about himself.
	</para>
      </listitem>

      <listitem>
	<para>
	  If the server's list of supported games types changes, it
	  will send a game type
	  <link linkend="msg.update">UPDATE</link> to each
	  of the clients.  Note that currently there is no mechanism
	  to change game types on the fly, so this message will never
	  occur.  However, it is probable that this functionality will
	  be added in the future.
	</para>
      </listitem>

      <listitem>
	<para>
	  Whenever the list of tables in a room changes, each player
	  in the room will receive an
	  <link linkend="msg.update">UPDATE</link> message of type
	  'player'. This will occur whenever a table is launched or
	  destroyed, a player joins or leaves, or the table's state
	  has changed. 
	</para>
      </listitem>
    </itemizedlist>
  </para>

  <note>
    <para>
      It should be noted that these messages are asynchronous, are are
      sent by the server automatically without having been requested
      by the client.
    </para>
  </note>
</section>

<section id="table-management">
  <title>Table Management</title>

  <para>
    In order to play or watch a game with other players logged into GGZ, a
    player must be at a table. This is accomplished via one of two
    interactions:

    <itemizedlist>
      <listitem>
	<para>
	  To join a player or spectator to an existing table, the client should
	  send <link linkend="req.table.join">JOIN</link>.
	  The server will respond with
	  <link linkend="rsp.result">RESULT</link>, notifying
	  the client if the attempt to join was successful.
	</para>
      </listitem>

      <listitem>
	<para>
	  To launch a new table, clients must send the
	  <link linkend="req.table.launch">LAUNCH</link> tag.
	  The server will respond with
	  <link linkend="rsp.result">RESULT</link>,
	  notifying the client of the status of the table launch.
	</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>
	Currently the server will automatically attempt to join the
	the player to the newly launched table.  The result of this
	join will be sent to the client via a
	<link linkend="rsp.result">RESULT</link>, even though
	the client did not explicitly request a join.  This behaviour
	may change in future version of the server
	</para>
    </note>
  </para>

  <para>
    At the end of a game session, the server will automatically remove
    all players from the table.  Should a player wish to leave a table
    before the completion of the game, however, the client may send a
    <link linkend="req.table.leave">LEAVE</link>.
	The server will then send back
	<link linkend="rsp.result">RESULT</link>.
	Note that not all game types will support leaving in mid-game.
	Such games can be left when passing the 'force' parameter, however
	it ends for all other players then, too.
  </para>

</section>

<section id="chatting">
  <title>Chatting with friends</title>

  <para>
    What fun would playing games be if you can't taunt your opponents
    or laugh with your friends?  Similar to the "Taunt" feature
    provided with NetSpades, the GGZ server provides the ability to
    send messages to other players via the server.  The following
    interactions describe how this messaging is accomplished.

    <itemizedlist>
      <listitem>
	<para>
	  When a player wishes to send a chat message, the client
	  should send a <link linkend="req.chat">CHAT</link>.
	  Different types of chat messages are distinguished by the
	  <link linkend="chat-subopcodes">chat sub-opcodes</link> The
	  server will respond with the status of the chat operation
	  via <link linkend="rsp.chat">CHAT</link>
	</para>
      </listitem>

      <listitem>
	<para>
	  When a player receives a chat message from another player,
	  the server will send
	  <link linkend="rsp.chat">CHAT</link> to the client.  The
	  <link linkend="chat-subopcodes">chat sub-opcodes</link>
	  distinguish between the various chat operations
	</para>
      </listitem>
    </itemizedlist>
  </para>

  <para id="chat-subopcodes">
    Sub-opcodes for chat messages are as follows:
    <itemizedlist>
      <listitem>
	<para>
	  GGZ_CHAT_NORMAL
	  signifies a "typical" chat message which is sent to all
	  players in the current room.
	</para>
      </listitem>
      <listitem>
	<para>
	  GGZ_CHAT_BEEP is a
	  special message with no text content, which is sent to a
	  specific player.  A typical client response to the receipt
	  of this message would be to emit a beep.
	</para>
      </listitem>
      <listitem>
	<para>
	  GGZ_CHAT_PERSONAL is a
	  private message directed to a single player.
	  <warning>
	    <para>
	      To discourage cheating, private messages may not be sent
	      or received while the player is at a game table.
	    </para>
	  </warning>
	</para>
      </listitem>
    </itemizedlist>
  </para>
</section>

<section id="adminactions">
  <title>Administrative actions</title>

  <para>
    Since not everyone behaves well during chatting and playing,
	especially not on large anonymous networks, some help is available
	to privileged players for taming those who tend to be griefers.

    <itemizedlist>
      <listitem>
	<para>
	  Players can be silenced (gagged) with or without letting
	  them know, which is a temporary measure. They can also be
	  kicked off a server or even banned forever.
	  In order to initiate an administrative action against
	  a player, an <link linkend="req.admin">ADMIN</link>
	  message is to be sent by the client.
	  It will contain the name of the affected player, probably
	  a reason for the action, and the
	  <link linkend="admin-subopcodes">admin sub-opcode</link>
	  which identifies the action.
	  In response, the server will return a
	  <link linkend="rsp.result">RESULT</link> with action being
	  set to "admin".
	</para>
      </listitem>

    </itemizedlist>
  </para>

  <para id="admin-subopcodes">
    Sub-opcodes for admin actions are as follows:
    <itemizedlist>
      <listitem>
	<para>
	  GGZ_ADMIN_GAG
	  silences the player. This works effectively like a
	  global ignore list so that everyone but the player
	  himself will not be bothered by his messages.
	</para>
      </listitem>
      <listitem>
	<para>
	  GGZ_ADMIN_UNGAG
	  is the inverse of GGZ_ADMIN_GAG.
	</para>
      </listitem>
      <listitem>
	<para>
	  GGZ_ADMIN_KICK
	  kicks a player from the server, i.e. closes the
	  connection of the affected person.
	</para>
      </listitem>
<!--
      <listitem>
	<para>
	  GGZ_ADMIN_BAN
	</para>
      </listitem>
-->
    </itemizedlist>
  </para>
</section>

<section id="game-messages"><title>Game Interactions</title>
  <para>
    Since protocol version 7, direct connections have been in place.
	Therefore, no separate tags to embed them are needed anymore.
  </para>
</section>

