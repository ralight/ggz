Tutorial: Writing plugins for Grubby
Josef Spillner, 2001-08-19
------------------------------------

1. Plugin architecture
----------------------
Our chat bot has now been converted to use plugins (modules) which do all the
work for it. These modules have access to both the plugin API (such as
receiving messages and their sender) and other API's, for example to access the
player database.
Thus, although it's still grubby, for developers it's now the "guru".

2. Basics
---------
A plugin can basically be two things: A file with 2 C functions (gurumod_init
and gurumod_exec), or it can also be an external program which is wrapped by
the module modexec.

All C functions get the Guru structure which contains the following fields:

char*	player		- the player who sent the message
char*	message		- message line, or NULL on events
int		type		- private message, normal chat, leave event, ...
char**	list		- tokenized list of the message line
int		priority	- helper value to control noise output on implicit messages

The first word, and therefore the first token, contain the name of grubby, and
should always be ignored in modules. It could be "Keeper", "Keeper(G)",
"keeper:" and even more.
The pritority ranges from 10 down to 0, and means that modules which do not
listen on special commands (such as "grubby news") but scan for arbitrary words
like badwords should be quite on a high priority, but more noisy on a priority
of zero. This avoids the impression that the bot has been created for
annoyance.
Before return, the list should be left as is, but the message should be
free()'d and set to the answer or to NULL if there's nothing to answer.
Multiple line answers are possible if separated by a '\n'.
On return, the type should almost always be set to private chat, so other
players aren't annoyed. Most modules should even try to prevent interaction if
the player wrote a command publicly.

3. External programs and scripts
--------------------------------
It's even easier to write a little script which is wrapped, reads some control
information from the command line parameters, and the message from the standard
input. The answer is written to standard output.
However, care must be taken about two things:
- always flush answers
- always wait about one second after the flush
This is because otherwise the modexec wrapper wouldn't have a chance to read
the answer.

The command line paramers are:
argv[0] = program name
argv[1] = player
argv[2] = type
argv[3] = priority

Also take care that scripts have the executable flags set after installation,
else they won't respond anything.

4. Embedded scripts
-------------------

Using mod_embed, scripts of supported programming languages can now also be
executed with no time loss as embedded scripts (yet running as external process
to achieve higher security).
For ruby scripts, the variable $answer serves as both input and output
interface.

5. Player interface
-------------------
Some modules want to know when a player was last seen, if he logged in at all
and more. For those, the file player.c contains some useful functions. Have a
look at test_player.c on how to use it.
Grubby commands like "have you seen Keeper" or his automatical first-time
introduction haven't been coded yet. They should use this easy interface.

6. Internationalization
-----------------------
Never care about input in foreign languages. Although it is planned to add i18n
support to both input and output dynamically, the language switch is done in
grubby's core, so the modules only deal with english text.
Example:
player input: "grubby treffen"
module input: "grubby meeting"
moudle output: "sorry, no meetings found"
player output: "entschuldigung, leider keine einträge über treffen gefunden

6. Inclusion
------------
Once you created a useful plugin, don't hesitate to contact our development
mailing list to get the chance to include it into CVS!
-> ggz-dev@lists.sourceforge.net

Josef

