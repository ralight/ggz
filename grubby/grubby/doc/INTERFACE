Uh, this is a bit complicated.
I'll try to draw it down:


 +---------------+  +---------------+  +---------------+
 | guru_mod_prog |  | guru_mod_perl |  | guru_mod_dict |		module shift
 +---------------+  +---------------+  +---------------+
 +-----------------------------------------------------+
 | guru_module_api  guru_module_exec   guru_module_api |		API shift
 +-----------------------------------------------------+
              +---------------------------+
              | The real guru lives here. |						Core shift
              +---------------------------+
                +-----------------------+
                |       Guru i18n       |						I18n shift
                +-----------------------+
                +--------+     +--------+
                | Parser |     | Delay  |						I/O shift
                +--------+     +--------+
                    ^              |
                    |              v


Understood it?
The strings which it reads go through the parser, are tokenized there and
(maybe) translated back. Guru does then pass it to its modules, until it gets
an answer. In case it wants to put that answer back to the chat, the output is
delayed a bit and then written back.
Guru itself consists of the scoring system, the admin/owner command processor,
an option file loader/writer part, a module loader and a bit of magic...

Josef

Update: The i18n interface
--------------------------

All messages to be translated are marked with an underscore,
like _("Hello World.").

This has two functions:
- mark the message for translation ('make messages' in the data and po
  directories)
- translate the string into the current language, which is set by the
  environment variable $LANGUAGE, derived from $LANG (system) or the grubby
  configuration, see below.

The question is now how we determine what the current language is.
- If grubby outputs some text to the console, the language of the user who
  invoked grubby is used, if set.
- If a player speaks with grubby directly, his registered language is used.
- If grubby only reacts on some speech, the grubby default language is used,
  although one could argue that the language of the affected player would be
  better. This language is configured in grubby.rc.
- If a player changes his language, the registration is done immideately and
  the player is notified in the new language.
- The final string could sent to the output function is translated again, in
  case it wasn't done already. Would this be useful? Currently it doesn't
  seem to be needed.

Thus there are two language catalogs, 'grubby.mo' for system messages and
'guru.mo' for chat messages. Overlapping strings could be invalidated using
'***' in the respective wrong catalogs. However to make things easier, _(x)
is used for system messages, and __(x) for chat messages.

