Index: tictactoe/game.h
===================================================================
--- tictactoe/game.h	(revision 8613)
+++ tictactoe/game.h	(working copy)
@@ -70,9 +70,6 @@
 };
 
 
-/* Setup functions */
-void game_init(void);
-
 /* Functions to handle incoming data from server*/
 void receive_seat(void);
 void receive_players(void);
Index: tictactoe/main_win.c
===================================================================
--- tictactoe/main_win.c	(revision 8613)
+++ tictactoe/main_win.c	(working copy)
@@ -40,6 +40,7 @@
 #include "dlg_about.h"
 #include "dlg_players.h"
 #include "dlg_exit.h"
+#include "ggz_gtk.h"
 #include "menus.h"
 #include "main_win.h"
 #include "game.h"
@@ -86,9 +87,8 @@
 	int i, x, y;
 	GdkPixbuf *piece;
 	GtkStyle *style;
-	GtkWidget *tmp = g_object_get_data(G_OBJECT(main_win),
-					   "drawingarea");
-	int w = tmp->allocation.width, h = tmp->allocation.height;
+	GtkWidget *tmp;
+	int w, h;
 
 #if 0
 	g_print("  %c | %c | %c  \n", game.board[0], game.board[1],
@@ -102,7 +102,14 @@
 	g_print("\n");
 #endif
 
+	if (!ttt_buf) {
+	  	return;
+	}
+
 	tmp = g_object_get_data(G_OBJECT(main_win), "drawingarea");
+	w = tmp->allocation.width;
+	h = tmp->allocation.height;
+
 	style = gtk_widget_get_style(main_win);
 
 	gdk_draw_rectangle(ttt_buf,
@@ -279,7 +286,7 @@
 }
 
 
-static GtkWidget *create_menus(GtkWidget * window)
+static GtkWidget *create_menus(void)
 {
 	GtkWidget *menubar;
 	GtkItemFactoryEntry items[] = {
@@ -287,8 +294,7 @@
 		HELP_MENU
 	};
 
-	menubar = ggz_create_menus(window,
-				   items,
+	menubar = ggz_create_menus(items,
 				   sizeof(items) / sizeof(items[0]));
 
 	set_menu_sensitive(TABLE_SYNC, FALSE);
@@ -300,7 +306,7 @@
 
 GtkWidget *create_main_win(void)
 {
-	GtkWidget *main_win;
+	GtkWidget *display;
 	GtkWidget *main_box;
 	GtkWidget *menubar;
 	GtkWidget *drawingarea;
@@ -310,52 +316,50 @@
 
 	accel_group = gtk_accel_group_new();
 
-	main_win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	g_object_set_data(G_OBJECT(main_win), "main_win", main_win);
-	gtk_window_set_title(GTK_WINDOW(main_win), _("Tic-Tac-Toe"));
+	display = ggz_gtk_get_display_area();
 
 	main_box = gtk_vbox_new(FALSE, 0);
 	gtk_widget_ref(main_box);
-	g_object_set_data_full(G_OBJECT(main_win), "main_box", main_box,
+	g_object_set_data_full(G_OBJECT(display), "main_box", main_box,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(main_box);
-	gtk_container_add(GTK_CONTAINER(main_win), main_box);
+	gtk_container_add(GTK_CONTAINER(display), main_box);
 
-	menubar = create_menus(main_win);
+	menubar = create_menus();
 	gtk_widget_ref(menubar);
-	g_object_set_data_full(G_OBJECT(main_win), "menubar", menubar,
+	g_object_set_data_full(G_OBJECT(display), "menubar", menubar,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(menubar);
 	gtk_box_pack_start(GTK_BOX(main_box), menubar, FALSE, FALSE, 0);
 
 	drawingarea = gtk_drawing_area_new();
 	gtk_widget_ref(drawingarea);
-	g_object_set_data_full(G_OBJECT(main_win), "drawingarea",
+	g_object_set_data_full(G_OBJECT(display), "drawingarea",
 			       drawingarea,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(drawingarea);
 	gtk_box_pack_start(GTK_BOX(main_box), drawingarea, TRUE, TRUE, 0);
-	gtk_widget_set_size_request(drawingarea, 200, 200);
+	gtk_widget_set_size_request(drawingarea, 500, 400);
 	gtk_widget_set_events(drawingarea,
 			      GDK_EXPOSURE_MASK | GDK_BUTTON_PRESS_MASK);
 
 	statusbar = gtk_statusbar_new();
 	gtk_widget_ref(statusbar);
-	g_object_set_data_full(G_OBJECT(main_win), "statusbar", statusbar,
+	g_object_set_data_full(G_OBJECT(display), "statusbar", statusbar,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(statusbar);
 	gtk_box_pack_start(GTK_BOX(main_box), statusbar, FALSE, FALSE, 0);
 
 	chat = create_chat_widget();
 	gtk_widget_ref(chat);
-	g_object_set_data_full(G_OBJECT(main_win), "chat", chat,
+	g_object_set_data_full(G_OBJECT(display), "chat", chat,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(chat);
 	gtk_box_pack_start(GTK_BOX(main_box), chat, FALSE, FALSE, 0);
 
-	g_signal_connect(GTK_OBJECT(main_win), "delete_event",
+	g_signal_connect(GTK_OBJECT(display), "delete_event",
 			 GTK_SIGNAL_FUNC(main_exit), NULL);
-	g_signal_connect(GTK_OBJECT(main_win), "realize",
+	g_signal_connect(GTK_OBJECT(display), "realize",
 			 GTK_SIGNAL_FUNC(on_main_win_realize), NULL);
 	g_signal_connect(GTK_OBJECT(drawingarea), "configure_event",
 			 GTK_SIGNAL_FUNC(configure_handle), NULL);
@@ -364,7 +368,8 @@
 	g_signal_connect(GTK_OBJECT(drawingarea), "button_press_event",
 			 GTK_SIGNAL_FUNC(get_move), NULL);
 
-	gtk_window_add_accel_group(GTK_WINDOW(main_win), accel_group);
+	gtk_window_add_accel_group(GTK_WINDOW(ggz_gtk_get_main_window()),
+				   accel_group);
 
-	return main_win;
+	return display;
 }
Index: tictactoe/main.c
===================================================================
--- tictactoe/main.c	(revision 8613)
+++ tictactoe/main.c	(working copy)
@@ -52,32 +52,6 @@
 
 static void initialize_about_dialog(void);
 
-int main(int argc, char *argv[])
-{
-	ggz_intl_init("tictactoe");
-
-	gtk_init(&argc, &argv);
-	initialize_about_dialog();
-
-	main_win = create_main_win();
-	gtk_widget_show(main_win);
-
-	game_init();
-	display_board();
-
-	init_chat(game.ggzmod);
-
-	game_status(_("Watching the game..."));
-
-	gtk_main();
-
-	if (ggzmod_disconnect(game.ggzmod) < 0)
-		return -1;
-
-	ggzmod_free(game.ggzmod);
-	return 0;
-}
-
 static void initialize_about_dialog(void)
 {
 	const char *content =
@@ -255,8 +229,7 @@
 	}
 }
 
-
-void game_init(void)
+static void game_init(void)
 {
 	int i;
 
@@ -265,11 +238,17 @@
 
 	game.state = STATE_INIT;
 
-	game.ggzmod = init_ggz_gtk(GTK_WINDOW(main_win), game_handle_io);
 	game.num = -1;
+
+	display_board();
 }
 
+static void game_free(void)
+{
+	free_ggz_gtk();
+}
 
+
 int send_my_move(void)
 {
 	if (game.num < 0)
@@ -317,3 +296,27 @@
 		break;
 	}
 }
+
+int main(int argc, char *argv[])
+{
+	ggz_intl_init("tictactoe");
+
+	gtk_init(&argc, &argv);
+	initialize_about_dialog();
+
+	init_ggz_gtk(_("Tic-Tac-Toe"), TRUE,
+		     PROTOCOL_ENGINE, PROTOCOL_VERSION,
+		     game_handle_io, game_init);
+	game.ggzmod = ggz_gtk_get_ggzmod();
+
+	main_win = create_main_win();
+	gtk_widget_show_all(GTK_WIDGET(ggz_gtk_get_main_window()));
+
+	game_status(_("Watching the game..."));
+
+	gtk_main();
+
+	game_free();
+
+	return 0;
+}
Index: tictactoe/Makefile.am
===================================================================
--- tictactoe/Makefile.am	(revision 8613)
+++ tictactoe/Makefile.am	(working copy)
@@ -1,5 +1,5 @@
 AM_CPPFLAGS = -I$(top_srcdir)/common $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -19,8 +19,8 @@
 
 ggz_ttt_LDADD =	$(top_builddir)/common/libgtk-games.a			\
 		$(GTK_LIBS) $(INTLLIBS) $(LDADD)		\
-		$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_ttt_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+		$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_ttt_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 pixmapdir = $(ggzdatadir)/tictactoe/pixmaps
 dist_pixmap_DATA = o.svg x.svg
Index: spades/gtk_io.c
===================================================================
--- spades/gtk_io.c	(revision 8613)
+++ spades/gtk_io.c	(working copy)
@@ -74,7 +74,6 @@
 
 	/* Main window and callbacks */
 	playArea->window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	ggz_game_main_window = GTK_WINDOW(playArea->window);	/* HACK */
 	gtk_window_set_title(GTK_WINDOW(playArea->window), "GtkSpades");
 
 	g_signal_connect(GTK_OBJECT(playArea->window), "delete_event",
Index: spades/Makefile.am
===================================================================
--- spades/Makefile.am	(revision 8613)
+++ spades/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = .
 
 AM_CPPFLAGS = -I$(top_srcdir)/common/ $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -38,5 +38,5 @@
 
 ggz_spades_LDADD = 	$(top_builddir)/common/libgtk-games.a		\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)		\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_spades_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_spades_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
Index: spades/client_func.c
===================================================================
--- spades/client_func.c	(revision 8613)
+++ spades/client_func.c	(working copy)
@@ -202,7 +202,7 @@
 	ggzmod = ggzmod_new(GGZMOD_GAME);
 	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_SERVER,
 			   &handle_ggzmod_server);
-	init_player_list(ggzmod);
+	init_player_list();
 	ggzmod_connect(ggzmod);
 
 	channel = g_io_channel_unix_new(ggzmod_get_fd(ggzmod));
Index: reversi/main_win.c
===================================================================
--- reversi/main_win.c	(revision 8613)
+++ reversi/main_win.c	(working copy)
@@ -41,6 +41,7 @@
 #include "dlg_about.h"
 #include "dlg_exit.h"
 #include "dlg_players.h"
+#include "ggz_gtk.h"
 #include "menus.h"
 
 #include "game.h"
@@ -54,7 +55,7 @@
 GdkGC *pix_gc;
 GdkGC *bg_gc;
 GdkGC *last_gc;
-GdkPixmap *rvr_buf;
+static GdkPixmap *rvr_buf;
 
 GtkWidget *main_win;
 
@@ -118,6 +119,10 @@
 	GtkWidget *black_label;
 	char score[29];
 
+	if (!rvr_buf) {
+		return;
+	}
+
 	tmp = g_object_get_data(G_OBJECT(main_win), "drawingarea");
 	style = gtk_widget_get_style(main_win);
 
@@ -412,7 +417,7 @@
 	return TRUE;
 }
 
-static GtkWidget *create_menus(GtkWidget * window)
+static GtkWidget *create_menus(void)
 {
 	GtkItemFactoryEntry items[] = {
 		TABLE_MENU,
@@ -422,8 +427,7 @@
 		HELP_MENU
 	};
 
-	return ggz_create_menus(window,
-				items, sizeof(items) / sizeof(items[0]));
+	return ggz_create_menus(items, sizeof(items) / sizeof(items[0]));
 }
 
 GtkWidget *create_main_win(void)
@@ -443,9 +447,7 @@
 
 	accel_group = gtk_accel_group_new();
 
-	main_win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	g_object_set_data(G_OBJECT(main_win), "main_win", main_win);
-	gtk_window_set_title(GTK_WINDOW(main_win), _("Reversi"));
+	main_win = ggz_gtk_get_display_area();
 
 	main_box = gtk_vbox_new(FALSE, 0);
 	gtk_widget_ref(main_box);
@@ -454,7 +456,7 @@
 	gtk_widget_show(main_box);
 	gtk_container_add(GTK_CONTAINER(main_win), main_box);
 
-	menubar = create_menus(main_win);
+	menubar = create_menus();
 	gtk_widget_ref(menubar);
 	g_object_set_data_full(G_OBJECT(main_win), "menubar", menubar,
 			       (GtkDestroyNotify) gtk_widget_unref);
@@ -552,7 +554,7 @@
 	g_signal_connect(GTK_OBJECT(again_button), "clicked",
 			 GTK_SIGNAL_FUNC(play_again), NULL);
 
-	gtk_window_add_accel_group(GTK_WINDOW(main_win), accel_group);
+	gtk_window_add_accel_group(ggz_gtk_get_main_window(), accel_group);
 
 	return main_win;
 }
Index: reversi/main.c
===================================================================
--- reversi/main.c	(revision 8613)
+++ reversi/main.c	(working copy)
@@ -115,25 +115,22 @@
 	initialize_about_dialog();
 	add_pixmap_directory(".");
 
+	init_ggz_gtk(_("Reversi"), TRUE,
+		     REVERSI_PROTOCOL_ENGINE, REVERSI_PROTOCOL_VERSION,
+		     game_handle_io, game_init);
+	mod = ggz_gtk_get_ggzmod();
+
 	main_win = create_main_win();
-	gtk_widget_show(main_win);
+	gtk_widget_show_all(main_win);
 
-	game_init();
-
 	strcpy(game.names[0], "empty");
 	strcpy(game.names[1], "empty");
 
-	display_board();
-
-	mod = init_ggz_gtk(GTK_WINDOW(main_win), game_handle_io);
-
 	gtk_main();
 
 	save_data();
 
-	if (ggzmod_disconnect(mod) < 0)
-		return -2;
-	ggzmod_free(mod);
+	free_ggz_gtk();
 
 	cleanup_debugging();
 	ggz_conf_cleanup();
@@ -281,7 +278,7 @@
 	game.state = RVR_STATE_INIT;
 	game.last_move = -1;
 
-
+	display_board();
 }
 
 int get_seat(void)
Index: reversi/Makefile.am
===================================================================
--- reversi/Makefile.am	(revision 8613)
+++ reversi/Makefile.am	(working copy)
@@ -6,7 +6,7 @@
 SUBDIRS = .
 
 AM_CPPFLAGS = -I$(top_srcdir)/common $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 install-data-local:
 	$(GGZ_CONFIG) -D --install --modfile=module.dsc --force
@@ -25,8 +25,8 @@
 
 ggz_reversi_LDADD =	$(top_builddir)/common/libgtk-games.a		\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)	\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_reversi_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_reversi_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 pixmapdir = $(ggzdatadir)/reversi/pixmaps
 dist_pixmap_DATA = white.svg black.svg dot.svg enemydot.svg
Index: hastings/main.c
===================================================================
--- hastings/main.c	(revision 8613)
+++ hastings/main.c	(working copy)
@@ -73,11 +73,14 @@
 	gtk_init(&argc, &argv);
 	initialize_about_dialog();
 
+	init_ggz_gtk(_("Battle of Hastings"), FALSE,
+		     HASTINGS_PROTOCOL_ENGINE, HASTINGS_PROTOCOL_VERSION,
+		     game_handle_io, NULL);
+	mod = ggz_gtk_get_ggzmod();
+
 	main_win = create_main_win();
 	gtk_widget_show(main_win);
 
-	mod = init_ggz_gtk(GTK_WINDOW(main_win), game_handle_io);
-
 	gtk_main();
 
 	if (ggzmod_disconnect(mod) < 0)
Index: hastings/Makefile.am
===================================================================
--- hastings/Makefile.am	(revision 8613)
+++ hastings/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = . pixmaps
 
 AM_CPPFLAGS = -I$(top_srcdir)/common/ $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -26,7 +26,7 @@
 
 ggz_hastings_LDADD =	$(top_builddir)/common/libgtk-games.a	\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)		\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_hastings_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_hastings_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 noinst_HEADERS = version.m4
Index: common/dlg_exit.c
===================================================================
--- common/dlg_exit.c	(revision 8613)
+++ common/dlg_exit.c	(working copy)
@@ -39,7 +39,7 @@
 {
 	gtk_widget_destroy(GTK_WIDGET(dialog));
 	if (response == GTK_RESPONSE_YES) {
-		gtk_main_quit();
+		ggz_game_closed();
 	}
 }
 
@@ -100,12 +100,14 @@
 {
 	static GtkWidget *dialog = NULL;
 
-	if (dialog) {
+	if (ggz_gtk_is_embedded() && can_return) {
+		ggz_game_closed();
+	} else if (dialog) {
 		gdk_window_show(dialog->window);
 		gdk_window_raise(dialog->window);
 	} else {
 		dialog =
-		    make_exit_dialog(can_return, ggz_game_main_window);
+		    make_exit_dialog(can_return, ggz_gtk_get_main_window());
 
 		g_signal_connect(dialog, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
Index: common/dlg_about.c
===================================================================
--- common/dlg_about.c	(revision 8613)
+++ common/dlg_about.c	(working copy)
@@ -114,7 +114,7 @@
 		gdk_window_show(dlg_about->window);
 		gdk_window_raise(dlg_about->window);
 	} else {
-		dlg_about = create_dlg_about(ggz_game_main_window);
+		dlg_about = create_dlg_about(ggz_gtk_get_main_window());
 		g_signal_connect(dlg_about, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
 				 &dlg_about);
Index: common/ggz_gtk.h
===================================================================
--- common/ggz_gtk.h	(revision 8613)
+++ common/ggz_gtk.h	(working copy)
@@ -28,7 +28,16 @@
 #include "ggzintl.h"
 #include "dlg_players.h"
 
-extern GtkWindow *ggz_game_main_window;
+void init_ggz_gtk(const char *window_title,
+		  gboolean supports_embedded_ggz,
+		  const char *prot_engine, const char *prot_version,
+		  gboolean(*game_handler) (GGZMod * mod),
+		  void (*game_init)(void));
+void free_ggz_gtk(void);
 
-GGZMod *init_ggz_gtk(GtkWindow * main_window,
-		     gboolean(*game_handler) (GGZMod * mod));
+void ggz_game_closed(void);
+
+GtkWindow *ggz_gtk_get_main_window(void);
+GtkWidget *ggz_gtk_get_display_area(void);
+GGZMod *ggz_gtk_get_ggzmod(void);
+gboolean ggz_gtk_is_embedded(void);
Index: common/dlg_chat.c
===================================================================
--- common/dlg_chat.c	(revision 8613)
+++ common/dlg_chat.c	(working copy)
@@ -30,6 +30,7 @@
 #  include <config.h>	/* Site-specific config */
 #endif
 
+#include <assert.h>
 #include <stdio.h>
 
 #include <gtk/gtk.h>
@@ -78,10 +79,11 @@
 	}
 }
 
-void init_chat(GGZMod * ggzmod)
+void init_chat(void)
 {
-	ggz = ggzmod;
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_CHAT,
+	ggz = ggz_gtk_get_ggzmod();
+	assert(ggz != NULL);
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_CHAT,
 			   handle_ggz_chat_event);
 }
 
@@ -90,6 +92,7 @@
 	const char *theinput = gtk_entry_get_text(w);
 
 	if (*theinput) {
+		assert(ggz != NULL);
 		ggzmod_request_chat(ggz, theinput);
 	}
 
@@ -195,7 +198,7 @@
 		gdk_window_show(dlg_chat->window);
 		gdk_window_raise(dlg_chat->window);
 	} else {
-		dlg_chat = create_dlg_chat(ggz_game_main_window);
+		dlg_chat = create_dlg_chat(ggz_gtk_get_main_window());
 		g_signal_connect(dlg_chat, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
 				 &dlg_chat);
Index: common/dlg_players.c
===================================================================
--- common/dlg_players.c	(revision 8613)
+++ common/dlg_players.c	(working copy)
@@ -83,15 +83,15 @@
 	update_player_lists();
 }
 
-void init_player_list(GGZMod * ggzmod)
+void init_player_list(void)
 {
-	ggz = ggzmod;
-	assert(ggz);
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_SEAT,
+	ggz = ggz_gtk_get_ggzmod();
+	assert(ggz != NULL);
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_SEAT,
 			   handle_ggz_seat_event);
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_SPECTATOR_SEAT,
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_SPECTATOR_SEAT,
 			   handle_ggz_seat_event);
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_STATE,
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_STATE,
 			   handle_ggz_seat_event);
 }
 
@@ -100,7 +100,7 @@
 	int p, num;
 	GtkListStore *store = g_object_get_data(G_OBJECT(tree), "store");
 
-	assert(ggz);
+	assert(ggz != NULL);
 
 	gtk_list_store_clear(store);
 	num_entries = 0;
@@ -311,7 +311,7 @@
 		gdk_window_show(dlg_players->window);
 		gdk_window_raise(dlg_players->window);
 	} else {
-		dlg_players = create_dlg_players(ggz_game_main_window);
+		dlg_players = create_dlg_players(ggz_gtk_get_main_window());
 		g_signal_connect(dlg_players, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
 				 &dlg_players);
@@ -351,6 +351,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	if (spectator)
 		name = ggzmod_get_spectator_seat(ggz, seat_num).name;
 	else
@@ -367,6 +368,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	assert(!spectator);
 	ggzmod_request_sit(ggz, seat_num);
 }
@@ -378,6 +380,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	assert(!spectator);
 	ggzmod_request_bot(ggz, seat_num);
 }
@@ -389,6 +392,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	assert(!spectator);
 	ggzmod_request_open(ggz, seat_num);
 }
@@ -402,6 +406,7 @@
 	int is_spectator, my_seat_num;
 	const char *my_name;
 
+	assert(ggz != NULL);
 	my_name = ggzmod_get_player(ggz, &is_spectator, &my_seat_num);
 
 	assert((seat || sseat) && !(seat && sseat));
@@ -532,13 +537,16 @@
 				   &is_spectator, PLAYER_COLUMN_SEATNUM,
 				   &seatnum, -1);
 
+		assert(ggz != NULL);
 		if (is_spectator) {
 			GGZSpectatorSeat sseat;
+
 			sseat = ggzmod_get_spectator_seat(ggz, seatnum);
 			popup_player_menu(NULL, &sseat,
 					  buttonevent->button);
 		} else {
 			GGZSeat seat = ggzmod_get_seat(ggz, seatnum);
+
 			popup_player_menu(&seat, NULL,
 					  buttonevent->button);
 		}
@@ -549,10 +557,12 @@
 
 void do_sit(void)
 {
+	assert(ggz != NULL);
 	ggzmod_request_sit(ggz, -1);
 }
 
 void do_stand(void)
 {
+	assert(ggz != NULL);
 	ggzmod_request_stand(ggz);
 }
Index: common/dlg_chat.h
===================================================================
--- common/dlg_chat.h	(revision 8613)
+++ common/dlg_chat.h	(working copy)
@@ -30,7 +30,7 @@
  * handler for the CHAT event.  If the game wants its own handler for this
  * event you should register it *after* calling this function, and handle
  * the chat manually. */
-void init_chat(GGZMod * ggzmod);
+void init_chat(void);
 
 /* Creates a widget containing a chatbox. */
 GtkWidget *create_chat_widget(void);
Index: common/dlg_players.h
===================================================================
--- common/dlg_players.h	(revision 8613)
+++ common/dlg_players.h	(working copy)
@@ -32,7 +32,7 @@
    if the game wants its own handlers for these events you should
    register them *after* calling this function, and then be sure to
    call update_player_lists when the events occur. */
-void init_player_list(GGZMod * ggzmod);
+void init_player_list(void);
 
 /* The player list will attach itself to the SEAT and SPECTATOR ggzmod
    events, but if you override them you should call this function instead.
Index: common/menus.c
===================================================================
--- common/menus.c	(revision 8613)
+++ common/menus.c	(working copy)
@@ -34,14 +34,14 @@
 
 #include <assert.h>
 
+#include "ggz_gtk.h"
 #include "menus.h"
 
 static GtkItemFactory *menu = NULL;
 
 static void set_menu_active(const char *item, gboolean active);
 
-GtkWidget *ggz_create_menus(GtkWidget * window,
-			    GtkItemFactoryEntry * items,
+GtkWidget *ggz_create_menus(GtkItemFactoryEntry * items,
 			    const unsigned int num_items)
 {
 	GtkAccelGroup *accel_group = gtk_accel_group_new();
@@ -51,10 +51,9 @@
 	menu =
 	    gtk_item_factory_new(GTK_TYPE_MENU_BAR, "<main>", accel_group);
 	gtk_item_factory_create_items(menu, num_items, items, NULL);
-	gtk_window_add_accel_group(GTK_WINDOW(window), accel_group);
+	gtk_window_add_accel_group(GTK_WINDOW(ggz_gtk_get_main_window()),
+				   accel_group);
 
-	g_object_set_data(G_OBJECT(window), "mbar", menu);
-
 	/* Set default values. */
 	set_menu_active(TABLE_CHAT_WINDOW, TRUE);
 	set_menu_sensitive(TABLE_CHAT_WINDOW, FALSE);
Index: common/Makefile.am
===================================================================
--- common/Makefile.am	(revision 8613)
+++ common/Makefile.am	(working copy)
@@ -3,7 +3,8 @@
 
 SUBDIRS = . cardsets
 
-AM_CPPFLAGS = $(GTK_CFLAGS) $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES)
+AM_CPPFLAGS = $(GTK_CFLAGS) $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
+		$(GGZ_GTK_INCLUDES)
 
 noinst_LIBRARIES = libgtk-games.a
 
Index: common/menus.h
===================================================================
--- common/menus.h	(revision 8613)
+++ common/menus.h	(working copy)
@@ -68,8 +68,7 @@
 
 /* This function can be easily used (perhaps in conjunction with the
    above macros) to sensitize or desensitize a menu item. */
-GtkWidget *ggz_create_menus(GtkWidget * window,
-			    GtkItemFactoryEntry * items,
+GtkWidget *ggz_create_menus(GtkItemFactoryEntry * items,
 			    const unsigned int num_items);
 GtkWidget *get_menu_item(const char *item);
 void set_menu_sensitive(const char *menu, gboolean sensitive);
Index: common/ggz_gtk.c
===================================================================
--- common/ggz_gtk.c	(revision 8613)
+++ common/ggz_gtk.c	(working copy)
@@ -27,24 +27,37 @@
 #  include <config.h>
 #endif
 
+#include <assert.h>
 #include <stdlib.h>
 
 #include <gtk/gtk.h>
+
 #include <ggzmod.h>
+#include <ggz-gtk.h>
+#include <ggz-embed.h>
 
 #include "dlg_players.h"
 #include "ggz_gtk.h"
 
-GtkWindow *ggz_game_main_window;
+static GtkWidget *main_win, *display_area, *gtkgames_notebook;
+static GGZMod *mod;
+static gboolean embedded;
+static guint ggz_input_id = -1;
 
 static gboolean(*game_server_handler) (GGZMod * mod);
+static void (*init_game) (void);
 
-static gboolean handle_ggz(GIOChannel * channel, GIOCondition cond,
-			   gpointer data)
+static void handle_ggz(gpointer data, gint fid, GdkInputCondition cond)
 {
-	GGZMod *mod = data;
-
-	return (ggzmod_dispatch(mod) >= 0);
+	assert(mod != NULL);
+	if (cond & GDK_INPUT_READ) {
+		if (ggzmod_dispatch(mod) < 0) {
+			ggz_game_closed();
+		}
+	}
+	if (cond & GDK_INPUT_EXCEPTION) {
+		ggz_game_closed();
+	}
 }
 
 static gboolean handle_game_server(GIOChannel * channel, GIOCondition cond,
@@ -52,6 +65,7 @@
 {
 	GGZMod *mod = data;
 
+	assert(mod != NULL);
 	return (game_server_handler) (mod);
 }
 
@@ -66,30 +80,148 @@
 	g_io_add_watch(channel, G_IO_IN, handle_game_server, mod);
 }
 
-GGZMod *init_ggz_gtk(GtkWindow * main_window,
-		     gboolean(*game_handler) (GGZMod * mod))
+enum pages {
+	PAGE_GGZ,
+	PAGE_GAME
+};
+
+static void ggz_game_launched(void)
 {
-	GIOChannel *channel;
-	GGZMod *mod;
+	/* Connect to GGZ */
+	mod = ggzmod_new(GGZMOD_GAME);
+	ggzmod_set_handler(mod, GGZMOD_EVENT_SERVER,
+			   handle_ggzmod_server);
+	ggzmod_connect(mod);
 
+	ggz_input_id = gtk_input_add_full(ggzmod_get_fd(mod),
+					  GDK_INPUT_READ | GDK_INPUT_EXCEPTION,
+					  handle_ggz,
+					  NULL, NULL, NULL);
+
+	init_player_list();
+	init_chat();
+	if (init_game) {
+		(init_game)();
+	}
+
+	if (embedded) {
+		gtk_notebook_set_current_page(GTK_NOTEBOOK(gtkgames_notebook),
+					      PAGE_GAME);
+	}
+}
+
+static void ggzmod_close(void)
+{
+	(void) ggzmod_disconnect(mod);
+	ggzmod_free(mod);
+	mod = NULL;
+
+	assert(ggz_input_id != -1);
+	gtk_input_remove(ggz_input_id);
+	ggz_input_id = -1;
+}
+
+void ggz_game_closed(void)
+{
+	if (embedded) {
+		gtk_notebook_set_current_page(GTK_NOTEBOOK(gtkgames_notebook),
+					      PAGE_GGZ);
+		ggzmod_close();
+	} else {
+		gtk_main_quit();
+	}
+}
+
+static void create_main_window(const char *window_title)
+{
+	main_win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+
+	g_object_set_data(G_OBJECT(main_win), "main_win", main_win);
+	gtk_window_set_title(GTK_WINDOW(main_win), window_title);
+
+	gtk_window_set_default_size(GTK_WINDOW(main_win), 640, 480);
+
 	if (!ggzmod_is_ggz_mode()) {
-		printf(_("This program should only be run from within GGZ."));
-		printf("\n");
-		exit(1);
+		gtkgames_notebook = gtk_notebook_new();
+
+		/* stop mouse wheel notebook page switching. */
+		g_signal_connect(gtkgames_notebook, "scroll_event",
+				 G_CALLBACK(gtk_true), NULL);
+
+		gtk_notebook_set_show_tabs(GTK_NOTEBOOK(gtkgames_notebook),
+					   FALSE);
+		gtk_notebook_set_show_border(GTK_NOTEBOOK(gtkgames_notebook),
+					     FALSE);
+
+		gtk_notebook_append_page(GTK_NOTEBOOK(gtkgames_notebook),
+					 ggz_gtk_create_main_area(main_win),
+					 NULL);
+
+		display_area = gtk_vbox_new(FALSE, 0);
+		gtk_notebook_append_page(GTK_NOTEBOOK(gtkgames_notebook),
+					 display_area, NULL);
+
+		gtk_container_add(GTK_CONTAINER(main_win), gtkgames_notebook);
+
+		gtk_widget_show_all(GTK_WIDGET(main_win));
+	} else {
+		display_area = main_win;
 	}
 
-	ggz_game_main_window = main_window;
+}
 
-	/* Connect to GGZ */
-	mod = ggzmod_new(GGZMOD_GAME);
+void init_ggz_gtk(const char *window_title,
+		  gboolean supports_embedded_ggz,
+		  const char *prot_engine, const char *prot_version,
+		  gboolean(*game_handler) (GGZMod * mod),
+		  void (*game_init)(void))
+{
+	if (!ggzmod_is_ggz_mode()) {
+		if (!supports_embedded_ggz) {
+			printf(_("This program should only be run "
+				 "from within GGZ."));
+			printf("\n");
+			exit(1);
+		}
+		ggz_gtk_initialize(FALSE,
+				   NULL, ggz_game_launched, NULL,
+				   prot_engine, prot_version, NULL);
+	}
+	create_main_window(window_title);
+
+	embedded = !ggzmod_is_ggz_mode();
+
 	game_server_handler = game_handler;
-	ggzmod_set_handler(mod, GGZMOD_EVENT_SERVER, handle_ggzmod_server);
-	ggzmod_connect(mod);
+	init_game = game_init;
+	if (ggzmod_is_ggz_mode()) {
+		ggz_game_launched();
+	}
+}
 
-	channel = g_io_channel_unix_new(ggzmod_get_fd(mod));
-	g_io_add_watch(channel, G_IO_IN, handle_ggz, mod);
+void free_ggz_gtk(void)
+{
+	if (!embedded) {
+		ggzmod_close();
+	}
+}
 
-	init_player_list(mod);
 
+GtkWindow *ggz_gtk_get_main_window(void)
+{
+	return GTK_WINDOW(main_win);
+}
+
+GtkWidget *ggz_gtk_get_display_area(void)
+{
+	return display_area;
+}
+
+GGZMod *ggz_gtk_get_ggzmod(void)
+{
 	return mod;
 }
+
+gboolean ggz_gtk_is_embedded(void)
+{
+	return embedded;
+}
Index: chinese-checkers/game.c
===================================================================
--- chinese-checkers/game.c	(revision 8613)
+++ chinese-checkers/game.c	(working copy)
@@ -78,6 +78,13 @@
 {
 	char *filename;
 
+	/* Connect to GGZ. */
+	init_ggz_gtk(_("Chinese Checkers"), FALSE,
+		     CCHECKERS_PROTOCOL_ENGINE,
+		     CCHECKERS_PROTOCOL_VERSION,
+		     main_io_handler, NULL);
+	mod = ggz_gtk_get_ggzmod();
+
 	/* Get our preferences */
 	filename =
 	    g_strdup_printf("%s/.ggz/ccheckers-gtk.rc", getenv("HOME"));
@@ -99,9 +106,6 @@
 			exit(1);
 		}
 	}
-
-	/* Connect to GGZ. */
-	mod = init_ggz_gtk(GTK_WINDOW(dlg_main), main_io_handler);
 }
 
 
Index: chinese-checkers/main_dlg.c
===================================================================
--- chinese-checkers/main_dlg.c	(revision 8613)
+++ chinese-checkers/main_dlg.c	(working copy)
@@ -42,7 +42,7 @@
 #include "main_dlg.h"
 #include "support.h"
 
-static GtkWidget *create_menus(GtkWidget * window)
+static GtkWidget *create_menus(void)
 {
 	GtkItemFactoryEntry items[] = {
 		TABLE_MENU,
@@ -54,8 +54,7 @@
 
 	GtkWidget *menubar;
 
-	menubar = ggz_create_menus(window,
-				   items,
+	menubar = ggz_create_menus(items,
 				   sizeof(items) / sizeof(items[0]));
 
 	set_menu_sensitive(TABLE_SYNC, FALSE);
@@ -93,7 +92,7 @@
 	gtk_widget_show(vbox1);
 	gtk_container_add(GTK_CONTAINER(dlg_main), vbox1);
 
-	menubar = create_menus(dlg_main);
+	menubar = create_menus();
 	gtk_widget_set_name(menubar, "menubar");
 	gtk_widget_ref(menubar);
 	g_object_set_data_full(G_OBJECT(dlg_main), "menubar", menubar,
Index: chinese-checkers/Makefile.am
===================================================================
--- chinese-checkers/Makefile.am	(revision 8613)
+++ chinese-checkers/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = . pixmaps
 
 AM_CPPFLAGS = -I$(top_srcdir)/common/ $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDE) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -28,8 +28,8 @@
 
 ggz_ccheckers_LDADD =	$(top_builddir)/common/libgtk-games.a		\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)	\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_ccheckers_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_ccheckers_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 
 noinst_HEADERS = version.m4
Index: configure.ac
===================================================================
--- configure.ac	(revision 8613)
+++ configure.ac	(working copy)
@@ -47,6 +47,7 @@
 AC_GGZ_VERSION(0, 0, 14)
 AC_GGZ_GGZMOD
 AC_GGZ_CONFIG("true", ignore)
+AC_GGZ_GTK
 AC_GGZ_INTL
 
 dnl Check for header files
Index: ggzcards/dlg_main.c
===================================================================
--- ggzcards/dlg_main.c	(revision 8613)
+++ ggzcards/dlg_main.c	(working copy)
@@ -46,7 +46,7 @@
 #include "layout.h"
 #include "table.h"
 
-static GtkWidget *create_menus(GtkWidget * window)
+static GtkWidget *create_menus(void)
 {
 	GtkItemFactoryEntry items[] = {
 		TABLE_MENU,
@@ -67,8 +67,7 @@
 	};
 	GtkWidget *menubar;
 
-	menubar = ggz_create_menus(window,
-				   items,
+	menubar = ggz_create_menus(items,
 				   sizeof(items) / sizeof(items[0]));
 
 	set_menu_sensitive(_("<main>/Game/Start game"), FALSE);
@@ -106,7 +105,7 @@
 	gtk_widget_show(vbox1);
 	gtk_container_add(GTK_CONTAINER(dlg_main), vbox1);
 
-	menubar = create_menus(dlg_main);
+	menubar = create_menus();
 	gtk_widget_set_name(menubar, "menubar");
 	gtk_widget_ref(menubar);
 	g_object_set_data_full(G_OBJECT(dlg_main), "menubar", menubar,
Index: ggzcards/main.c
===================================================================
--- ggzcards/main.c	(revision 8613)
+++ ggzcards/main.c	(working copy)
@@ -83,12 +83,11 @@
 	pango_font_description_set_family(fixed_font, font);
 
 	/* Now some more initializations... */
-	init_player_list(client_get_ggzmod());
-	init_chat(client_get_ggzmod());
+	init_player_list();
+	init_chat();
 	init_about_dialog();
 	dlg_main = create_dlg_main();
-	ggz_game_main_window = GTK_WINDOW(dlg_main);	/* HACK */
-	gtk_widget_show(dlg_main);
+	gtk_widget_show_all(dlg_main);
 	table_initialize();
 	game_init();
 
Index: ggzcards/Makefile.am
===================================================================
--- ggzcards/Makefile.am	(revision 8613)
+++ ggzcards/Makefile.am	(working copy)
@@ -8,7 +8,7 @@
 AM_CPPFLAGS =	-I$(top_srcdir)/common/ \
 		-I$(top_srcdir)/ggzcards/common \
 		-I$(top_srcdir)/ggzcards/client \
-		$(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
+		$(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) $(GGZ_GTK_INCLUDES) \
 		$(GTK_CFLAGS)
 
 install-data-local:
@@ -40,11 +40,11 @@
 # first here.  If there's a circular dependency you may have to list the
 # libs twice!
 ggz_ggzcards_LDADD =	$(top_builddir)/common/libgtk-games.a		\
-			$(GTK_LIBS) $(INTLLIBS) $(LDADD)			\
+			$(GTK_LIBS) $(INTLLIBS) $(LDADD)		\
 			$(top_builddir)/ggzcards/client/libclient.a	\
 			$(top_builddir)/ggzcards/common/libcommon.a	\
-			$(LIB_GGZMOD) $(LIB_GGZ)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
 
-ggz_ggzcards_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+ggz_ggzcards_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 noinst_HEADERS = version.m4
Index: chess/main_win.c
===================================================================
--- chess/main_win.c	(revision 8613)
+++ chess/main_win.c	(working copy)
@@ -36,6 +36,7 @@
 
 #include "dlg_about.h"
 #include "dlg_players.h"
+#include "ggz_gtk.h"
 
 #include "callbacks.h"
 #include "main_win.h"
@@ -46,7 +47,7 @@
 	create_or_raise_dlg_about();
 }
 
-static GtkWidget *create_menus(GtkWidget * window)
+static GtkWidget *create_menus(void)
 {
 	GtkAccelGroup *accel_group;
 	GtkItemFactory *menu;
@@ -73,6 +74,7 @@
 		{_("/Help/_About"), "<ctrl>A", game_about, 0, NULL}
 	};
 	const int num = sizeof(items) / sizeof(items[0]);
+	GtkWindow *window = ggz_gtk_get_main_window();
 
 	accel_group = gtk_accel_group_new();
 
@@ -93,7 +95,7 @@
 
 GtkWidget *create_main_win(void)
 {
-	GtkWidget *main_win;
+	GtkWidget *display;
 	GtkWidget *vbox1;
 	GtkWidget *menubar;
 	GtkWidget *hbox1;
@@ -116,35 +118,32 @@
 
 	tooltips = gtk_tooltips_new();
 
-	main_win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	g_object_set_data(G_OBJECT(main_win), "main_win", main_win);
-	gtk_window_set_title(GTK_WINDOW(main_win), _("GGZ Chess"));
-	gtk_window_set_default_size(GTK_WINDOW(main_win), 640, 480);
+	display = ggz_gtk_get_display_area();
 
 	vbox1 = gtk_vbox_new(FALSE, 0);
 	gtk_widget_ref(vbox1);
-	g_object_set_data_full(G_OBJECT(main_win), "vbox1", vbox1,
+	g_object_set_data_full(G_OBJECT(display), "vbox1", vbox1,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(vbox1);
-	gtk_container_add(GTK_CONTAINER(main_win), vbox1);
+	gtk_container_add(GTK_CONTAINER(display), vbox1);
 
-	menubar = create_menus(main_win);
+	menubar = create_menus();
 	gtk_widget_ref(menubar);
-	g_object_set_data_full(G_OBJECT(main_win), "menubar", menubar,
+	g_object_set_data_full(G_OBJECT(display), "menubar", menubar,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(menubar);
 	gtk_box_pack_start(GTK_BOX(vbox1), menubar, FALSE, FALSE, 0);
 
 	hbox1 = gtk_hbox_new(FALSE, 0);
 	gtk_widget_ref(hbox1);
-	g_object_set_data_full(G_OBJECT(main_win), "hbox1", hbox1,
+	g_object_set_data_full(G_OBJECT(display), "hbox1", hbox1,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(hbox1);
 	gtk_box_pack_start(GTK_BOX(vbox1), hbox1, TRUE, TRUE, 0);
 
 	hpaned1 = gtk_hpaned_new();
 	gtk_widget_ref(hpaned1);
-	g_object_set_data_full(G_OBJECT(main_win), "hpaned1", hpaned1,
+	g_object_set_data_full(G_OBJECT(display), "hpaned1", hpaned1,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(hpaned1);
 	gtk_box_pack_start(GTK_BOX(hbox1), hpaned1, TRUE, TRUE, 0);
@@ -152,8 +151,9 @@
 
 	board = gtk_drawing_area_new();
 	gtk_widget_ref(board);
-	g_object_set_data_full(G_OBJECT(main_win), "board", board,
+	g_object_set_data_full(G_OBJECT(display), "board", board,
 			       (GtkDestroyNotify) gtk_widget_unref);
+	board = lookup_widget(display, "board");
 	gtk_widget_show(board);
 	gtk_paned_pack1(GTK_PANED(hpaned1), board, TRUE, TRUE);
 	gtk_widget_set_size_request(board, 64, 64);
@@ -161,7 +161,7 @@
 
 	vpaned1 = gtk_vpaned_new();
 	gtk_widget_ref(vpaned1);
-	g_object_set_data_full(G_OBJECT(main_win), "vpaned1", vpaned1,
+	g_object_set_data_full(G_OBJECT(display), "vpaned1", vpaned1,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(vpaned1);
 	gtk_paned_pack2(GTK_PANED(hpaned1), vpaned1, FALSE, FALSE);
@@ -169,21 +169,21 @@
 
 	vbox2 = gtk_vbox_new(TRUE, 15);
 	gtk_widget_ref(vbox2);
-	g_object_set_data_full(G_OBJECT(main_win), "vbox2", vbox2,
+	g_object_set_data_full(G_OBJECT(display), "vbox2", vbox2,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(vbox2);
 	gtk_paned_pack1(GTK_PANED(vpaned1), vbox2, FALSE, FALSE);
 
 	hbox2 = gtk_hbox_new(FALSE, 0);
 	gtk_widget_ref(hbox2);
-	g_object_set_data_full(G_OBJECT(main_win), "hbox2", hbox2,
+	g_object_set_data_full(G_OBJECT(display), "hbox2", hbox2,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(hbox2);
 	gtk_box_pack_start(GTK_BOX(vbox2), hbox2, FALSE, FALSE, 0);
 
 	white_arrow = gtk_arrow_new(GTK_ARROW_RIGHT, GTK_SHADOW_IN);
 	gtk_widget_ref(white_arrow);
-	g_object_set_data_full(G_OBJECT(main_win), "white_arrow",
+	g_object_set_data_full(G_OBJECT(display), "white_arrow",
 			       white_arrow,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(white_arrow);
@@ -191,7 +191,7 @@
 
 	white_time = gtk_label_new(_("White -> 99:99"));
 	gtk_widget_ref(white_time);
-	g_object_set_data_full(G_OBJECT(main_win), "white_time",
+	g_object_set_data_full(G_OBJECT(display), "white_time",
 			       white_time,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(white_time);
@@ -202,14 +202,14 @@
 
 	hbox3 = gtk_hbox_new(FALSE, 0);
 	gtk_widget_ref(hbox3);
-	g_object_set_data_full(G_OBJECT(main_win), "hbox3", hbox3,
+	g_object_set_data_full(G_OBJECT(display), "hbox3", hbox3,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(hbox3);
 	gtk_box_pack_start(GTK_BOX(vbox2), hbox3, TRUE, TRUE, 0);
 
 	black_arrow = gtk_arrow_new(GTK_ARROW_RIGHT, GTK_SHADOW_IN);
 	gtk_widget_ref(black_arrow);
-	g_object_set_data_full(G_OBJECT(main_win), "black_arrow",
+	g_object_set_data_full(G_OBJECT(display), "black_arrow",
 			       black_arrow,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(black_arrow);
@@ -217,7 +217,7 @@
 
 	black_time = gtk_label_new(_("Black -> 99:99"));
 	gtk_widget_ref(black_time);
-	g_object_set_data_full(G_OBJECT(main_win), "black_time",
+	g_object_set_data_full(G_OBJECT(display), "black_time",
 			       black_time,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(black_time);
@@ -228,14 +228,14 @@
 
 	vbox3 = gtk_vbox_new(FALSE, 0);
 	gtk_widget_ref(vbox3);
-	g_object_set_data_full(G_OBJECT(main_win), "vbox3", vbox3,
+	g_object_set_data_full(G_OBJECT(display), "vbox3", vbox3,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(vbox3);
 	gtk_paned_pack2(GTK_PANED(vpaned1), vbox3, FALSE, TRUE);
 
 	last_moves_label = gtk_label_new(_("Last moves"));
 	gtk_widget_ref(last_moves_label);
-	g_object_set_data_full(G_OBJECT(main_win), "last_moves_label",
+	g_object_set_data_full(G_OBJECT(display), "last_moves_label",
 			       last_moves_label,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(last_moves_label);
@@ -244,7 +244,7 @@
 
 	scrolledwindow1 = gtk_scrolled_window_new(NULL, NULL);
 	gtk_widget_ref(scrolledwindow1);
-	g_object_set_data_full(G_OBJECT(main_win), "scrolledwindow1",
+	g_object_set_data_full(G_OBJECT(display), "scrolledwindow1",
 			       scrolledwindow1,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(scrolledwindow1);
@@ -258,7 +258,7 @@
 	gtk_text_view_set_editable(GTK_TEXT_VIEW(last_moves), FALSE);
 	gtk_text_view_set_cursor_visible(GTK_TEXT_VIEW(last_moves), FALSE);
 	gtk_widget_ref(last_moves);
-	g_object_set_data_full(G_OBJECT(main_win), "last_moves",
+	g_object_set_data_full(G_OBJECT(display), "last_moves",
 			       last_moves,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(last_moves);
@@ -269,14 +269,14 @@
 
 	statusbar = gtk_statusbar_new();
 	gtk_widget_ref(statusbar);
-	g_object_set_data_full(G_OBJECT(main_win), "statusbar", statusbar,
+	g_object_set_data_full(G_OBJECT(display), "statusbar", statusbar,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(statusbar);
 	gtk_box_pack_start(GTK_BOX(vbox1), statusbar, FALSE, FALSE, 0);
 
-	g_signal_connect(main_win, "destroy_event",
+	g_signal_connect(display, "destroy_event",
 			 GTK_SIGNAL_FUNC(gtk_main_quit), NULL);
-	g_signal_connect(main_win, "delete_event",
+	g_signal_connect(display, "delete_event",
 			 GTK_SIGNAL_FUNC(ExitDialog), NULL);
 	g_signal_connect(board, "configure_event",
 			 GTK_SIGNAL_FUNC(on_board_configure_event), NULL);
@@ -292,7 +292,7 @@
 	g_signal_connect_after(board, "drag_drop",
 			       GTK_SIGNAL_FUNC(on_board_drag_drop), NULL);
 
-	g_object_set_data(G_OBJECT(main_win), "tooltips", tooltips);
+	g_object_set_data(G_OBJECT(display), "tooltips", tooltips);
 
-	return main_win;
+	return display;
 }
Index: chess/main.c
===================================================================
--- chess/main.c	(revision 8613)
+++ chess/main.c	(working copy)
@@ -64,8 +64,13 @@
 	gtk_init(&argc, &argv);
 	initialize_about_dialog();
 
+	init_ggz_gtk(_("GGZ Chess"), TRUE,
+		     CHESS_PROTOCOL_ENGINE, CHESS_PROTOCOL_VERSION,
+		     net_handle_input, NULL);
+	mod = ggz_gtk_get_ggzmod();
+
 	main_win = create_main_win();
-	gtk_widget_realize(main_win);
+	gtk_widget_show_all(main_win);
 	/* HACK: we have to call gtk_widget_realize (above) before calling
 	 * board_init because board_init needs to access main_win->window.
 	 * However we have to call board_init before gtk_widget_show (below)
@@ -79,14 +84,9 @@
 	gtk_widget_show(main_win);
 	game_update(CHESS_EVENT_INIT, NULL);
 
-	mod = init_ggz_gtk(GTK_WINDOW(main_win), net_handle_input);
-	if (!mod) return EXIT_FAILURE;
-
 	gtk_main();
 
-	if (ggzmod_disconnect(mod) < 0)
-		return -2;
-	ggzmod_free(mod);
+	free_ggz_gtk();
 
 	cleanup_debugging();
 
Index: chess/board.c
===================================================================
--- chess/board.c	(revision 8613)
+++ chess/board.c	(working copy)
@@ -35,6 +35,8 @@
 #include <gtk/gtk.h>
 #include <ggz.h>
 
+#include "ggz_gtk.h"
+
 #include "board.h"
 #include "game.h"
 #include "net.h"
@@ -116,6 +118,8 @@
 
 void board_init(void)
 {
+	GtkWidget *window = GTK_WIDGET(ggz_gtk_get_main_window());
+
 	if (pieces[0]) {
 		return;
 	}
@@ -123,7 +127,7 @@
 	board_resized(PIXSIZE * 8, PIXSIZE * 8);
 
 	/* Init the GC */
-	piece_gc = gdk_gc_new(main_win->window);
+	piece_gc = gdk_gc_new(window->window);
 	gdk_gc_set_fill(piece_gc, GDK_TILED);
 	/* Colors */
 	gdk_color_parse("Tan", &bg_color[0]);
@@ -136,15 +140,15 @@
 	gdk_colormap_alloc_color(gtk_widget_get_colormap(main_win),
 				 &bg_color[2], TRUE, TRUE);
 	/* Background GC */
-	light_gc = gdk_gc_new(main_win->window);
+	light_gc = gdk_gc_new(window->window);
 	gdk_gc_set_fill(light_gc, GDK_SOLID);
 	gdk_gc_set_foreground(light_gc, &bg_color[0]);
 	gdk_gc_set_background(light_gc, &bg_color[0]);
-	dark_gc = gdk_gc_new(main_win->window);
+	dark_gc = gdk_gc_new(window->window);
 	gdk_gc_set_fill(dark_gc, GDK_SOLID);
 	gdk_gc_set_foreground(dark_gc, &bg_color[1]);
 	gdk_gc_set_background(dark_gc, &bg_color[1]);
-	red_gc = gdk_gc_new(main_win->window);
+	red_gc = gdk_gc_new(window->window);
 	gdk_gc_set_fill(red_gc, GDK_SOLID);
 	gdk_gc_set_foreground(red_gc, &bg_color[2]);
 	gdk_gc_set_background(red_gc, &bg_color[2]);
@@ -245,8 +249,7 @@
 
 	board = lookup_widget(main_win, "board");
 
-	target->target = malloc(sizeof(char) * 6);
-	strcpy(target->target, "board");
+	target->target = strdup("board");
 	target->flags = GTK_TARGET_SAME_WIDGET;
 	target->info = 233;
 
Index: chess/Makefile.am
===================================================================
--- chess/Makefile.am	(revision 8613)
+++ chess/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = libcgc bitmaps
 
 AM_CPPFLAGS = -I$(top_srcdir)/common $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		 $(GTK_CFLAGS)
+		 $(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -30,8 +30,8 @@
 ggz_chess_LDADD =	$(top_builddir)/common/libgtk-games.a		\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)	\
 			libcgc/libcgc.a					\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_chess_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_chess_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 
 noinst_HEADERS = version.m4
Index: combat/interface.c
===================================================================
--- combat/interface.c	(revision 8613)
+++ combat/interface.c	(working copy)
@@ -57,8 +57,7 @@
 	};
 	GtkWidget *menubar;
 
-	menubar = ggz_create_menus(window,
-				   items,
+	menubar = ggz_create_menus(items,
 				   sizeof(items) / sizeof(items[0]));
 
 	set_menu_sensitive(TABLE_PLAYER_LIST, FALSE);
Index: combat/main.c
===================================================================
--- combat/main.c	(revision 8613)
+++ combat/main.c	(working copy)
@@ -73,6 +73,11 @@
 	gtk_init(&argc, &argv);
 	init_about_dialog();
 
+	init_ggz_gtk(_("Combat"), FALSE,
+		     COMBAT_PROTOCOL_ENGINE, COMBAT_PROTOCOL_VERSION,
+		     game_handle_io, NULL);
+	mod = ggz_gtk_get_ggzmod();
+
 	game_init();
 
 	// TODO: Check for directory the user wants
@@ -82,8 +87,6 @@
 	main_win = create_main_window();
 	gtk_widget_show(main_win);
 
-	mod = init_ggz_gtk(GTK_WINDOW(main_win), game_handle_io);
-
 	gtk_main();
 
 	if (ggzmod_disconnect(mod) < 0)
Index: combat/Makefile.am
===================================================================
--- combat/Makefile.am	(revision 8613)
+++ combat/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = . pixmaps maps
 
 AM_CPPFLAGS = -I$(top_srcdir)/common $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -29,8 +29,8 @@
 
 ggz_combat_LDADD =	$(top_builddir)/common/libgtk-games.a		\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)			\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_combat_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_combat_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 
 noinst_HEADERS = version.m4
Index: dots/main.c
===================================================================
--- dots/main.c	(revision 8613)
+++ dots/main.c	(working copy)
@@ -91,8 +91,10 @@
 	game.state = DOTS_STATE_INIT;
 	game_init();
 
-	mod = init_ggz_gtk(GTK_WINDOW(main_win), game_handle_io);
-	init_chat(mod);
+ 	init_ggz_gtk(_("Connect the Dots"), FALSE,
+ 		     DOTS_PROTOCOL_ENGINE, DOTS_PROTOCOL_VERSION,
+ 		     game_handle_io, NULL);
+ 	mod = ggz_gtk_get_ggzmod();
 
 	gtk_main();
 
@@ -256,7 +258,6 @@
 	/* Setup the main board now */
 	if (main_win == NULL)
 		main_win = create_dlg_main();
-	ggz_game_main_window = GTK_WINDOW(main_win);	/* HACK */
 	l1 = g_object_get_data(G_OBJECT(main_win), "lbl_score0");
 	l2 = g_object_get_data(G_OBJECT(main_win), "lbl_score1");
 	gtk_label_set_text(GTK_LABEL(l1), _("No Score"));
Index: dots/Makefile.am
===================================================================
--- dots/Makefile.am	(revision 8613)
+++ dots/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = .
 
 AM_CPPFLAGS = -I$(top_srcdir)/common $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		$(GTK_CFLAGS)
+		$(GTK_CFLAGS) $(GGZ_GTK_INCLUDES)
 
 EXTRA_DIST = module.dsc.in
 
@@ -30,8 +30,8 @@
 
 ggz_dots_LDADD =	$(top_builddir)/common/libgtk-games.a		\
 			$(GTK_LIBS) $(INTLLIBS) $(LDADD)			\
-			$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_dots_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+			$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_dots_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 
 noinst_HEADERS = version.m4
