Index: tictactoe/game.h
===================================================================
--- tictactoe/game.h	(revision 8136)
+++ tictactoe/game.h	(working copy)
@@ -71,6 +71,7 @@
 
 /* Setup functions */
 void game_init(void);
+void game_free(void);
 
 /* Functions to handle incoming data from server*/
 int receive_seat(void);
Index: tictactoe/main_win.c
===================================================================
--- tictactoe/main_win.c	(revision 8136)
+++ tictactoe/main_win.c	(working copy)
@@ -40,6 +40,7 @@
 #include "dlg_about.h"
 #include "dlg_players.h"
 #include "dlg_exit.h"
+#include "ggz_gtk.h"
 #include "menus.h"
 #include "main_win.h"
 #include "game.h"
@@ -279,7 +280,7 @@
 }
 
 
-static GtkWidget *create_menus(GtkWidget * window)
+static GtkWidget *create_menus(void)
 {
 	GtkWidget *menubar;
 	GtkItemFactoryEntry items[] = {
@@ -287,8 +288,7 @@
 		HELP_MENU
 	};
 
-	menubar = ggz_create_menus(window,
-				   items,
+	menubar = ggz_create_menus(items,
 				   sizeof(items) / sizeof(items[0]));
 
 	set_menu_sensitive(TABLE_SYNC, FALSE);
@@ -300,7 +300,7 @@
 
 GtkWidget *create_main_win(void)
 {
-	GtkWidget *main_win;
+	GtkWidget *display;
 	GtkWidget *main_box;
 	GtkWidget *menubar;
 	GtkWidget *drawingarea;
@@ -310,52 +310,50 @@
 
 	accel_group = gtk_accel_group_new();
 
-	main_win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-	g_object_set_data(G_OBJECT(main_win), "main_win", main_win);
-	gtk_window_set_title(GTK_WINDOW(main_win), _("Tic-Tac-Toe"));
+	display = ggz_gtk_get_display_area();
 
 	main_box = gtk_vbox_new(FALSE, 0);
 	gtk_widget_ref(main_box);
-	g_object_set_data_full(G_OBJECT(main_win), "main_box", main_box,
+	g_object_set_data_full(G_OBJECT(display), "main_box", main_box,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(main_box);
-	gtk_container_add(GTK_CONTAINER(main_win), main_box);
+	gtk_container_add(GTK_CONTAINER(display), main_box);
 
-	menubar = create_menus(main_win);
+	menubar = create_menus();
 	gtk_widget_ref(menubar);
-	g_object_set_data_full(G_OBJECT(main_win), "menubar", menubar,
+	g_object_set_data_full(G_OBJECT(display), "menubar", menubar,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(menubar);
 	gtk_box_pack_start(GTK_BOX(main_box), menubar, FALSE, FALSE, 0);
 
 	drawingarea = gtk_drawing_area_new();
 	gtk_widget_ref(drawingarea);
-	g_object_set_data_full(G_OBJECT(main_win), "drawingarea",
+	g_object_set_data_full(G_OBJECT(display), "drawingarea",
 			       drawingarea,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(drawingarea);
 	gtk_box_pack_start(GTK_BOX(main_box), drawingarea, TRUE, TRUE, 0);
-	gtk_widget_set_size_request(drawingarea, 200, 200);
+	gtk_widget_set_size_request(drawingarea, 500, 400);
 	gtk_widget_set_events(drawingarea,
 			      GDK_EXPOSURE_MASK | GDK_BUTTON_PRESS_MASK);
 
 	statusbar = gtk_statusbar_new();
 	gtk_widget_ref(statusbar);
-	g_object_set_data_full(G_OBJECT(main_win), "statusbar", statusbar,
+	g_object_set_data_full(G_OBJECT(display), "statusbar", statusbar,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(statusbar);
 	gtk_box_pack_start(GTK_BOX(main_box), statusbar, FALSE, FALSE, 0);
 
 	chat = create_chat_widget();
 	gtk_widget_ref(chat);
-	g_object_set_data_full(G_OBJECT(main_win), "chat", chat,
+	g_object_set_data_full(G_OBJECT(display), "chat", chat,
 			       (GtkDestroyNotify) gtk_widget_unref);
 	gtk_widget_show(chat);
 	gtk_box_pack_start(GTK_BOX(main_box), chat, FALSE, FALSE, 0);
 
-	g_signal_connect(GTK_OBJECT(main_win), "delete_event",
+	g_signal_connect(GTK_OBJECT(display), "delete_event",
 			 GTK_SIGNAL_FUNC(main_exit), NULL);
-	g_signal_connect(GTK_OBJECT(main_win), "realize",
+	g_signal_connect(GTK_OBJECT(display), "realize",
 			 GTK_SIGNAL_FUNC(on_main_win_realize), NULL);
 	g_signal_connect(GTK_OBJECT(drawingarea), "configure_event",
 			 GTK_SIGNAL_FUNC(configure_handle), NULL);
@@ -364,7 +362,8 @@
 	g_signal_connect(GTK_OBJECT(drawingarea), "button_press_event",
 			 GTK_SIGNAL_FUNC(get_move), NULL);
 
-	gtk_window_add_accel_group(GTK_WINDOW(main_win), accel_group);
+	gtk_window_add_accel_group(GTK_WINDOW(ggz_gtk_get_main_window()),
+				   accel_group);
 
-	return main_win;
+	return display;
 }
Index: tictactoe/main.c
===================================================================
--- tictactoe/main.c	(revision 8136)
+++ tictactoe/main.c	(working copy)
@@ -58,22 +58,17 @@
 	gtk_init(&argc, &argv);
 	initialize_about_dialog();
 
-	main_win = create_main_win();
-	gtk_widget_show(main_win);
-
 	game_init();
-	display_board();
 
-	init_chat(game.ggzmod);
+	main_win = create_main_win();
+	gtk_widget_show_all(GTK_WIDGET(ggz_gtk_get_main_window()));
 
 	game_status(_("Watching the game..."));
 
 	gtk_main();
 
-	if (ggzmod_disconnect(game.ggzmod) < 0)
-		return -1;
+	game_free();
 
-	ggzmod_free(game.ggzmod);
 	return 0;
 }
 
@@ -276,11 +271,19 @@
 
 	game.state = STATE_INIT;
 
-	game.ggzmod = init_ggz_gtk(GTK_WINDOW(main_win), game_handle_io);
+	init_ggz_gtk(_("Tic-Tac-Toe"),
+		     "TicTacToe", "4",
+		     game_handle_io);
+	game.ggzmod = ggz_gtk_get_ggzmod();
 	game.num = -1;
 }
 
+void game_free(void)
+{
+	free_ggz_gtk();
+}
 
+
 int send_my_move(void)
 {
 	if (game.num < 0)
Index: tictactoe/Makefile.am
===================================================================
--- tictactoe/Makefile.am	(revision 8136)
+++ tictactoe/Makefile.am	(working copy)
@@ -4,7 +4,7 @@
 SUBDIRS = .
 
 AM_CPPFLAGS = -I$(top_srcdir)/common $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) \
-		@GTK_CFLAGS@
+		$(GTK_CFLAGS)
 
 EXTRA_DIST = module.dsc.in
 
@@ -24,8 +24,8 @@
 
 ggz_ttt_LDADD =	$(top_builddir)/common/libgtk-games.a			\
 		@GTK_LIBS@ @INTLLIBS@ $(LDADD)		\
-		$(LIB_GGZMOD) $(LIB_GGZ)
-ggz_ttt_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS)
+		$(LIB_GGZMOD) $(LIB_GGZ) $(LIB_GGZ_GTK)
+ggz_ttt_LDFLAGS = $(GGZMOD_LDFLAGS) $(LIBGGZ_LDFLAGS) $(GGZ_GTK_LDFLAGS)
 
 pixmapdir = $(ggzdatadir)/tictactoe/pixmaps
 dist_pixmap_DATA = o.svg x.svg
Index: common/dlg_exit.c
===================================================================
--- common/dlg_exit.c	(revision 8136)
+++ common/dlg_exit.c	(working copy)
@@ -39,7 +39,7 @@
 {
 	gtk_widget_destroy(GTK_WIDGET(dialog));
 	if (response == GTK_RESPONSE_YES) {
-		gtk_main_quit();
+		ggz_game_closed();
 	}
 }
 
@@ -100,12 +100,14 @@
 {
 	static GtkWidget *dialog = NULL;
 
-	if (dialog) {
+	if (ggz_gtk_is_embedded() && can_return) {
+		ggz_game_closed();
+	} else if (dialog) {
 		gdk_window_show(dialog->window);
 		gdk_window_raise(dialog->window);
 	} else {
 		dialog =
-		    make_exit_dialog(can_return, ggz_game_main_window);
+		    make_exit_dialog(can_return, ggz_gtk_get_main_window());
 
 		g_signal_connect(dialog, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
Index: common/dlg_about.c
===================================================================
--- common/dlg_about.c	(revision 8136)
+++ common/dlg_about.c	(working copy)
@@ -114,7 +114,7 @@
 		gdk_window_show(dlg_about->window);
 		gdk_window_raise(dlg_about->window);
 	} else {
-		dlg_about = create_dlg_about(ggz_game_main_window);
+		dlg_about = create_dlg_about(ggz_gtk_get_main_window());
 		g_signal_connect(dlg_about, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
 				 &dlg_about);
Index: common/ggz_gtk.h
===================================================================
--- common/ggz_gtk.h	(revision 8136)
+++ common/ggz_gtk.h	(working copy)
@@ -28,7 +28,14 @@
 #include "ggzintl.h"
 #include "dlg_players.h"
 
-extern GtkWindow *ggz_game_main_window;
+void init_ggz_gtk(const char *window_title,
+		  const char *prot_engine, const char *prot_version,
+		  gboolean(*game_handler) (GGZMod * mod));
+void free_ggz_gtk(void);
 
-GGZMod *init_ggz_gtk(GtkWindow * main_window,
-		     gboolean(*game_handler) (GGZMod * mod));
+void ggz_game_closed(void);
+
+GtkWindow *ggz_gtk_get_main_window(void);
+GtkWidget *ggz_gtk_get_display_area(void);
+GGZMod *ggz_gtk_get_ggzmod(void);
+gboolean ggz_gtk_is_embedded(void);
Index: common/dlg_players.c
===================================================================
--- common/dlg_players.c	(revision 8136)
+++ common/dlg_players.c	(working copy)
@@ -83,15 +83,15 @@
 	update_player_lists();
 }
 
-void init_player_list(GGZMod * ggzmod)
+void init_player_list(void)
 {
-	ggz = ggzmod;
-	assert(ggz);
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_SEAT,
+	ggz = ggz_gtk_get_ggzmod();
+	assert(ggz != NULL);
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_SEAT,
 			   handle_ggz_seat_event);
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_SPECTATOR_SEAT,
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_SPECTATOR_SEAT,
 			   handle_ggz_seat_event);
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_STATE,
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_STATE,
 			   handle_ggz_seat_event);
 }
 
@@ -100,7 +100,7 @@
 	int p, num;
 	GtkListStore *store = g_object_get_data(G_OBJECT(tree), "store");
 
-	assert(ggz);
+	assert(ggz != NULL);
 
 	gtk_list_store_clear(store);
 	num_entries = 0;
@@ -311,7 +311,7 @@
 		gdk_window_show(dlg_players->window);
 		gdk_window_raise(dlg_players->window);
 	} else {
-		dlg_players = create_dlg_players(ggz_game_main_window);
+		dlg_players = create_dlg_players(ggz_gtk_get_main_window());
 		g_signal_connect(dlg_players, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
 				 &dlg_players);
@@ -351,6 +351,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	if (spectator)
 		name = ggzmod_get_spectator_seat(ggz, seat_num).name;
 	else
@@ -367,6 +368,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	assert(!spectator);
 	ggzmod_request_sit(ggz, seat_num);
 }
@@ -378,6 +380,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	assert(!spectator);
 	ggzmod_request_bot(ggz, seat_num);
 }
@@ -389,6 +392,7 @@
 
 	decode_seat(data, &spectator, &seat_num);
 
+	assert(ggz != NULL);
 	assert(!spectator);
 	ggzmod_request_open(ggz, seat_num);
 }
@@ -402,6 +406,7 @@
 	int is_spectator, my_seat_num;
 	const char *my_name;
 
+	assert(ggz != NULL);
 	my_name = ggzmod_get_player(ggz, &is_spectator, &my_seat_num);
 
 	assert((seat || sseat) && !(seat && sseat));
@@ -532,13 +537,16 @@
 				   &is_spectator, PLAYER_COLUMN_SEATNUM,
 				   &seatnum, -1);
 
+		assert(ggz != NULL);
 		if (is_spectator) {
 			GGZSpectatorSeat sseat;
+
 			sseat = ggzmod_get_spectator_seat(ggz, seatnum);
 			popup_player_menu(NULL, &sseat,
 					  buttonevent->button);
 		} else {
 			GGZSeat seat = ggzmod_get_seat(ggz, seatnum);
+
 			popup_player_menu(&seat, NULL,
 					  buttonevent->button);
 		}
@@ -549,10 +557,12 @@
 
 void do_sit(void)
 {
+	assert(ggz != NULL);
 	ggzmod_request_sit(ggz, -1);
 }
 
 void do_stand(void)
 {
+	assert(ggz != NULL);
 	ggzmod_request_stand(ggz);
 }
Index: common/dlg_chat.c
===================================================================
--- common/dlg_chat.c	(revision 8136)
+++ common/dlg_chat.c	(working copy)
@@ -30,6 +30,7 @@
 #  include <config.h>	/* Site-specific config */
 #endif
 
+#include <assert.h>
 #include <stdio.h>
 
 #include <gtk/gtk.h>
@@ -78,10 +79,11 @@
 	}
 }
 
-void init_chat(GGZMod * ggzmod)
+void init_chat(void)
 {
-	ggz = ggzmod;
-	ggzmod_set_handler(ggzmod, GGZMOD_EVENT_CHAT,
+	ggz = ggz_gtk_get_ggzmod();
+	assert(ggz != NULL);
+	ggzmod_set_handler(ggz, GGZMOD_EVENT_CHAT,
 			   handle_ggz_chat_event);
 }
 
@@ -90,6 +92,7 @@
 	const char *theinput = gtk_entry_get_text(w);
 
 	if (*theinput) {
+		assert(ggz != NULL);
 		ggzmod_request_chat(ggz, theinput);
 	}
 
@@ -195,7 +198,7 @@
 		gdk_window_show(dlg_chat->window);
 		gdk_window_raise(dlg_chat->window);
 	} else {
-		dlg_chat = create_dlg_chat(ggz_game_main_window);
+		dlg_chat = create_dlg_chat(ggz_gtk_get_main_window());
 		g_signal_connect(dlg_chat, "destroy",
 				 GTK_SIGNAL_FUNC(gtk_widget_destroyed),
 				 &dlg_chat);
Index: common/dlg_chat.h
===================================================================
--- common/dlg_chat.h	(revision 8136)
+++ common/dlg_chat.h	(working copy)
@@ -30,7 +30,7 @@
  * handler for the CHAT event.  If the game wants its own handler for this
  * event you should register it *after* calling this function, and handle
  * the chat manually. */
-void init_chat(GGZMod * ggzmod);
+void init_chat(void);
 
 /* Creates a widget containing a chatbox. */
 GtkWidget *create_chat_widget(void);
Index: common/dlg_players.h
===================================================================
--- common/dlg_players.h	(revision 8136)
+++ common/dlg_players.h	(working copy)
@@ -32,7 +32,7 @@
    if the game wants its own handlers for these events you should
    register them *after* calling this function, and then be sure to
    call update_player_lists when the events occur. */
-void init_player_list(GGZMod * ggzmod);
+void init_player_list(void);
 
 /* The player list will attach itself to the SEAT and SPECTATOR ggzmod
    events, but if you override them you should call this function instead.
Index: common/menus.c
===================================================================
--- common/menus.c	(revision 8136)
+++ common/menus.c	(working copy)
@@ -34,14 +34,14 @@
 
 #include <assert.h>
 
+#include "ggz_gtk.h"
 #include "menus.h"
 
 static GtkItemFactory *menu = NULL;
 
 static void set_menu_active(const char *item, gboolean active);
 
-GtkWidget *ggz_create_menus(GtkWidget * window,
-			    GtkItemFactoryEntry * items,
+GtkWidget *ggz_create_menus(GtkItemFactoryEntry * items,
 			    const unsigned int num_items)
 {
 	GtkAccelGroup *accel_group = gtk_accel_group_new();
@@ -51,10 +51,9 @@
 	menu =
 	    gtk_item_factory_new(GTK_TYPE_MENU_BAR, "<main>", accel_group);
 	gtk_item_factory_create_items(menu, num_items, items, NULL);
-	gtk_window_add_accel_group(GTK_WINDOW(window), accel_group);
+	gtk_window_add_accel_group(GTK_WINDOW(ggz_gtk_get_main_window()),
+				   accel_group);
 
-	g_object_set_data(G_OBJECT(window), "mbar", menu);
-
 	/* Set default values. */
 	set_menu_active(TABLE_CHAT_WINDOW, TRUE);
 	set_menu_sensitive(TABLE_CHAT_WINDOW, FALSE);
Index: common/Makefile.am
===================================================================
--- common/Makefile.am	(revision 8136)
+++ common/Makefile.am	(working copy)
@@ -3,7 +3,7 @@
 
 SUBDIRS = . cardsets
 
-AM_CPPFLAGS = @GTK_CFLAGS@ $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES)
+AM_CPPFLAGS = $(GTK_CFLAGS) $(GGZMOD_INCLUDES) $(LIBGGZ_INCLUDES) $(GGZ_GTK_INCLUDES)
 
 noinst_LIBRARIES = libgtk-games.a
 
Index: common/menus.h
===================================================================
--- common/menus.h	(revision 8136)
+++ common/menus.h	(working copy)
@@ -68,8 +68,7 @@
 
 /* This function can be easily used (perhaps in conjunction with the
    above macros) to sensitize or desensitize a menu item. */
-GtkWidget *ggz_create_menus(GtkWidget * window,
-			    GtkItemFactoryEntry * items,
+GtkWidget *ggz_create_menus(GtkItemFactoryEntry * items,
 			    const unsigned int num_items);
 GtkWidget *get_menu_item(const char *item);
 void set_menu_sensitive(const char *menu, gboolean sensitive);
Index: common/ggz_gtk.c
===================================================================
--- common/ggz_gtk.c	(revision 8136)
+++ common/ggz_gtk.c	(working copy)
@@ -27,24 +27,31 @@
 #  include <config.h>
 #endif
 
+#include <assert.h>
 #include <stdlib.h>
 
 #include <gtk/gtk.h>
+
 #include <ggzmod.h>
+#include <ggz-gtk.h>
+#include <ggz-embed.h>
 
 #include "dlg_players.h"
 #include "ggz_gtk.h"
 
-GtkWindow *ggz_game_main_window;
+static GtkWidget *main_win, *display_area, *notebook;
+static GGZMod *mod;
+static gboolean embedded;
+static guint ggz_input_id = -1;
 
 static gboolean(*game_server_handler) (GGZMod * mod);
 
-static gboolean handle_ggz(GIOChannel * channel, GIOCondition cond,
-			   gpointer data)
+static void handle_ggz(gpointer data, gint fid, GdkInputCondition cond)
 {
-	GGZMod *mod = data;
-
-	return (ggzmod_dispatch(mod) >= 0);
+	assert(mod != NULL);
+	if (ggzmod_dispatch(mod) < 0) {
+		ggz_game_closed();
+	}
 }
 
 static gboolean handle_game_server(GIOChannel * channel, GIOCondition cond,
@@ -52,6 +59,7 @@
 {
 	GGZMod *mod = data;
 
+	assert(mod != NULL);
 	return (game_server_handler) (mod);
 }
 
@@ -66,30 +74,142 @@
 	g_io_add_watch(channel, G_IO_IN, handle_game_server, mod);
 }
 
-GGZMod *init_ggz_gtk(GtkWindow * main_window,
-		     gboolean(*game_handler) (GGZMod * mod))
+enum pages {
+	PAGE_GGZ,
+	PAGE_GAME
+};
+
+static void ggz_game_launched(void)
 {
-	GIOChannel *channel;
-	GGZMod *mod;
+	/* Connect to GGZ */
+	mod = ggzmod_new(GGZMOD_GAME);
+	ggzmod_set_handler(mod, GGZMOD_EVENT_SERVER,
+			   handle_ggzmod_server);
+	ggzmod_connect(mod);
 
+	ggz_input_id = gtk_input_add_full(ggzmod_get_fd(mod),
+					  GDK_INPUT_READ, handle_ggz,
+					  NULL, NULL, NULL);
+
+	init_player_list();
+	init_chat();
+
+	if (embedded) {
+		gtk_notebook_set_current_page(GTK_NOTEBOOK(notebook),
+					      PAGE_GAME);
+	}
+}
+
+static void ggzmod_close(void)
+{
+	if (ggzmod_disconnect(mod) < 0) {
+		return;
+	}
+
+	ggzmod_free(mod);
+	mod = NULL;
+
+	assert(ggz_input_id != -1);
+	gtk_input_remove(ggz_input_id);
+	ggz_input_id = -1;
+}
+
+void ggz_game_closed(void)
+{
+	if (embedded) {
+		ggz_embed_leave_table();
+		gtk_notebook_set_current_page(GTK_NOTEBOOK(notebook),
+					      PAGE_GGZ);
+		ggzmod_close();
+	} else {
+		gtk_main_quit();
+	}
+}
+
+static void create_main_window(const char *window_title)
+{
+	main_win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+
+	g_object_set_data(G_OBJECT(main_win), "main_win", main_win);
+	gtk_window_set_title(GTK_WINDOW(main_win), window_title);
+
 	if (!ggzmod_is_ggz_mode()) {
+		notebook = gtk_notebook_new();
+
+		/* stop mouse wheel notebook page switching. */
+		g_signal_connect(notebook, "scroll_event",
+				 G_CALLBACK(gtk_true), NULL);
+
+		gtk_notebook_set_show_tabs(GTK_NOTEBOOK(notebook), FALSE);
+		gtk_notebook_set_show_border(GTK_NOTEBOOK(notebook), FALSE);
+
+		gtk_notebook_append_page(GTK_NOTEBOOK(notebook),
+					 ggz_gtk_create_main_area(main_win),
+					 NULL);
+
+		display_area = gtk_vbox_new(FALSE, 0);
+		gtk_notebook_append_page(GTK_NOTEBOOK(notebook),
+					 display_area, NULL);
+
+		gtk_container_add(GTK_CONTAINER(main_win), notebook);
+
+		gtk_widget_show_all(GTK_WIDGET(main_win));
+
+		ggz_gtk_login_raise(NULL);
+#if 0
 		printf(_("This program should only be run from within GGZ."));
 		printf("\n");
 		exit(1);
+#endif
+	} else {
+		display_area = main_win;
 	}
 
-	ggz_game_main_window = main_window;
+}
 
-	/* Connect to GGZ */
-	mod = ggzmod_new(GGZMOD_GAME);
+void init_ggz_gtk(const char *window_title,
+		  const char *prot_engine, const char *prot_version,
+		  gboolean(*game_handler) (GGZMod * mod))
+{
+	if (!ggzmod_is_ggz_mode()) {
+		ggz_gtk_initialize(FALSE,
+				   NULL, ggz_game_launched,
+				   prot_engine, prot_version);
+	}
+	create_main_window(window_title);
+
+	embedded = !ggzmod_is_ggz_mode();
+
 	game_server_handler = game_handler;
-	ggzmod_set_handler(mod, GGZMOD_EVENT_SERVER, handle_ggzmod_server);
-	ggzmod_connect(mod);
+	if (ggzmod_is_ggz_mode()) {
+		ggz_game_launched();
+	}
+}
 
-	channel = g_io_channel_unix_new(ggzmod_get_fd(mod));
-	g_io_add_watch(channel, G_IO_IN, handle_ggz, mod);
+void free_ggz_gtk(void)
+{
+	if (!embedded) {
+		ggzmod_close();
+	}
+}
 
-	init_player_list(mod);
 
+GtkWindow *ggz_gtk_get_main_window(void)
+{
+	return GTK_WINDOW(main_win);
+}
+
+GtkWidget *ggz_gtk_get_display_area(void)
+{
+	return display_area;
+}
+
+GGZMod *ggz_gtk_get_ggzmod(void)
+{
 	return mod;
 }
+
+gboolean ggz_gtk_is_embedded(void)
+{
+	return embedded;
+}
Index: configure.ac
===================================================================
--- configure.ac	(revision 8136)
+++ configure.ac	(working copy)
@@ -45,6 +45,7 @@
 AC_GGZ_LIBGGZ
 AC_GGZ_GGZMOD
 AC_GGZ_CONFIG("true", ignore)
+AC_GGZ_GTK
 AC_GGZ_INTL
 
 dnl Check for header files
