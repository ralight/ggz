? autocomplete.diff
? ggz-gtk-client-0.0.5pre.tar.gz
? ggz-gtk.diff
? gtk-client.kdevprj
? gtk-client.kdevses
? spectators.diff
Index: ggz-gtk/client.c
===================================================================
RCS file: /cvsroot/ggz/ggz/src/frontend/gtk/client.c,v
retrieving revision 1.76
diff -u -r1.76 client.c
--- ggz-gtk/client.c	22 Jun 2002 05:16:36 -0000	1.76
+++ ggz-gtk/client.c	5 Aug 2002 15:46:58 -0000
@@ -23,7 +23,11 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
  */
 
-#include <config.h>
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <assert.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
@@ -54,6 +58,7 @@
 GtkWidget *win_main;
 extern GGZServer *server;
 static gint tablerow = -1;
+static gint spectating = -1;
 
 /*
  * FIXME: There has got to be a better way than
@@ -74,6 +79,7 @@
 static void client_launch_activate(GtkMenuItem *menuitem, gpointer data);
 static void client_join_activate(GtkMenuItem *menuitem, gpointer data);
 static void client_joinm_activate(GtkMenuItem *menuitem, gpointer data);
+static void client_watchm_activate(GtkMenuItem *menuitem, gpointer data);
 static void client_leave_activate(GtkMenuItem *menuitem, gpointer data);
 static void client_properties_activate(GtkMenuItem *menuitem, gpointer data);
 static void client_room_list_activate(GtkMenuItem *menuitem, gpointer data);
@@ -91,6 +97,7 @@
 static void client_disconnect_button_clicked(GtkButton *button, gpointer data);
 static void client_launch_button_clicked(GtkButton *button, gpointer data);
 static void client_join_button_clicked(GtkButton *button, gpointer data);
+static void client_watch_button_clicked(GtkButton *button, gpointer data);
 static void client_leave_button_clicked(GtkButton *button, gpointer data);
 static void client_props_button_clicked(GtkButton *button, gpointer data);
 static void client_stats_button_clicked(GtkButton *button, gpointer data);
@@ -118,6 +125,7 @@
 static int client_get_table_open(guint row);
 static void client_join_room(guint room);				 
 static void client_start_table_join(void);
+static void client_start_table_watch(void);
 static void client_player_friends_click(GtkMenuItem *menuitem, gpointer data);
 static void client_player_ignore_click(GtkMenuItem *menuitem, gpointer data);
 static void client_send_private_message_activate(GtkMenuItem *menuitem, gpointer data);
@@ -207,6 +215,14 @@
 
 
 static void
+client_watchm_activate		(GtkMenuItem	*menuitem,
+				 gpointer	 data)
+{
+	client_start_table_watch();
+}
+
+
+static void
 client_leave_activate		(GtkMenuItem	*menuitem,
 				 gpointer	 data)
 {
@@ -578,6 +594,12 @@
 	client_start_table_join();
 }
 
+static void
+client_watch_button_clicked (GtkButton *button, gpointer data)
+{
+	client_start_table_watch();
+}
+
 
 static void
 client_leave_button_clicked		(GtkButton	*button,
@@ -892,7 +914,46 @@
 	tablerow = -1;
 
 	/* Initialize a game module */
-	if (game_init() == 0) {
+	spectating = 0;
+	if (game_init(0) == 0) {
+		if (game_launch() < 0) {
+			msgbox(_("Error launching game module."), _("Game Error"), MSGBOX_OKONLY, MSGBOX_INFO, MSGBOX_NORMAL);
+			game_destroy();
+		}
+	}
+}
+
+
+static void client_start_table_watch(void)
+{
+	/* Make sure a table is selected */
+	if (tablerow == -1) {
+		msgbox(_("You must highlight a table before "
+			 "you can watch it."), 
+		       _("Error Spectating"), MSGBOX_OKONLY, MSGBOX_INFO, 
+		       MSGBOX_NORMAL);
+		return;
+	}
+
+#if 0 /* We don't check to see if there's an open place to stand around
+	 the table.  Eventually we won't have to. */
+	/* Make sure we select a proper table */
+	if(tablerow <= numtables)
+	{
+		/* Make sure table has open seats */
+		if (client_get_table_open(tablerow) == FALSE) {
+			msgbox("That table is full.", "Error Joining",
+				MSGBOX_OKONLY, MSGBOX_INFO, MSGBOX_NORMAL);	
+			return;
+		}
+	}
+#endif
+
+	tablerow = -1;
+
+	/* Initialize a game module */
+	spectating = 1;
+	if (game_init(1) == 0) {
 		if (game_launch() < 0) {
 			msgbox(_("Error launching game module."), _("Game Error"), MSGBOX_OKONLY, MSGBOX_INFO, MSGBOX_NORMAL);
 			game_destroy();
@@ -909,7 +970,11 @@
 	table_index = client_get_table_index(tablerow);
 	
 	room = ggzcore_server_get_cur_room(server);
-	status = ggzcore_room_join_table(room, table_index);
+	assert(spectating >= 0);
+	if (spectating)
+		status = ggzcore_room_join_table_spectator(room, table_index);
+	else
+		status = ggzcore_room_join_table(room, table_index);
 	
 	if (status < 0) {
 		msgbox(_("Failed to join table.\n Join aborted."), _("Join Error"), MSGBOX_OKONLY, MSGBOX_STOP, MSGBOX_NORMAL);
@@ -940,6 +1005,11 @@
 	gtk_tooltips_set_tip(GTK_TOOLTIPS (client_window_tips), tmp3, _("Launch a new game"), _("Start playing a game at a new table"));
 	tmp3 = lookup_widget(win_main, "join_button");
 	gtk_tooltips_set_tip(GTK_TOOLTIPS (client_window_tips), tmp3, _("Join a game"), _("Join an existing game"));
+	tmp3 = lookup_widget(win_main, "watch_button");
+	gtk_tooltips_set_tip(GTK_TOOLTIPS (client_window_tips), tmp3,
+			     _("Watch (spectate) a game"),
+			     _("Watch an existing game - "
+			       "become a spectator of the table"));
 	tmp3 = lookup_widget(win_main, "leave_button");
 	gtk_tooltips_set_tip(GTK_TOOLTIPS (client_window_tips), tmp3, _("Lave a game"), _("Leave the game you're currently playing"));
 	tmp3 = lookup_widget(win_main, "props_button");
@@ -1084,6 +1154,7 @@
   GtkAccelGroup *game_menu_accels;
   GtkWidget *launch;
   GtkWidget *join;
+  GtkWidget *watch;
   GtkWidget *separator2;
   GtkWidget *leave;
   GtkWidget *edit;
@@ -1117,6 +1188,7 @@
   GtkWidget *disconnect_button;
   GtkWidget *launch_button;
   GtkWidget *join_button;
+  GtkWidget *watch_button;
   GtkWidget *leave_button;
   GtkWidget *props_button;
   GtkWidget *stats_button;
@@ -1296,6 +1368,20 @@
                               GDK_J, GDK_CONTROL_MASK,
                               GTK_ACCEL_VISIBLE);
 
+  watch = gtk_menu_item_new_with_label ("");
+  tmp_key = gtk_label_parse_uline (GTK_LABEL (GTK_BIN (watch)->child),
+                                   _("_Watch"));
+  gtk_widget_add_accelerator (watch, "activate_item", game_menu_accels,
+                              tmp_key, 0, 0);
+  gtk_widget_ref (watch);
+  gtk_object_set_data_full (GTK_OBJECT (win_main), "watch", watch,
+                            (GtkDestroyNotify) gtk_widget_unref);
+  gtk_widget_show (watch);
+  gtk_container_add (GTK_CONTAINER (game_menu), watch);
+  gtk_widget_add_accelerator (watch, "activate", accel_group,
+                              GDK_W, GDK_CONTROL_MASK,
+                              GTK_ACCEL_VISIBLE);
+
   separator2 = gtk_menu_item_new ();
   gtk_widget_ref (separator2);
   gtk_object_set_data_full (GTK_OBJECT (win_main), "separator2", separator2,
@@ -1617,6 +1703,19 @@
   gtk_widget_show (join_button);
   gtk_widget_set_sensitive (join_button, FALSE);
 
+  watch_button = gtk_toolbar_append_element(GTK_TOOLBAR (toolbar),
+					    GTK_TOOLBAR_CHILD_BUTTON,
+					    NULL,
+					    _("Watch"),
+					    NULL, NULL,
+					    NULL, NULL, NULL);
+  gtk_widget_ref (join_button);
+  gtk_object_set_data_full (GTK_OBJECT (win_main), "watch_button",
+			    watch_button,
+			    (GtkDestroyNotify) gtk_widget_unref);
+  gtk_widget_show (watch_button);
+  gtk_widget_set_sensitive (watch_button, FALSE);
+
   leave_button = gtk_toolbar_append_element (GTK_TOOLBAR (toolbar),
                                 GTK_TOOLBAR_CHILD_BUTTON,
                                 NULL,
@@ -1953,6 +2052,9 @@
   gtk_signal_connect (GTK_OBJECT (join), "activate",
                       GTK_SIGNAL_FUNC (client_joinm_activate),
                       NULL);
+  gtk_signal_connect (GTK_OBJECT (watch), "activate",
+                      GTK_SIGNAL_FUNC (client_watchm_activate),
+                      NULL);
   gtk_signal_connect (GTK_OBJECT (leave), "activate",
                       GTK_SIGNAL_FUNC (client_leave_activate),
                       NULL);
@@ -2004,6 +2106,9 @@
   gtk_signal_connect (GTK_OBJECT (join_button), "clicked",
                       GTK_SIGNAL_FUNC (client_join_button_clicked),
                       NULL);
+  gtk_signal_connect (GTK_OBJECT (watch_button), "clicked",
+		      GTK_SIGNAL_FUNC (client_watch_button_clicked),
+		      NULL);
   gtk_signal_connect (GTK_OBJECT (leave_button), "clicked",
                       GTK_SIGNAL_FUNC (client_leave_button_clicked),
                       NULL);
Index: ggz-gtk/game.c
===================================================================
RCS file: /cvsroot/ggz/ggz/src/frontend/gtk/game.c,v
retrieving revision 1.21
diff -u -r1.21 game.c
--- ggz-gtk/game.c	22 Jun 2002 05:16:36 -0000	1.21
+++ ggz-gtk/game.c	5 Aug 2002 15:46:59 -0000
@@ -61,8 +61,8 @@
 extern GGZServer *server;
 extern GtkWidget *win_main;
 
-
-int game_init(void)
+/* Spectate is 1 if we're spectating; 0 if we're playing. */
+int game_init(int spectate)
 {
 	gchar *message;
 	gchar *name;
Index: ggz-gtk/game.h
===================================================================
RCS file: /cvsroot/ggz/ggz/src/frontend/gtk/game.h,v
retrieving revision 1.4
diff -u -r1.4 game.h
--- ggz-gtk/game.h	22 Jun 2002 05:16:36 -0000	1.4
+++ ggz-gtk/game.h	5 Aug 2002 15:46:59 -0000
@@ -26,7 +26,11 @@
 
 #include "ggzcore.h"
 
-int game_init(void);
+/** Initialize a game client.
+ *
+ *  @param spectating 1 if we're spectating, 0 if we're joining
+ */
+int game_init(int spectating);
 
 int game_launch(void);
 
Index: ggz-gtk/ggzclient.c
===================================================================
RCS file: /cvsroot/ggz/ggz/src/frontend/gtk/ggzclient.c,v
retrieving revision 1.15
diff -u -r1.15 ggzclient.c
--- ggz-gtk/ggzclient.c	22 Jun 2002 05:16:36 -0000	1.15
+++ ggz-gtk/ggzclient.c	5 Aug 2002 15:46:59 -0000
@@ -334,6 +334,8 @@
 		gtk_widget_set_sensitive(tmp, FALSE);
 		tmp = lookup_widget(win_main, "join_button");
 		gtk_widget_set_sensitive(tmp, FALSE);
+		tmp = lookup_widget(win_main, "watch_button");
+		gtk_widget_set_sensitive(tmp, FALSE);
 	}else{
 		arg[0].name = "user_data";
 		tmp = lookup_widget(win_main, "table_vpaned");
@@ -343,6 +345,8 @@
 		gtk_widget_set_sensitive(tmp, TRUE);
 		tmp = lookup_widget(win_main, "join_button");
 		gtk_widget_set_sensitive(tmp, TRUE);
+		tmp = lookup_widget(win_main, "watch_button");
+		gtk_widget_set_sensitive(tmp, TRUE);
 	}
 
 	return GGZ_HOOK_OK;
@@ -586,6 +590,9 @@
 		tmp = lookup_widget(win_main, "join_button");
 		gtk_widget_set_sensitive(tmp, FALSE);
 
+		tmp = lookup_widget(win_main, "watch_button");
+		gtk_widget_set_sensitive(tmp, FALSE);
+
 		tmp = lookup_widget(win_main, "leave_button");
 		gtk_widget_set_sensitive(tmp, FALSE);
 		
@@ -685,6 +692,9 @@
 		tmp = lookup_widget(win_main, "join_button");
 		gtk_widget_set_sensitive(tmp, TRUE);
 
+		tmp = lookup_widget(win_main, "watch_button");
+		gtk_widget_set_sensitive(tmp, TRUE);
+
 		/* Client area */
 		tmp = lookup_widget(win_main, "room_clist");
 		gtk_widget_set_sensitive(tmp, TRUE);
@@ -710,6 +720,9 @@
 		tmp = lookup_widget(win_main, "join_button");
 		gtk_widget_set_sensitive(tmp, FALSE);
 
+		tmp = lookup_widget(win_main, "watch_button");
+		gtk_widget_set_sensitive(tmp, FALSE);
+
 		/* Menu bar */
 		tmp = lookup_widget(win_main, "launch");
 		gtk_widget_set_sensitive(tmp, FALSE);
@@ -726,6 +739,9 @@
 		tmp = lookup_widget(win_main, "join_button");
 		gtk_widget_set_sensitive(tmp, FALSE);
 
+		tmp = lookup_widget(win_main, "watch_button");
+		gtk_widget_set_sensitive(tmp, FALSE);
+
 		/* Menu bar */
 		tmp = lookup_widget(win_main, "launch");
 		gtk_widget_set_sensitive(tmp, FALSE);
@@ -773,6 +789,9 @@
 		gtk_widget_set_sensitive(tmp, FALSE);
 		
 		tmp = lookup_widget(win_main, "join_button");
+		gtk_widget_set_sensitive(tmp, FALSE);
+
+		tmp = lookup_widget(win_main, "watch_button");
 		gtk_widget_set_sensitive(tmp, FALSE);
 
 		tmp = lookup_widget(win_main, "leave_button");
Index: ggz-gtk/launch.c
===================================================================
RCS file: /cvsroot/ggz/ggz/src/frontend/gtk/launch.c,v
retrieving revision 1.32
diff -u -r1.32 launch.c
--- ggz-gtk/launch.c	22 Jun 2002 05:16:36 -0000	1.32
+++ ggz-gtk/launch.c	5 Aug 2002 15:46:59 -0000
@@ -289,7 +289,7 @@
 	}
 
 	/* Create new game object */
-	if (game_init() == 0) {
+	if (game_init(0) == 0) {
 		if (game_launch() < 0) {
 			msgbox(_("Error launching game module."), _("Game Error"), MSGBOX_OKONLY, MSGBOX_INFO, MSGBOX_NORMAL);
 			game_destroy();
