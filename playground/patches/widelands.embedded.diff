? ip.c
? widelands
? src/native-debug
? src/ui/ui_fs_menus/fullscreen_menu_updates.cc
? src/ui/ui_fs_menus/fullscreen_menu_updates.h
? src/ui/ui_fs_menus/minidom.cc
? src/ui/ui_fs_menus/minidom.h
? tribes/romans/buildings/castle
? tribes/romans/buildings/storehouse
Index: Makefile
===================================================================
RCS file: /cvsroot/widelands/widelands/Makefile,v
retrieving revision 1.47
diff -u -r1.47 Makefile
--- Makefile	4 Jan 2005 13:22:50 -0000	1.47
+++ Makefile	8 Jan 2005 18:33:39 -0000
@@ -10,7 +10,7 @@
 
 # Compile time includes
 # Use the GGZ Gamingzone? Enable for releases.
-USE_GGZ:=NO
+USE_GGZ:=YES
 
 # Is this a cross compile?
 ifndef CROSS
Index: src/main.cc
===================================================================
RCS file: /cvsroot/widelands/widelands/src/main.cc,v
retrieving revision 1.50
diff -u -r1.50 main.cc
--- src/main.cc	4 Jan 2005 13:22:50 -0000	1.50
+++ src/main.cc	8 Jan 2005 18:33:55 -0000
@@ -285,6 +285,17 @@
             }
             break;
          }
+			else if(code == Fullscreen_Menu_NetSetup::GGZGAME) {
+				if(NetGGZ::ref()->host()) netgame = new NetHost();
+				else
+				{
+					while(!NetGGZ::ref()->ip()) NetGGZ::ref()->data();
+
+					IPaddress peer;
+					SDLNet_ResolveHost (&peer, NetGGZ::ref()->ip(), WIDELANDS_PORT);
+					netgame = new NetClient(&peer);
+				}
+			}
 			else
 			    break;
 			
Index: src/network.cc
===================================================================
RCS file: /cvsroot/widelands/widelands/src/network.cc,v
retrieving revision 1.15
diff -u -r1.15 network.cc
--- src/network.cc	7 Jan 2005 12:42:36 -0000	1.15
+++ src/network.cc	8 Jan 2005 18:33:56 -0000
@@ -920,14 +920,16 @@
 
 static NetGGZ *ggzobj = 0;
 #ifdef HAVE_GGZ
-static GGZMod *mod;
-static GGZServer *ggzserver;
+static GGZMod *mod = 0;
+static GGZServer *ggzserver = 0;
 #endif
 
 NetGGZ::NetGGZ()
 {
-	use_ggz = 0;
+	use_ggz = false;
 	fd = -1;
+	channelfd = -1;
+	gamefd = -1;
 	ip_address = NULL;
 }
 
@@ -941,14 +943,12 @@
 {
 	use_ggz = true;
 	printf(">> GGZ: initialized\n");
-
-	//initcore(); /* FIXME: embedded ggzcore */
 }
 
 bool NetGGZ::used()
 {
 	return use_ggz;
-	printf(">> GGZ: is used\n");
+	//printf(">> GGZ: is used\n");
 }
 
 bool NetGGZ::connect()
@@ -981,6 +981,8 @@
 		select(fd + 1, &fdset, NULL, NULL, &timeout);
 		ggzmod_dispatch(mod);
 		//printf("GGZ ## timeout!\n");
+		if(usedcore())
+			datacore();
 	}
 
 	return true;
@@ -1021,8 +1023,16 @@
 	if(ret <= 0) return;
 	printf("GGZ ## select() returns: %i for fd %i\n", ret, fd);
 
-	ggz_read_int(fd, &op);
-	printf("GGZ ## received opcode: %i\n", op);
+	ret = ggz_read_int(fd, &op);
+	printf("GGZ ## received opcode: %i (%i)\n", op, ret);
+	if(ret < 0)
+	{
+		close(fd);
+		ggzmod_disconnect(mod);
+		ggzmod_free(mod);
+		use_ggz = false;
+		return;
+	}
 
 	switch(op)
 	{
@@ -1060,6 +1070,8 @@
 	do
 	{
 		ggzmod_dispatch(mod);
+		if(usedcore())
+			datacore();
 		ggzmod_get_player(mod, &spectator, &seat);
 	}
 	while(seat == -1);
@@ -1085,9 +1097,8 @@
 
 	printf("GGZCORE ## initialization\n");
 	ggzcore_login = true;
-	use_ggz = false; /* FIXME: use_ggz != use_ggzcore */
 
-	opt.flags = (GGZOptionFlags)(GGZ_OPT_PARSER | GGZ_OPT_MODULES);
+	opt.flags = (GGZOptionFlags)(GGZ_OPT_EMBEDDED);
 	ret = ggzcore_init(opt);
 
 	ggzserver = ggzcore_server_new();
@@ -1100,6 +1111,7 @@
 	ggzcore_server_add_event_hook(ggzserver, GGZ_NEGOTIATE_FAIL, &NetGGZ::callback_server);
 	ggzcore_server_add_event_hook(ggzserver, GGZ_LOGIN_FAIL, &NetGGZ::callback_server);
 	ggzcore_server_add_event_hook(ggzserver, GGZ_ENTER_FAIL, &NetGGZ::callback_server);
+	ggzcore_server_add_event_hook(ggzserver, GGZ_CHANNEL_FAIL, &NetGGZ::callback_server);
 
 	ggzcore_server_add_event_hook(ggzserver, GGZ_ROOM_LIST, &NetGGZ::callback_server);
 	ggzcore_server_add_event_hook(ggzserver, GGZ_TYPE_LIST, &NetGGZ::callback_server);
@@ -1107,14 +1119,40 @@
 	ggzcore_server_add_event_hook(ggzserver, GGZ_NET_ERROR, &NetGGZ::callback_server);
 	ggzcore_server_add_event_hook(ggzserver, GGZ_PROTOCOL_ERROR, &NetGGZ::callback_server);
 
+	ggzcore_server_add_event_hook(ggzserver, GGZ_CHANNEL_CONNECTED, &NetGGZ::callback_server);
+	ggzcore_server_add_event_hook(ggzserver, GGZ_CHANNEL_READY, &NetGGZ::callback_server);
+
 	ggzcore_server_set_hostinfo(ggzserver, "live.ggzgamingzone.org", 5688, 0);
 	ggzcore_server_connect(ggzserver);
 
 	printf("GGZCORE ## start loop\n");
 	while(ggzcore_login)
+		datacore();
+	printf("GGZCORE ## end loop\n");
+#endif
+}
+
+bool NetGGZ::usedcore()
+{
+	return (ggzserver != 0);
+}
+
+void NetGGZ::datacore()
+{
+#ifdef HAVE_GGZ
+	GGZGame *game;
+
+	if(!ggzserver) return;
+	if(ggzcore_server_data_is_pending(ggzserver))
+		ggzcore_server_read_data(ggzserver, ggzcore_server_get_fd(ggzserver));
+
+	if(channelfd != -1)
+		ggzcore_server_read_data(ggzserver, ggzcore_server_get_channel(ggzserver));
+
+	if(gamefd != -1)
 	{
-		if(ggzcore_server_data_is_pending(ggzserver))
-			ggzcore_server_read_data(ggzserver, ggzcore_server_get_fd(ggzserver));
+		game = ggzcore_server_get_cur_game(ggzserver);
+		ggzcore_game_read_data(game);
 	}
 #endif
 }
@@ -1139,10 +1177,22 @@
 }
 #endif
 
+#ifdef HAVE_GGZ
+GGZHookReturn NetGGZ::callback_game(unsigned id, void *data, void *user)
+{
+	printf("GGZCORE/game ## callback: %i\n", id);
+	ggzobj->event_game(id, data);
+
+	return GGZ_HOOK_OK;
+}
+#endif
+
 void NetGGZ::event_server(unsigned int id, void *data)
 {
 #ifdef HAVE_GGZ
 	GGZRoom *room;
+	GGZGameType *type;
+	GGZGame *game;
 	int num, i;
 	int joined;
 
@@ -1158,6 +1208,7 @@
 			break;
 		case GGZ_LOGGED_IN:
 			printf("GGZCORE ## -- logged in\n");
+			ggzcore_server_list_gametypes(ggzserver, 0);
 			ggzcore_server_list_rooms(ggzserver, -1, 1);
 			break;
 		case GGZ_ENTERED:
@@ -1173,11 +1224,15 @@
 			for(i = 0; i < num; i++)
 			{
 				room = ggzcore_server_get_nth_room(ggzserver, i);
-				if(!strcmp(ggzcore_room_get_name(room), "TicTacToe"))
+				type = ggzcore_room_get_gametype(room);
+				if(type)
 				{
-					ggzcore_server_join_room(ggzserver, i);
-					joined = 1;
-					break;
+					if(!strcmp(ggzcore_gametype_get_name(type), "Widelands"))
+					{
+						ggzcore_server_join_room(ggzserver, i);
+						joined = 1;
+						break;
+					}
 				}
 			}
 			if(!joined)
@@ -1188,13 +1243,24 @@
 		case GGZ_TYPE_LIST:
 			printf("GGZCORE ## -- (type list)\n");
 			break;
+		case GGZ_CHANNEL_CONNECTED:
+			printf("GGZCORE ## -- channel connected\n");
+			channelfd = ggzcore_server_get_channel(ggzserver);
+			break;
+		case GGZ_CHANNEL_READY:
+			printf("GGZCORE ## -- channel ready\n");
+			game = ggzcore_server_get_cur_game(ggzserver);
+			ggzcore_game_set_server_fd(game, channelfd);
+			channelfd = -1;
+			break;
 		case GGZ_CONNECT_FAIL:
 		case GGZ_NEGOTIATE_FAIL:
 		case GGZ_LOGIN_FAIL:
 		case GGZ_ENTER_FAIL:
+		case GGZ_CHANNEL_FAIL:
 		case GGZ_NET_ERROR:
 		case GGZ_PROTOCOL_ERROR:
-			printf("GGZCORE ## -- error! :(\n");
+			printf("GGZCORE ## -- error! (%s) :(\n", (char*)data);
 			break;
 	}
 #endif
@@ -1206,6 +1272,7 @@
 	GGZRoom *room;
 	int i, num;
 	GGZTable *table;
+	const char *desc;
 
 	switch(id)
 	{
@@ -1216,8 +1283,10 @@
 			for(i = 0; i < num; i++)
 			{
 				table = ggzcore_room_get_nth_table(room, i);
-				printf("GGZCORE/room ## table: %s\n", ggzcore_table_get_desc(table));
-				tablelist.push_back(ggzcore_table_get_desc(table));
+				desc = ggzcore_table_get_desc(table);
+				printf("GGZCORE/room ## table: %s\n", desc);
+				if(!desc) desc = "(unknown map)";
+				tablelist.push_back(desc);
 			}
 			ggzcore_login = false;
 			break;
@@ -1225,8 +1294,81 @@
 #endif
 }
 
+void NetGGZ::event_game(unsigned int id, void *data)
+{
+#ifdef HAVE_GGZ
+	GGZRoom *room;
+	GGZGame *game;
+
+	switch(id)
+	{
+		case GGZ_GAME_PLAYING:
+			printf("GGZCORE/game ## -- playing\n");
+			room = ggzcore_server_get_cur_room(ggzserver);
+			ggzcore_room_join_table(room, tableid, 0);
+			break;
+		case GGZ_GAME_LAUNCHED:
+			printf("GGZCORE/game ## -- launched\n");
+			game = ggzcore_server_get_cur_game(ggzserver);
+			gamefd = ggzcore_game_get_control_fd(game);
+			init();
+			connect();
+			break;
+		case GGZ_GAME_NEGOTIATED:
+			printf("GGZCORE/game ## -- negotiated\n");
+			ggzcore_server_create_channel(ggzserver);
+			break;
+		case GGZ_GAME_LAUNCH_FAIL:
+		case GGZ_GAME_NEGOTIATE_FAIL:
+			printf("GGZCORE/game ## -- error! (%s) :(\n", (char*)data);
+			break;
+	}
+#endif
+}
+
 std::list<std::string> NetGGZ::tables()
 {
 	return tablelist;
 }
 
+void NetGGZ::join(const char *tablename)
+{
+#ifdef HAVE_GGZ
+	GGZRoom *room;
+	GGZGameType *type;
+	GGZGame *game;
+	int i, num;
+	GGZTable *table;
+	const char *desc;
+
+	printf("GGZCORE ## join table %s\n", tablename);
+
+	room = ggzcore_server_get_cur_room(ggzserver);
+	type = ggzcore_room_get_gametype(room);
+
+	tableid = -1;
+	num = ggzcore_room_get_num_tables(room);
+	for(i = 0; i < num; i++)
+	{
+		table = ggzcore_room_get_nth_table(room, i);
+		desc = ggzcore_table_get_desc(table);
+		if(!desc) desc = "(unknown map)";
+		if(!strcmp(desc, tablename)) tableid = i;
+	}
+
+	printf("GGZCORE ## that is table id %i\n", tableid);
+	if(tableid == -1) return;
+
+	game = ggzcore_game_new();
+	ggzcore_game_init(game, ggzserver, NULL);
+
+	ggzcore_game_add_event_hook(game, GGZ_GAME_LAUNCHED, &NetGGZ::callback_game);
+	ggzcore_game_add_event_hook(game, GGZ_GAME_LAUNCH_FAIL, &NetGGZ::callback_game);
+	ggzcore_game_add_event_hook(game, GGZ_GAME_NEGOTIATED, &NetGGZ::callback_game);
+	ggzcore_game_add_event_hook(game, GGZ_GAME_NEGOTIATE_FAIL, &NetGGZ::callback_game);
+	ggzcore_game_add_event_hook(game, GGZ_GAME_PLAYING, &NetGGZ::callback_game);
+
+	ggzcore_game_launch(game);
+#endif
+}
+
Index: src/network.h
===================================================================
RCS file: /cvsroot/widelands/widelands/src/network.h,v
retrieving revision 1.9
diff -u -r1.9 network.h
--- src/network.h	5 Jan 2005 16:20:17 -0000	1.9
+++ src/network.h	8 Jan 2005 18:33:56 -0000
@@ -303,18 +303,27 @@
 		op_broadcast_ip = 4
 	};
 
+	void initcore();
+	bool usedcore();
+	void datacore();
+	void join(const char *tablename);
+
     private:
 #ifdef HAVE_GGZ
 	static void ggzmod_server(GGZMod *mod, GGZModEvent e, void *data);
 	static GGZHookReturn callback_server(unsigned int id, void *data, void *user);
 	static GGZHookReturn callback_room(unsigned int id, void *data, void *user);
+	static GGZHookReturn callback_game(unsigned int id, void *data, void *user);
 #endif
-	void initcore();
 	void event_server(unsigned int id, void *data);
 	void event_room(unsigned int id, void *data);
+	void event_game(unsigned int id, void *data);
 
 	bool use_ggz;
 	int fd;
+	int channelfd;
+	int gamefd;
+	int tableid;
 	char *ip_address;
 	bool ggzcore_login;
 
Index: src/network_lan_promotion.cc
===================================================================
RCS file: /cvsroot/widelands/widelands/src/network_lan_promotion.cc,v
retrieving revision 1.4
diff -u -r1.4 network_lan_promotion.cc
--- src/network_lan_promotion.cc	1 Jan 2005 17:16:59 -0000	1.4
+++ src/network_lan_promotion.cc	8 Jan 2005 18:33:56 -0000
@@ -87,6 +87,7 @@
     fd_set fds;
     timeval tv;
     
+return false;
     FD_ZERO(&fds);
     FD_SET(sock, &fds);
     
Index: src/options.cc
===================================================================
RCS file: /cvsroot/widelands/widelands/src/options.cc,v
retrieving revision 1.27
diff -u -r1.27 options.cc
--- src/options.cc	4 Jan 2005 13:22:50 -0000	1.27
+++ src/options.cc	8 Jan 2005 18:33:56 -0000
@@ -59,6 +59,7 @@
 " --coredump       Generates a core dump on segfaults instead of using the SDL\n"
 "\n"
 " --ggz            Starts game as GGZ Gaming Zone client (don't use!)\n"
+" --ggzcore        GGZ embedded mode (TEMPORARY -> make menu button!)\n"
 "\n"
 " --help           Show this help\n"
 " --version        Show version\n"
@@ -107,6 +108,10 @@
 			NetGGZ::ref()->init();
 			continue;
 		}
+		if (!strcmp(opt, "ggzcore")) {
+			NetGGZ::ref()->initcore();
+			continue;
+		}
 
 		value = strchr(opt, '=');
 		if (!value) {
Index: src/system.cc
===================================================================
RCS file: /cvsroot/widelands/widelands/src/system.cc,v
retrieving revision 1.32
diff -u -r1.32 system.cc
--- src/system.cc	4 Jan 2005 13:22:50 -0000	1.32
+++ src/system.cc	8 Jan 2005 18:33:59 -0000
@@ -615,6 +615,7 @@
 	SDL_Event ev;
 
 	NetGGZ::ref()->data();
+	NetGGZ::ref()->datacore();
 
 	// We need to empty the SDL message queue always, even in playback mode
 	// In playback mode, only F10 for premature exiting works
Index: src/ui/ui_fs_menus/fullscreen_menu_netsetup.cc
===================================================================
RCS file: /cvsroot/widelands/widelands/src/ui/ui_fs_menus/fullscreen_menu_netsetup.cc,v
retrieving revision 1.7
diff -u -r1.7 fullscreen_menu_netsetup.cc
--- src/ui/ui_fs_menus/fullscreen_menu_netsetup.cc	7 Jan 2005 12:51:20 -0000	1.7
+++ src/ui/ui_fs_menus/fullscreen_menu_netsetup.cc	8 Jan 2005 18:34:06 -0000
@@ -30,8 +30,11 @@
 Fullscreen_Menu_NetSetup::Fullscreen_Menu_NetSetup ()
 	:Fullscreen_Menu_Base("singleplmenu.jpg") // change this
 {
-	discovery=new LAN_Game_Finder();
-	discovery->set_callback (discovery_callback, this);
+	if(!NetGGZ::ref()->usedcore())
+	{
+		discovery=new LAN_Game_Finder();
+		discovery->set_callback (discovery_callback, this);
+	}
 	
 	// Text
 	UITextarea* title= new UITextarea(this, MENU_XRES/2, 140, "Begin Network Game", Align_HCenter);
@@ -70,7 +73,10 @@
 
 Fullscreen_Menu_NetSetup::~Fullscreen_Menu_NetSetup ()
 {
-	delete discovery;
+	if(!NetGGZ::ref()->usedcore())
+	{
+		delete discovery;
+	}
 }
 
 void Fullscreen_Menu_NetSetup::think ()
@@ -109,7 +115,13 @@
 {
 	LAN_Open_Game* game=(LAN_Open_Game*) (opengames->get_selection());
 	
-	hostname->set_text (game->info.hostname);
+	if(game)
+		hostname->set_text (game->info.hostname);
+	else {
+		UITable_Entry *entry = opengames->get_entry(opengames->get_selection_index());
+		NetGGZ::ref()->join(entry->get_string(1));
+		end_modal(GGZGAME);
+	}
 }
 
 void Fullscreen_Menu_NetSetup::update_game_info (UITable_Entry* entry, const LAN_Game_Info& info)
Index: src/ui/ui_fs_menus/fullscreen_menu_netsetup.h
===================================================================
RCS file: /cvsroot/widelands/widelands/src/ui/ui_fs_menus/fullscreen_menu_netsetup.h,v
retrieving revision 1.6
diff -u -r1.6 fullscreen_menu_netsetup.h
--- src/ui/ui_fs_menus/fullscreen_menu_netsetup.h	5 Jan 2005 16:17:45 -0000	1.6
+++ src/ui/ui_fs_menus/fullscreen_menu_netsetup.h	8 Jan 2005 18:34:06 -0000
@@ -39,7 +39,8 @@
 			CANCEL=0,
 			HOSTGAME,
 			JOINGAME,
-			INTERNETGAME
+			INTERNETGAME,
+			GGZGAME
 		};
 		
 		Fullscreen_Menu_NetSetup ();
