Index: kbattleship/src/mainwindow.cpp
===================================================================
--- kbattleship/src/mainwindow.cpp	(Revision 727045)
+++ kbattleship/src/mainwindow.cpp	(Arbeitskopie)
@@ -24,14 +24,13 @@
 
 #include <kggzmod/module.h>
 #include <kggzmod/player.h>
-#include <kggznet/kggzraw.h>
 
 #include "playfield.h"
 #include "settings.h"
 #include "simplemenu.h"
 
 MainWindow::MainWindow()
-: m_mod(0), m_raw(0), m_fd(-1), m_ggzsetup(false)
+: m_mod(0), m_fd(-1), m_ggzsetup(false)
 {
     m_main = new PlayField(this, statusBar());
     
Index: kbattleship/src/mainwindow.h
===================================================================
--- kbattleship/src/mainwindow.h	(Revision 727045)
+++ kbattleship/src/mainwindow.h	(Arbeitskopie)
@@ -21,8 +21,6 @@
     class Event;
 }
 
-class KGGZRaw;
-
 class MainWindow : public KXmlGuiWindow
 {
 Q_OBJECT
@@ -40,7 +38,6 @@
     void welcomeScreen();
 private:
     KGGZMod::Module *m_mod;
-    KGGZRaw *m_raw;
     int m_fd;
     bool m_ggzsetup;
 };
Index: ksquares/src/gameboardscene.h
===================================================================
--- ksquares/src/gameboardscene.h	(Revision 727045)
+++ ksquares/src/gameboardscene.h	(Arbeitskopie)
@@ -13,6 +13,7 @@
 #include <QGraphicsScene>
 
 class QGraphicsEllipseItem;
+class msg;
 
 /**
  * @short Scene for displaying the game board
@@ -120,6 +121,8 @@
 	signals:
 		///Emits the index of the closet (undrawn) line when a click is detected
 		void lineDrawn(int);
+		///Emits a move request in a network game
+		void signalMoveRequest(const msg& request);
 };
 
 #endif // GAMEBOARDSCENE_H
Index: ksquares/src/dots_client.cpp
===================================================================
--- ksquares/src/dots_client.cpp	(Revision 0)
+++ ksquares/src/dots_client.cpp	(Revision 0)
@@ -0,0 +1,205 @@
+/* Generated by GGZComm/ruby version 0.4 */
+/* Protocol 'dots', version '4' */
+/* Do NOT edit this file! */
+
+#include "dots_client.h"
+#include <kggznet/kggzraw.h>
+
+#define ggz__seat_open 1
+
+dots::dots()
+: QObject()
+{
+	requirelink = 0;
+	fd = -1;
+	raw = NULL;
+}
+
+void dots::ggzcomm_reqsync(const reqsync& message)
+{
+	*raw << dotsOpcodes::message_reqsync;
+}
+
+void dots::ggzcomm_reqnewgame(const reqnewgame& message)
+{
+	*raw << dotsOpcodes::message_reqnewgame;
+}
+
+void dots::ggzcomm_sndmoveh(const sndmoveh& message)
+{
+	*raw << dotsOpcodes::message_sndmoveh;
+	*raw << message.x;
+	*raw << message.y;
+}
+
+void dots::ggzcomm_sndmovev(const sndmovev& message)
+{
+	*raw << dotsOpcodes::message_sndmovev;
+	*raw << message.x;
+	*raw << message.y;
+}
+
+void dots::ggzcomm_sndoptions(const sndoptions& message)
+{
+	*raw << dotsOpcodes::message_sndoptions;
+	*raw << message.width;
+	*raw << message.height;
+}
+
+void dots::ggzcomm_msgseat()
+{
+	msgseat message;
+	*raw >> message.seat;
+	emit signalNotification(dotsOpcodes::message_msgseat, message);
+}
+
+void dots::ggzcomm_msgplayers()
+{
+	msgplayers message;
+	for(int i1 = 0; i1 < 2; i1++)
+	{
+		*raw >> message.seat[i1];
+		if((message.seat[i1] != ggz__seat_open))
+		{
+			*raw >> message.player[i1];
+		}
+	}
+	emit signalNotification(dotsOpcodes::message_msgplayers, message);
+}
+
+void dots::ggzcomm_msgmoveh()
+{
+	msgmoveh message;
+	*raw >> message.nx;
+	*raw >> message.ny;
+	*raw >> message.s;
+	for(int i1 = 0; i1 < message.s; i1++)
+	{
+		*raw >> message.x[i1];
+		*raw >> message.y[i1];
+	}
+	emit signalNotification(dotsOpcodes::message_msgmoveh, message);
+}
+
+void dots::ggzcomm_msgmovev()
+{
+	msgmovev message;
+	*raw >> message.nx;
+	*raw >> message.ny;
+	*raw >> message.s;
+	for(int i1 = 0; i1 < message.s; i1++)
+	{
+		*raw >> message.x[i1];
+		*raw >> message.y[i1];
+	}
+	emit signalNotification(dotsOpcodes::message_msgmovev, message);
+}
+
+void dots::ggzcomm_msggameover()
+{
+	msggameover message;
+	*raw >> message.winner;
+	emit signalNotification(dotsOpcodes::message_msggameover, message);
+}
+
+void dots::ggzcomm_reqmove()
+{
+	reqmove message;
+	emit signalNotification(dotsOpcodes::message_reqmove, message);
+}
+
+void dots::ggzcomm_rspmove()
+{
+	rspmove message;
+	*raw >> message.status;
+	*raw >> message.s;
+	for(int i1 = 0; i1 < message.s; i1++)
+	{
+		*raw >> message.x[i1];
+		*raw >> message.y[i1];
+	}
+	emit signalNotification(dotsOpcodes::message_rspmove, message);
+}
+
+void dots::ggzcomm_sndsync()
+{
+	sndsync message;
+	*raw >> message.turn;
+	*raw >> message.score0;
+	*raw >> message.score1;
+	emit signalNotification(dotsOpcodes::message_sndsync, message);
+}
+
+void dots::ggzcomm_msgoptions()
+{
+	msgoptions message;
+	*raw >> message.width;
+	*raw >> message.height;
+	emit signalNotification(dotsOpcodes::message_msgoptions, message);
+}
+
+void dots::ggzcomm_reqoptions()
+{
+	reqoptions message;
+	emit signalNotification(dotsOpcodes::message_reqoptions, message);
+}
+
+void dots::ggzcomm_network_main()
+{
+	int opcode;
+
+	*raw >> opcode;
+
+	if(requirelink)
+	{
+		if(opcode != nextlink) emit signalError();
+		requirelink = 0;
+	}
+
+	switch(opcode)
+	{
+		case dotsOpcodes::message_msgseat:
+			ggzcomm_msgseat();
+			break;
+		case dotsOpcodes::message_msgplayers:
+			ggzcomm_msgplayers();
+			break;
+		case dotsOpcodes::message_msgmoveh:
+			ggzcomm_msgmoveh();
+			break;
+		case dotsOpcodes::message_msgmovev:
+			ggzcomm_msgmovev();
+			break;
+		case dotsOpcodes::message_msggameover:
+			ggzcomm_msggameover();
+			break;
+		case dotsOpcodes::message_reqmove:
+			ggzcomm_reqmove();
+			break;
+		case dotsOpcodes::message_rspmove:
+			ggzcomm_rspmove();
+			break;
+		case dotsOpcodes::message_sndsync:
+			ggzcomm_sndsync();
+			break;
+		case dotsOpcodes::message_msgoptions:
+			ggzcomm_msgoptions();
+			break;
+		case dotsOpcodes::message_reqoptions:
+			ggzcomm_reqoptions();
+			break;
+	}
+}
+
+void dots::ggzcomm_set_fd(int usefd)
+{
+	fd = usefd;
+	raw = new KGGZRaw();
+	raw->setNetwork(fd);
+}
+
+void dots::ggzcomm_set_socket(KGGZRaw *useraw)
+{
+	raw = useraw;
+}
+
Index: ksquares/src/newgamedialog.h
===================================================================
--- ksquares/src/newgamedialog.h	(Revision 727045)
+++ ksquares/src/newgamedialog.h	(Arbeitskopie)
@@ -22,6 +22,7 @@
 	
 	public slots:
 		void adjustEnabledUsers(int);
+		void adjustNetworkUsers();
 };
 
 #endif // NEWGAMEDIALOG_H
Index: ksquares/src/ksquaresui.rc
===================================================================
--- ksquares/src/ksquaresui.rc	(Revision 727045)
+++ ksquares/src/ksquaresui.rc	(Arbeitskopie)
@@ -7,4 +7,11 @@
 		<Action name="game_restart" />
 		<Action name="game_quit" />
 	</ToolBar>
+
+	<MenuBar>
+	<Menu noMerge="1" name="onlinegame">
+		<text>Online game</text>
+		<Action name="rankings" />
+	</Menu>
+	</MenuBar>
 </gui>
Index: ksquares/src/ksquareswindow.h
===================================================================
--- ksquares/src/ksquareswindow.h	(Revision 727045)
+++ ksquares/src/ksquareswindow.h	(Arbeitskopie)
@@ -15,6 +15,7 @@
 #include "ksquaresgame.h"
 #include "ui_prefs_ai.h"
 #include "ui_prefs_display.h"
+#include "dots_client.h"
 
 class KToggleAction;
 class GameBoardView;
@@ -51,6 +52,11 @@
 		void optionsPreferences();
 		void playerTakeTurn(KSquaresPlayer* currentPlayer);
 		void gameOver(const QVector<KSquaresPlayer> &_playerList);	//when KSquaresGame says the game is over. Display score board
+		void slotNetworkData(int fd);
+		void slotNetworkError();
+		void slotNetworkPacket(dotsOpcodes::Opcode opcode, const msg& message);
+		void slotMoveRequest(const msg&);
+		void slotRankingsRequest();
 
 	private:
 		//void setupAccel();
@@ -63,6 +69,8 @@
 		GameBoardScene *m_scene;
 		///The game controller
 		KSquaresGame* sGame;
+		///Network protocol handler
+		dots *m_proto;
 
 		//KToggleAction *m_toolbarAction;
 		//KToggleAction *m_statusbarAction;
Index: ksquares/src/CMakeLists.txt
===================================================================
--- ksquares/src/CMakeLists.txt	(Revision 727045)
+++ ksquares/src/CMakeLists.txt	(Arbeitskopie)
@@ -9,6 +9,7 @@
 	newgamedialog.cpp
 	ksquaresdemowindow.cpp
 	themegraphicsitems.cpp
+	dots_client.cpp
 )
 
 include_directories(${CMAKE_SOURCE_DIR}/libkdegames/highscore)
@@ -19,7 +20,7 @@
 
 kde4_add_executable(ksquares ${ksquares_SRCS})
 
-target_link_libraries(ksquares ${KDE4_KDEUI_LIBS} kdegames)
+target_link_libraries(ksquares ${KDE4_KDEUI_LIBS} kdegames ${KGGZGAMES_LIBS})
 
 install(TARGETS ksquares DESTINATION ${BIN_INSTALL_DIR})
 
@@ -30,3 +31,5 @@
 install( FILES ksquares.kcfg  DESTINATION  ${KCFG_INSTALL_DIR} )
 install( FILES ksquaresui.rc  DESTINATION  ${DATA_INSTALL_DIR}/ksquares )
 kde4_install_icons(${ICON_INSTALL_DIR})
+
+register_ggz_module(module.dsc)
Index: ksquares/src/gameboardscene.cpp
===================================================================
--- ksquares/src/gameboardscene.cpp	(Revision 727045)
+++ ksquares/src/gameboardscene.cpp	(Arbeitskopie)
@@ -9,12 +9,15 @@
 
 #include "gameboardscene.h"
 
+#include "dots_client.h"
+
 #include <math.h>
 
 #include <QGraphicsSceneMouseEvent>
 #include <QGraphicsEllipseItem>
 
 #include <kdebug.h>
+#include <kggzmod/module.h>
 
 GameBoardScene::GameBoardScene(int newWidth, int newHeight, QObject *parent) : QGraphicsScene(parent), width(newWidth), height(newHeight), acceptEvents(true)
 {
@@ -228,7 +231,18 @@
 		QList<QGraphicsEllipseItem*> connectList = getTwoNearestPoints(mouseEvent->scenePos());
 		if (connectList.size() == 2)
 		{
-			addLineToIndex(connectList);
+			if(KGGZMod::Module::instance())
+			{
+				// get m_proto from KSquaresWindow?
+				sndmoveh move;
+				move.x = 23;
+				move.y = 42;
+				emit signalMoveRequest(move);
+			}
+			else
+			{
+				addLineToIndex(connectList);
+			}
 		}
 	}
 	
Index: ksquares/src/newgamedialog.cpp
===================================================================
--- ksquares/src/newgamedialog.cpp	(Revision 727045)
+++ ksquares/src/newgamedialog.cpp	(Arbeitskopie)
@@ -10,6 +10,9 @@
 #include "newgamedialog.h"
 #include <kdebug.h>
 
+#include <kggzmod/module.h>
+#include <kggzmod/player.h>
+
 NewGameDialog::NewGameDialog(QWidget* parent) : KDialog(parent)
 {
 	setupUi(mainWidget());
@@ -18,8 +21,52 @@
 	connect(spinNumOfPlayers, SIGNAL(valueChanged(int)), SLOT(adjustEnabledUsers(int)));
 	
 	adjustEnabledUsers(spinNumOfPlayers->value());
+
+	if(KGGZMod::Module::instance())
+	{
+		adjustNetworkUsers();
+		connect(KGGZMod::Module::instance(),
+			SIGNAL(signalEvent(const KGGZMod::Event&)),
+			SLOT(adjustNetworkUsers()));
+	}
 }
 
+void NewGameDialog::adjustNetworkUsers()
+{
+	if(!KGGZMod::Module::instance()) return;
+
+	spinNumOfPlayers->setEnabled(false);
+	quickStartCheck->setEnabled(false);
+	quickStartCheck->setChecked(false);
+
+	labelPlayer2Name->setEnabled(false);
+	playerTwoName->setEnabled(false);
+	playerTwoHuman->setEnabled(false);
+	labelPlayer1Name->setEnabled(false);
+	playerOneName->setEnabled(false);
+	playerOneHuman->setEnabled(false);
+
+	playerThreeName->clear();
+	playerThreeHuman->setChecked(false);
+	playerFourName->clear();
+	playerFourHuman->setChecked(false);
+
+	KGGZMod::Module *mod = KGGZMod::Module::instance();
+	QList<KGGZMod::Player*> players = mod->players();
+	if(players.count() >= 1)
+	{
+		playerOneName->setText(players.at(0)->name());
+		bool ishuman = (players.at(0)->type() != KGGZMod::Player::bot);
+		playerOneHuman->setChecked(ishuman);
+	}
+	if(players.count() >= 2)
+	{
+		playerTwoName->setText(players.at(1)->name());
+		bool ishuman = (players.at(1)->type() != KGGZMod::Player::bot);
+		playerTwoHuman->setChecked(ishuman);
+	}
+}
+
 void NewGameDialog::adjustEnabledUsers(int numOfPlayers)
 {
 	switch(numOfPlayers)
Index: ksquares/src/dots_client.h
===================================================================
--- ksquares/src/dots_client.h	(Revision 0)
+++ ksquares/src/dots_client.h	(Revision 0)
@@ -0,0 +1,213 @@
+/* Generated by GGZComm/ruby version 0.4 */
+/* Protocol 'dots', version '4' */
+/* Do NOT edit this file! */
+
+#ifndef GGZCOMM_DOTS_H
+#define GGZCOMM_DOTS_H
+
+#include <qobject.h>
+
+class KGGZRaw;
+
+class dotsOpcodes
+{
+	public:
+	enum Opcode
+	{
+		message_reqsync = 3,
+		message_reqnewgame = 5,
+		message_sndmoveh = 0,
+		message_sndmovev = 1,
+		message_sndoptions = 4,
+		message_msgseat = 0,
+		message_msgplayers = 1,
+		message_msgmoveh = 2,
+		message_msgmovev = 3,
+		message_msggameover = 4,
+		message_reqmove = 5,
+		message_rspmove = 6,
+		message_sndsync = 7,
+		message_msgoptions = 8,
+		message_reqoptions = 9
+	};
+};
+
+class msg
+{
+	public:
+	msg(dotsOpcodes::Opcode type){m_type = type;}
+	dotsOpcodes::Opcode type() const{return m_type;}
+	private:
+	dotsOpcodes::Opcode m_type;
+};
+
+class reqsync : public msg
+{
+	public:
+	reqsync() : msg(dotsOpcodes::message_reqsync){}
+
+};
+
+class reqnewgame : public msg
+{
+	public:
+	reqnewgame() : msg(dotsOpcodes::message_reqnewgame){}
+
+};
+
+class sndmoveh : public msg
+{
+	public:
+	sndmoveh() : msg(dotsOpcodes::message_sndmoveh){}
+	qint8 x;
+	qint8 y;
+};
+
+class sndmovev : public msg
+{
+	public:
+	sndmovev() : msg(dotsOpcodes::message_sndmovev){}
+	qint8 x;
+	qint8 y;
+};
+
+class sndoptions : public msg
+{
+	public:
+	sndoptions() : msg(dotsOpcodes::message_sndoptions){}
+	qint8 width;
+	qint8 height;
+};
+
+class msgseat : public msg
+{
+	public:
+	msgseat() : msg(dotsOpcodes::message_msgseat){}
+	int seat;
+};
+
+class msgplayers : public msg
+{
+	public:
+	msgplayers() : msg(dotsOpcodes::message_msgplayers){}
+	int seat[2];
+	QString player[2];
+	int i1;
+};
+
+class msgmoveh : public msg
+{
+	public:
+	msgmoveh() : msg(dotsOpcodes::message_msgmoveh){}
+	qint8 nx;
+	qint8 ny;
+	qint8 s;
+	qint8 x[100];
+	qint8 y[100];
+	int i1;
+};
+
+class msgmovev : public msg
+{
+	public:
+	msgmovev() : msg(dotsOpcodes::message_msgmovev){}
+	qint8 nx;
+	qint8 ny;
+	qint8 s;
+	qint8 x[100];
+	qint8 y[100];
+	int i1;
+};
+
+class msggameover : public msg
+{
+	public:
+	msggameover() : msg(dotsOpcodes::message_msggameover){}
+	qint8 winner;
+};
+
+class reqmove : public msg
+{
+	public:
+	reqmove() : msg(dotsOpcodes::message_reqmove){}
+
+};
+
+class rspmove : public msg
+{
+	public:
+	rspmove() : msg(dotsOpcodes::message_rspmove){}
+	qint8 status;
+	qint8 s;
+	qint8 x[100];
+	qint8 y[100];
+	int i1;
+};
+
+class sndsync : public msg
+{
+	public:
+	sndsync() : msg(dotsOpcodes::message_sndsync){}
+	qint8 turn;
+	int score0;
+	int score1;
+};
+
+class msgoptions : public msg
+{
+	public:
+	msgoptions() : msg(dotsOpcodes::message_msgoptions){}
+	qint8 width;
+	qint8 height;
+};
+
+class reqoptions : public msg
+{
+	public:
+	reqoptions() : msg(dotsOpcodes::message_reqoptions){}
+
+};
+
+class dots : public QObject
+{
+	Q_OBJECT
+	public:
+	dots();
+
+	void ggzcomm_network_main();
+
+	void ggzcomm_reqsync(const reqsync& message);
+	void ggzcomm_reqnewgame(const reqnewgame& message);
+	void ggzcomm_sndmoveh(const sndmoveh& message);
+	void ggzcomm_sndmovev(const sndmovev& message);
+	void ggzcomm_sndoptions(const sndoptions& message);
+
+	void ggzcomm_set_fd(int usefd);
+	void ggzcomm_set_socket(KGGZRaw *useraw);
+
+	signals:
+	void signalNotification(dotsOpcodes::Opcode messagetype, const msg& message);
+	void signalError();
+
+	private:
+	void handle(bool ret);
+	void ggzcomm_msgseat();
+	void ggzcomm_msgplayers();
+	void ggzcomm_msgmoveh();
+	void ggzcomm_msgmovev();
+	void ggzcomm_msggameover();
+	void ggzcomm_reqmove();
+	void ggzcomm_rspmove();
+	void ggzcomm_sndsync();
+	void ggzcomm_msgoptions();
+	void ggzcomm_reqoptions();
+
+	int fd;
+	int ret;
+	int requirelink;
+	int nextlink;
+	KGGZRaw *raw;
+};
+
+#endif
+
Index: ksquares/src/module.dsc
===================================================================
--- ksquares/src/module.dsc	(Revision 0)
+++ ksquares/src/module.dsc	(Revision 0)
@@ -0,0 +1,10 @@
+[ModuleInfo]
+Name = KSquares
+Author = Matt Williams
+CommandLine = ksquares
+Frontend = kde
+Homepage = http://games.kde.org/
+ProtocolEngine = Dots
+ProtocolVersion = 4
+Version = 0.3
+
Index: ksquares/src/ksquareswindow.cpp
===================================================================
--- ksquares/src/ksquareswindow.cpp	(Revision 727045)
+++ ksquares/src/ksquareswindow.cpp	(Arbeitskopie)
@@ -27,6 +27,10 @@
 #include <KStandardGameAction>
 #include <KSelectAction>
 
+//libkdegames
+#include <kggzmod/module.h>
+#include <kggzgames/kggzrankingsdialog.h>
+
 //generated
 #include "settings.h"
 
@@ -38,14 +42,22 @@
 #include "newgamedialog.h"
 #include "scoresdialog.h"
 
-KSquaresWindow::KSquaresWindow() : KXmlGuiWindow(), m_view(new GameBoardView(this)), m_scene(0)
+KSquaresWindow::KSquaresWindow() : KXmlGuiWindow(), m_view(new GameBoardView(this)), m_scene(0), m_proto(0)
 {
 	setCentralWidget(m_view);
 	QTimer::singleShot(0, this, SLOT(initObject()));
+
+	if(KGGZMod::Module::isGGZ())
+	{
+		KGGZMod::Module *mod = new KGGZMod::Module("ksquares");
+		connect(mod, SIGNAL(signalNetwork(int)), SLOT(slotNetworkData(int)));
+		connect(mod, SIGNAL(signalError()), SLOT(slotNetworkError()));
+	}
 }
 
 KSquaresWindow::~KSquaresWindow()
 {
+	delete KGGZMod::Module::instance();
 	delete m_view;
 	delete m_scene;
 	delete sGame;
@@ -178,6 +190,7 @@
 	//start game etc.
 	sGame->createGame(playerList, Settings::boardWidth(), Settings::boardHeight());
 	connect(m_scene, SIGNAL(lineDrawn(int)), sGame, SLOT(addLineToIndex(int)));
+	connect(m_scene, SIGNAL(signalMoveRequest(const msg&)), SLOT(slotMoveRequest(const msg&)));
 	connect(sGame, SIGNAL(drawLine(int,QColor)), m_scene, SLOT(drawLine(int,QColor)));
 	connect(sGame, SIGNAL(drawSquare(int,QColor)), m_scene, SLOT(drawSquare(int,QColor)));
 
@@ -229,7 +242,7 @@
 
 	if(playerList.at(0).isHuman())
 	{
-		int score = static_cast<double>(playerList.at(0).score()) - (static_cast<double>(Settings::boardWidth()*Settings::boardHeight()) / static_cast<double>(playerList.size()));
+		int score = (int)(static_cast<double>(playerList.at(0).score()) - (static_cast<double>(Settings::boardWidth()*Settings::boardHeight()) / static_cast<double>(playerList.size())));
 		
 		KScoreDialog ksdialog(KScoreDialog::Name, this);
 		switch(Settings::difficulty())
@@ -282,10 +295,23 @@
 void KSquaresWindow::setupActions()
 {
 	// Game
-	KStandardGameAction::gameNew(this, SLOT(gameNew()), actionCollection());
-	KAction *resetGame = KStandardGameAction::restart(this, SLOT(gameReset()), actionCollection());
-	resetGame->setStatusTip(i18n("Start a new game with the current settings"));
-	KStandardGameAction::highscores(this, SLOT(showHighscores()), actionCollection());
+	if(!KGGZMod::Module::instance())
+	{
+		KStandardGameAction::gameNew(this, SLOT(gameNew()), actionCollection());
+		KAction *resetGame = KStandardGameAction::restart(this, SLOT(gameReset()), actionCollection());
+		resetGame->setStatusTip(i18n("Start a new game with the current settings"));
+		KStandardGameAction::highscores(this, SLOT(showHighscores()), actionCollection());
+	}
+	else
+	{
+		//KAction *a_rankings = new KAction(this);
+		KAction *a_rankings = new KAction(this);
+		//QAction *a_rankings = actionCollection()->addAction("rankings");
+		a_rankings->setText("Online rankings");
+		actionCollection()->addAction("rankings", a_rankings);
+		connect(a_rankings, SIGNAL(triggered(bool)), SLOT(slotRankingsRequest()));
+	}
+
 	KStandardGameAction::quit(this, SLOT(close()), actionCollection());
 	
 	// Preferences
@@ -310,4 +336,51 @@
 	dialog->show();
 }
 
+void KSquaresWindow::slotNetworkData(int fd)
+{
+	if(!m_proto)
+	{
+		m_proto = new dots();
+		m_proto->ggzcomm_set_fd(fd);
+		connect(m_proto,
+			SIGNAL(signalNotification(dotsOpcodes::Opcode, const msg&)),
+			SLOT(slotNetworkPacket(dotsOpcodes::Opcode, const msg&)));
+		connect(m_proto, SIGNAL(signalError()), SLOT(slotNetworkError()));
+	}
+
+	m_proto->ggzcomm_network_main();
+}
+
+void KSquaresWindow::slotNetworkError()
+{
+	delete m_proto;
+	delete KGGZMod::Module::instance();
+	kError() << "GGZ mode interrupted by kggzmod or kggzraw" << endl;
+	// FIXME: display message box to user, then quit game
+}
+
+void KSquaresWindow::slotNetworkPacket(dotsOpcodes::Opcode opcode, const msg& message)
+{
+	kDebug() << "PACKET:" << opcode << endl;
+}
+
+void KSquaresWindow::slotMoveRequest(const msg& request)
+{
+	kDebug() << "SEND MOVE!" << endl;
+	const sndmoveh req; // = (sndmoveh)request;
+	m_proto->ggzcomm_sndmoveh(req);
+	// FIXME: this is totally bogus! :)
+}
+
+void KSquaresWindow::slotRankingsRequest()
+{
+	kDebug() << "REQUEST RANKINGS!" << endl;
+	KGGZMod::RankingsRequest req;
+	KGGZMod::Module::instance()->sendRequest(req);
+
+	KGGZRankingsDialog *rankingsdlg = new KGGZRankingsDialog(this);
+	Q_UNUSED(rankingsdlg);
+	// FIXME: we don't close it although we could
+}
+
 #include "ksquareswindow.moc"
