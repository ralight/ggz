Index: database/ggzdb_util.h
===================================================================
--- database/ggzdb_util.h	(revision 10173)
+++ database/ggzdb_util.h	(working copy)
@@ -28,5 +28,8 @@
 /* Free a ggzdbSavegamePlayers structure */
 void _ggzdb_sgpstr_free(void *str);
 
+/* Helper function: replace all patterns in a string */
+char *strreplace(const char *str, const char *pattern, const char *subst);
+
 #endif
 
Index: database/mysql_schema.sql
===================================================================
--- database/mysql_schema.sql	(revision 10173)
+++ database/mysql_schema.sql	(working copy)
@@ -1,140 +1,139 @@
 
-CREATE TABLE `users` (
-	`id` int(11) NOT NULL auto_increment,
-	`handle` varchar(25) NOT NULL default '',
-	`password` varchar(32) NOT NULL default '',
-	`name` varchar(255) NOT NULL default '',
-	`email` varchar(255) NOT NULL default '',
-	`firstlogin` timestamp NOT NULL,
-	`lastlogin` timestamp NOT NULL,
-	`perms` int(11) NOT NULL default '7',
-	`confirmed` boolean,
+CREATE TABLE `%PREFIX%users` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`handle` VARCHAR(165) NOT NULL DEFAULT '',
+	`password` VARCHAR(128) NOT NULL DEFAULT '',
+	`name` VARCHAR(255) NOT NULL DEFAULT '',
+	`email` VARCHAR(255) NOT NULL DEFAULT '',
+	`firstlogin` TIMESTAMP NOT NULL,
+	`lastlogin` TIMESTAMP NOT NULL,
+	`perms` INT(11) NOT NULL DEFAULT '7',
+	`confirmed` BOOLEAN,
 	PRIMARY KEY  (`id`),
 	UNIQUE KEY `handle` (`handle`),
 	KEY `player_get_first` (`password`,`name`,`email`,`lastlogin`,`perms`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `userinfo` (
-	`id` int(11) NOT NULL auto_increment,
-	`user_id` int(11) NOT NULL,
-	`photo` text NOT NULL,
-	`gender` text NOT NULL,
-	`country` text NOT NULL,
-	`pubkey` text NOT NULL,
-	`blogfeed` text NOT NULL,
-	`longitude` double NOT NULL default '0',
-	`latitude` double NOT NULL default '0',
-	`alterpass` text NOT NULL,
-	PRIMARY KEY  (`id`),
-	CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
+CREATE TABLE `%PREFIX%userinfo` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`user_id` INT(11) NOT NULL,
+	`photo` TEXT NOT NULL,
+	`gender` TEXT NOT NULL,
+	`country` TEXT NOT NULL,
+	`pubkey` TEXT NOT NULL,
+	`blogfeed` TEXT NOT NULL,
+	`longitude` double NOT NULL DEFAULT '0',
+	`latitude` double NOT NULL DEFAULT '0',
+	`alterpass` TEXT NOT NULL,
+	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `stats` (
-	`id` int(11) NOT NULL auto_increment,
-	`user_id` int(11) NOT NULL default '0',
-	`game` text NOT NULL,
-	`wins` int(11) NOT NULL default '0',
-	`losses` int(11) NOT NULL default '0',
-	`ties` int(11) NOT NULL default '0',
-	`forfeits` int(11) NOT NULL default '0',
-	`rating` double NOT NULL default '0',
-	`ranking` int(11) NOT NULL default '0',
-	`highscore` int(11) NOT NULL default '0',
-	PRIMARY KEY  (`id`),
-	KEY `stats_lookup` (`username`(30),`game`(30)),
-	CONSTRAINT `userid` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
+CREATE TABLE `%PREFIX%stats` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`user_id` INT(11) NOT NULL DEFAULT '0',
+	`game` TEXT NOT NULL,
+	`wins` INT(11) NOT NULL DEFAULT '0',
+	`losses` INT(11) NOT NULL DEFAULT '0',
+	`ties` INT(11) NOT NULL DEFAULT '0',
+	`forfeits` INT(11) NOT NULL DEFAULT '0',
+	`rating` double NOT NULL DEFAULT '0',
+	`ranking` INT(11) NOT NULL DEFAULT '0',
+	`highscore` INT(11) NOT NULL DEFAULT '0',
+	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `matches` (
-	`id` int(11) NOT NULL auto_increment,
-	`date` int(11) NOT NULL default '0',
-	`game` text NOT NULL,
-	`winner` text NOT NULL,
+CREATE TABLE `%PREFIX%matches` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`date` INT(11) NOT NULL DEFAULT '0',
+	`game` TEXT NOT NULL,
+	`winner` TEXT NOT NULL,
 	`savegame` text,
 	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `matchplayers` (
-	`id` int(11) NOT NULL auto_increment,
-	`match_id` int(11) NOT NULL default '0',
-	`username` text NOT NULL,
-	`playertype` text NOT NULL,
-	PRIMARY KEY  (`id`),
-	CONSTRAINT `match_id` FOREIGN KEY (`match_id`) REFERENCES `matches` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
+CREATE TABLE `%PREFIX%matchplayers` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`match_id` INT(11) NOT NULL DEFAULT '0',
+	`username` TEXT NOT NULL,
+	`playertype` TEXT NOT NULL,
+	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `savegames` (
-	`id` int(11) NOT NULL auto_increment,
-	`date` int(11) NOT NULL default '0',
-	`game` text NOT NULL,
-	`owner` text NOT NULL,
-	`savegame` text NOT NULL,
-	`tableid` int(11) NOT NULL default '0',
-	`stamp` int(11) NOT NULL default '0',
+CREATE TABLE `%PREFIX%savegames` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`date` INT(11) NOT NULL DEFAULT '0',
+	`game` TEXT NOT NULL,
+	`owner` TEXT NOT NULL,
+	`savegame` TEXT NOT NULL,
+	`tableid` INT(11) NOT NULL DEFAULT '0',
+	`stamp` INT(11) NOT NULL DEFAULT '0',
 	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `savegameplayers` (
-	`id` int(11) NOT NULL auto_increment,
-	`tableid` int(11) NOT NULL default '0',
-	`stamp` int(11) NOT NULL default '0',
-	`seat` int(11) NOT NULL default '0',
-	`handle` text NOT NULL,
-	`seattype` text NOT NULL,
-	PRIMARY KEY  (`id`),
-	--CONSTRAINT `savegame` FOREIGN KEY (`savegame`) REFERENCES `savegames` (`tableid`) ON UPDATE CASCADE ON DELETE CASCADE
+CREATE TABLE `%PREFIX%savegameplayers` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`tableid` INT(11) NOT NULL DEFAULT '0',
+	`stamp` INT(11) NOT NULL DEFAULT '0',
+	`seat` INT(11) NOT NULL DEFAULT '0',
+	`handle` TEXT NOT NULL,
+	`seattype` TEXT NOT NULL,
+	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `teammembers` (
-	`id` int(11) NOT NULL auto_increment,
-	`team_id` int(11) NOT NULL default '0',
-	`user_id` int(11) NOT NULL default '0',
-	`teamname` text NOT NULL,
-	`username` text NOT NULL,
-	`role` text NOT NULL,
-	`entrydate` int(11) NOT NULL default '0',
-	PRIMARY KEY  (`id`),
-	CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
-	CONSTRAINT `team_id` FOREIGN KEY (`team_id`) REFERENCES `teams` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
+CREATE TABLE `%PREFIX%teammembers` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`team_id` INT(11) NOT NULL DEFAULT '0',
+	`user_id` INT(11) NOT NULL DEFAULT '0',
+	`teamname` TEXT NOT NULL,
+	`username` TEXT NOT NULL,
+	`role` TEXT NOT NULL,
+	`entrydate` INT(11) NOT NULL DEFAULT '0',
+	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `teams` (
-	`id` int(11) NOT NULL auto_increment,
-	`teamname` text NOT NULL,
-	`fullname` text NOT NULL,
-	`icon` text NOT NULL,
-	`foundingdate` int(11) NOT NULL default '0',
-	`founder` text NOT NULL,
-	`homepage` text NOT NULL
-	PRIMARY KEY  (`id`),
+CREATE TABLE `%PREFIX%teams` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`teamname` TEXT NOT NULL,
+	`fullname` TEXT NOT NULL,
+	`icon` TEXT NOT NULL,
+	`foundingdate` INT(11) NOT NULL DEFAULT '0',
+	`founder` TEXT NOT NULL,
+	`homepage` TEXT NOT NULL,
+	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `tournamentplayers` (
-	`id` int(11) NOT NULL auto_increment,
-	`tid` int(11) NOT NULL default '0',
-	`number` int(11) NOT NULL default '0',
-	`name` text NOT NULL,
-	`playertype` text NOT NULL,
+CREATE TABLE `%PREFIX%tournamentplayers` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`tid` INT(11) NOT NULL DEFAULT '0',
+	`number` INT(11) NOT NULL DEFAULT '0',
+	`name` TEXT NOT NULL,
+	`playertype` TEXT NOT NULL,
 	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 
-CREATE TABLE `tournaments` (
-	`id` int(11) NOT NULL auto_increment,
-	`name` text NOT NULL,
-	`game` text NOT NULL,
-	`date` int(11) NOT NULL default '0',
-	`organizer` text NOT NULL,
+CREATE TABLE `%PREFIX%tournaments` (
+	`id` INT(11) NOT NULL AUTO_INCREMENT,
+	`name` TEXT NOT NULL,
+	`game` TEXT NOT NULL,
+	`date` INT(11) NOT NULL DEFAULT '0',
+	`organizer` TEXT NOT NULL,
 	PRIMARY KEY  (`id`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
+CREATE TABLE `%PREFIX%control` (
+	`key` VARCHAR(250) NOT NULL DEFAULT '',
+	`value` VARCHAR(256) NOT NULL DEFAULT '',
+	PRIMARY KEY  (`key`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
+
Index: database/ggzdb_pgsql.c
===================================================================
--- database/ggzdb_pgsql.c	(revision 10173)
+++ database/ggzdb_pgsql.c	(working copy)
@@ -168,27 +168,6 @@
 	pthread_mutex_unlock(&mutex);
 }
 
-/* Helper function: replace all patterns in a string */
-static char *strreplace(const char *str, const char *pattern, const char *subst)
-{
-	char *ss, *sstmp;
-	char *ptr;
-
-	ss = ggz_strdup(str);
-
-	while((ptr = strstr(ss, pattern)))
-	{
-		sstmp = ggz_strdup(ss);
-		memcpy(sstmp, ss, ptr - ss);
-		memcpy(sstmp + (ptr - ss), subst, strlen(subst));
-		memcpy(sstmp + (ptr - ss) + strlen(subst), ptr + strlen(pattern), strlen(str) - strlen(pattern) - (ptr - ss) + 1);
-		ggz_free(ss);
-		ss = sstmp;
-	}
-
-	return ss;
-}
-
 /* Initialize the database tables from an external SQL schema file */
 static int setupschema(PGconn *conn, const char *filename)
 {
Index: database/ggzdb_mysql.c
===================================================================
--- database/ggzdb_mysql.c	(revision 10173)
+++ database/ggzdb_mysql.c	(working copy)
@@ -60,15 +60,88 @@
 	return "lower";
 }
 
+/* Initialize the database tables from an external SQL schema file */
+static int setupschema(const char *filename)
+{
+	char buffer[1024];
+	int mysql_rc;
+	char *completebuffer = NULL;
+	char *substbuffer;
+	int len;
+	int i;
+	int rc = 1;
 
+	FILE *f = fopen(filename, "r");
+	if(!f)
+	{
+		ggz_error_msg("Schema read error from %s.", filename);
+		return 0;
+	}
+
+	while(fgets(buffer, sizeof(buffer), f))
+	{
+		if(strlen(buffer) == 1 && completebuffer)
+		{
+			substbuffer = strreplace(completebuffer, "%PREFIX%", "");
+			mysql_rc = mysql_query(conn, substbuffer);
+			if(mysql_rc)
+			{
+				ggz_error_msg("Table creation error %s.",
+					mysql_error(conn));
+				rc = 0;
+			}
+
+			ggz_free(substbuffer);
+			ggz_free(completebuffer);
+			completebuffer = NULL;
+			continue;
+		}
+
+		buffer[strlen(buffer) - 1] = '\0';
+		for(i = 0; i < strlen(buffer); i++)
+		{
+			if(buffer[i] == '\t') buffer[i] = ' ';
+		}
+
+		len = (completebuffer ? strlen(completebuffer) : 0);
+		completebuffer = (char*)ggz_realloc(completebuffer,
+			len + strlen(buffer) + 1);
+		if(len)
+			strncat(completebuffer, buffer, strlen(buffer) + 1);
+		else
+			strncpy(completebuffer, buffer, strlen(buffer) + 1);
+	}
+
+	if(completebuffer) ggz_free(completebuffer);
+
+	fclose(f);
+
+	return rc;
+}
+
+/* Upgrade a database */
+static int upgrade(const char *oldversion, const char *newversion)
+{
+	char upgradefile[1024];
+
+	snprintf(upgradefile, sizeof(upgradefile), "%s/upgrade_%s_%s.sql",
+		GGZDDATADIR, oldversion, newversion);
+
+	return setupschema(upgradefile);
+}
+
 /* Function to initialize the mysql database system */
 GGZReturn _ggzdb_init(ggzdbConnection connection, int set_standalone)
 {
-	int rc;
+	int mysql_rc;
+	int rc = GGZ_OK, ret;
 	char query[4096];
 	my_bool reconnect = true;
 	MYSQL_RES *res;
 	MYSQL_ROW row;
+	int init;
+	char *version;
+	char schemafile[1024];
 
 	if(conn) return GGZ_OK;
 
@@ -91,31 +164,72 @@
 		return GGZ_ERROR;
 	}
 
-	snprintf(query, sizeof(query), "CREATE TABLE `users` "
-		"(`id` int4 AUTO_INCREMENT PRIMARY KEY, `handle` varchar(255), `password` varchar(255), "
-		"`name` varchar(255), `email` varchar(255), `lastlogin` int8, `perms` int8, `firstlogin` int8)");
-
-	rc = mysql_query(conn, query);
-
 	/* Check if we have canonicalstr() available. This would also be possible
 	 * by checking the mysql.func table for the presence of the function, but
 	 * that assumes read access to the mysql table.  */
 	mysql_canonicalstr = 0;
 	snprintf(query, sizeof(query), "SELECT canonicalstr(\"Fuß¹²³\")");
-	rc = mysql_query(conn, query);
-	if(!rc){
+	mysql_rc = mysql_query(conn, query);
+	if(!mysql_rc){
 		res = mysql_store_result(conn);
 		if(res){
 			row = mysql_fetch_row(res);
-			if(!strcmp(row[0], "fuss123")){
+			if(row && !strcmp(row[0], "fuss123")){
 				mysql_canonicalstr = 1;
 			}
 			mysql_free_result(res);
 		}
 	}
 
-	/* Hack. */
-	return GGZ_OK;
+	/* Check whether the database is ok */
+	init = 1;
+	mysql_rc = mysql_query(conn, "SELECT `value` FROM `control` WHERE `key` = 'version'");
+	if(!mysql_rc)
+	{
+		res = mysql_store_result(conn);
+		if(res && mysql_num_rows(res) == 1)
+		{
+			init = 0;
+			row = mysql_fetch_row(res);
+			version = row[0];
+			if(strcmp(version, GGZDB_VERSION_ID))
+			{
+				/* Perform upgrade if possible */
+				ggz_error_msg("Wrong database version: %s present, %s needed.\n", version, GGZDB_VERSION_ID);
+				if(!upgrade(version, GGZDB_VERSION_ID))
+				{
+					ggz_error_msg_exit("Database upgrade failed.\n");
+					rc = GGZDB_ERR_DB;
+				}
+			}
+		}
+		if(res)
+		{
+			mysql_free_result(res);
+		}
+	}
+
+	/* Initialize the database if needed */
+	if(init)
+	{
+		snprintf(schemafile, sizeof(schemafile), "%s/mysql_schema.sql", GGZDDATADIR);
+
+		ret = setupschema(schemafile);
+		if(!ret) rc = GGZDB_ERR_DB;
+
+		snprintf(query, sizeof(query), "INSERT INTO `control` "
+			"(`key`, `value`) VALUES ('version', '%s')", GGZDB_VERSION_ID);
+
+		mysql_rc = mysql_query(conn, query);
+
+		if(mysql_rc || mysql_affected_rows(conn) == 0)
+			rc = GGZDB_ERR_DB;
+
+		if(rc == GGZDB_ERR_DB)
+			ggz_error_msg_exit("Could not initialize the database (with %s).\n", schemafile);
+	}
+
+	return rc;
 }
 
 
Index: database/pgsql_schema.sql
===================================================================
--- database/pgsql_schema.sql	(revision 10173)
+++ database/pgsql_schema.sql	(working copy)
@@ -11,7 +11,7 @@
 	"name" character varying(256),
 	"email" character varying(256),
 	"lastlogin" bigint,
-	"permissions" integer,
+	"permissions" integer DEFAULT 7,
 	"firstlogin" bigint,
 	"confirmed" boolean
 );
Index: database/ggzdb_util.c
===================================================================
--- database/ggzdb_util.c	(revision 10173)
+++ database/ggzdb_util.c	(working copy)
@@ -120,3 +120,26 @@
 	ggz_free(sp);
 }
 
+/* Helper function: replace all patterns in a string */
+char *strreplace(const char *str, const char *pattern, const char *subst)
+{
+	char *ss, *sstmp;
+	char *ptr;
+
+	if(!str) return NULL;
+
+	ss = ggz_strdup(str);
+
+	while((ptr = strstr(ss, pattern)))
+	{
+		sstmp = ggz_strdup(ss);
+		memcpy(sstmp, ss, ptr - ss);
+		memcpy(sstmp + (ptr - ss), subst, strlen(subst));
+		memcpy(sstmp + (ptr - ss) + strlen(subst), ptr + strlen(pattern), strlen(str) - strlen(pattern) - (ptr - ss) + 1);
+		ggz_free(ss);
+		ss = sstmp;
+	}
+
+	return ss;
+}
+
