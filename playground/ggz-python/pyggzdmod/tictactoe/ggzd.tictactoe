#!/usr/bin/env python
#
# GGZ Gaming Zone TicTacToe server
# Copyright (C) 2001, 2002 Josef Spillner, dr_maux@users.sourceforge.net
# Original C version Copyright (C) 2000 Brent Hendricks
# Published under GNU GPL conditions

import ggzdmod;
import socket;

# Constants ######################################################

# Server opcodes
MSG_SEAT      = 0
MSG_PLAYERS   = 1
MSG_MOVE      = 2
MSG_GAMEOVER  = 3
REQ_MOVE      = 4
RSP_MOVE      = 5
SND_SYNC      = 6

# Errors
ERR_STATE     = -1
ERR_TURN      = -2
ERR_BOUND     = -3
ERR_FULL      = -4

# Client opcodes
SND_MOVE      = 0
REQ_SYNC      = 1

# States
STATE_INIT    = 0
STATE_WATT    = 1
STATE_PLAYING = 2
STATE_DONE    = 3

# Classes ########################################################

# TicTacToe game class
class Game:
	def __init__ (self):
		self.turn = -1
		self.move_count = 0
		self.state = STATE_INIT
		self.board = []
		for i in range(9):
			self.board.append(-1)

# Global objects #################################################

# Global game object
game = Game()

# TicTacToe functions ############################################

def ttt_send_sync ():
	pass

def ttt_send_players ():
	pass

def ttt_send_seat (seat):
	pass

def ttt_recv_op (seat):
	#ggzseat = ggzdmod.getSeat(seat)
	#fd = ggzseat.fd
	#fd = ggzdmod.getPlayerSocket(seat)
	fd = 0
	sock = socket.fromfd(fd, socket.AF_UNIX, socket.SOCK_STREAM)
	op = socket.ntohl(sock.recv(4))
	print "Opcode: ", op

	if op == SND_MOVE:
		move = ttt_handle_move(seat)
		if move != 0:
			ttt_update(EVENT_MOVE, move)
	pass

def ttt_handle_move (seat):
	pass

def ttt_update (type, move):
	pass

# Network hooks ##################################################

# Launch the game
def hook_state (state):
	print "* state", state
	game.state = state

# A player joins
def hook_join (num, type, name, fd):
	print "* join: ", num
	if game.state != STATE_WAIT:
		return
	print "(Name: " + name + ")"

	ttt_send_seat(num)
	ttt_send_players()

	if ggzdmod.seatsOpen == 0:
		if game.turn == -1:
			turn = 0
		else:
			ttt_send_sync()

# A player leaves
def hook_leave (num, type, name, fd):
	print "* leave: ", num
	if game.state != STATE_PLAYING:
		return
	print "(Name: " + name + ")"

	game.state = STATE_DONE
	ttt_send_players()

# A seat change happens
def hook_seat (num, type, name, fd):
	print "* seat change at: ", num
	print "(Old name: " + name + ")"

	(num2, type2, name2, fd2) = ggzdmod.getSeat(num)
	print "(New name: " + name2 + ")"

# Message from player
def hook_player (seat):
	print "* player: ", seat
	if game.state != STATE_PLAYING:
		return
	print "(Name: " + ggzdmod.getPlayerName(seat) + ")"

	op = ttt_recv_op(seat)

# Main program ###################################################

# Setup hooks
ggzdmod.setHandler(ggzdmod.EVENT_STATE, hook_state)
ggzdmod.setHandler(ggzdmod.EVENT_JOIN, hook_join)
ggzdmod.setHandler(ggzdmod.EVENT_LEAVE, hook_leave)
ggzdmod.setHandler(ggzdmod.EVENT_DATA, hook_player)
ggzdmod.setHandler(ggzdmod.EVENT_SEAT, hook_seat)

# Test
##ttt_recv_op(0)

# Start
ggzdmod.connect()
ggzdmod.log("PiTTTy")
ggzdmod.mainLoop()

