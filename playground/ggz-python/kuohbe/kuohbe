#!/usr/bin/env python

import sys
#import re
#import select
#import os
import imp
import gettext

import qt
import qtcanvas
import kdecore
import kdeui
import kfile

import rsvgsdl

from kdecore import i18n

try:
	import ggzsettings
	DATAPATH = ggzsettings.DATAPATH + "/ggzboard/"
	MODULEPATH = ggzsettings.MODULEPATH
	I18NPATH = ggzsettings.I18NPATH
except:
	DATAPATH = "./"
	MODULEPATH = "./"
	I18NPATH = "./"

gettext.install("ggzpython", I18NPATH, 1)

i18n_noop = lambda s: s

about = kdecore.KAboutData("kuohbe",
	i18n_noop("Kuohbe"),
	"0.1",
	i18n_noop("Board games container framework"),
	kdecore.KAboutData.License_GPL,
	"(C) 2005 Josef Spillner <spillner@kde.org>")

class BoardWidget(qtcanvas.QCanvasView):
	def __init__(self, canvas, parent):
		qtcanvas.QCanvasView.__init__(self, canvas, parent)

		#self.viewport().setPaletteBackgroundPixmap(qt.QPixmap("sunset.jpg"))
		self.sprites_copy = None
		self.canvas_copy = canvas
		self.current = None

	def contentsMousePressEvent(self, event):
		#print "event!"
		#print event
		#print event.x(), event.y()
		for index in range(len(self.sprites_copy)):
			spriteentry = self.sprites_copy[index]
			(s, smetadata) = spriteentry
			if not smetadata:
				continue

			if event.x() >= s.x() and event.y() >= s.y():
				if event.x() <= s.x() + s.width() and event.y() <= s.y() + s.height():
					#print "Sprite!", s
					#print "Meta", smetadata
					(i, j, type) = smetadata

					if self.current:
						(olds, oldsmetadata) = self.sprites_copy[self.current]
						(oldi, oldj, oldtype) = oldsmetadata
						print "Move", oldsmetadata, smetadata
						olds.move(s.x(), s.y())
						oldsmetadata = (i, j, oldtype)
						self.sprites_copy[self.current] = (olds, oldsmetadata)
						self.current = None
						break
					else:
						if type != "board":
							print "Pick", smetadata
							self.current = index
							#spriteentry
							break

		self.canvas_copy.update()

	def setSprites(self, sprites):
		self.sprites_copy = sprites

class MainWin(kdeui.KMainWindow):
	def __init__(self, *args):
		apply(kdeui.KMainWindow.__init__, (self,) + args)

		self.game = None
		self.net = None
		self.ggzmode = 0
		self.ggzsuccess = 0

		self.menuitems = {}
		self.canvas = None
		self.sprites = []
		self.arrays = []

		canvas = qtcanvas.QCanvas(self)
		canvas.resize(1200, 1200)
		#canvas.setFixedSize(500, 500)
		self.canvas = canvas
		canvas.setBackgroundPixmap(qt.QPixmap("sunset.jpg"))

		area = BoardWidget(canvas, self)
		area.show()
		area.viewport().resize(500, 500)
		#area.viewport().setFixedSize(500, 500)
		area.setSprites(self.sprites)

		#self.openAction = kdeui.KStdAction.open(self.slotOpen, self.actionCollection())
		self.quitAction = kdeui.KStdAction.quit(self.slotQuit, self.actionCollection())

		dir = "kuohbedata/"

		games = qt.QPopupMenu(self)
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "chess.png")), "Chess")
		self.menuitems[ret] = "chess"
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "reversi.png")), "Reversi")
		self.menuitems[ret] = "reversi"
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "ludo.png")), "Ludo")
		self.menuitems[ret] = "madn"
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "checkers.png")), "Checkers")
		self.menuitems[ret] = "checkers"
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "hnefatafl.png")), "Hnefatafl")
		self.menuitems[ret] = "hnefatafl"
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "arimaa.png")), "Arimaa")
		self.menuitems[ret] = "arimaa"
		ret = games.insertItem(qt.QIconSet(qt.QPixmap(dir + "go.png")), "Go")
		self.menuitems[ret] = "go"

		self.connect(games, qt.SIGNAL("activated(int)"), self.newgame)

		filemenu = qt.QPopupMenu(self)
		filemenu.insertItem(i18n("&New game"), games)
		filemenu.insertSeparator()
		self.quitAction.plug(filemenu)
		self.menuBar().insertItem(i18n("&Game"), filemenu)

		optionmenu = qt.QPopupMenu(self)
		optionmenu.insertItem(i18n("&Configuration..."))

		self.menuBar().insertItem(i18n("&Options"), optionmenu)

		helpmenu = self.helpMenu()
		self.menuBar().insertItem(i18n("&Help"), helpmenu)

		self.setCentralWidget(area)

		self.resize(600, 600)

	def svgpixmap(self, filename, width, height):
		svg = rsvgsdl.render(filename, width, height)
		rawdata = svg.data()
		if rawdata:
			svg.qtconversion()
			rawdata = svg.data()
			#print "raw!"
			im = qt.QImage(rawdata, svg.width(), svg.height(),
				32, None, 0, qt.QImage.IgnoreEndian)
			#print "img", im
			im.setAlphaBuffer(True)
			p = qt.QPixmap()
			p.convertFromImage(im)
			#print "pix", p
			#print "pix-width", p.width()
		else:
			p = qt.QPixmap(width, height)
			p.fill(qt.QColor(255, 200, 0))
		return p

	def newgame(self, id):
		print "NEW GAME", id
		print self.menuitems[id]
		gamename = self.menuitems[id]

		try:
			(fileobj, filename, desc) = imp.find_module("module_" + gamename, None)
		except:
			# kmessagebox?
			return

		mod = imp.load_module("ggzboardgame", fileobj, filename, desc)
		fileobj.close()
		self.game = mod.ggzboardgame

		if self.ggzmode:
			try:
				(fileobj, filename, desc) = imp.find_module("net_" + gamename, None)
				mod = imp.load_module("ggzboardnet", fileobj, filename, desc)
				fileobj.close()
				self.net = mod.ggzboardnet
				self.ggzsuccess = 1
			except:
				self.net = None
				self.ggzsuccess = 0

		self.setCaption(self.game.name())

		# fake!!
		#self.game.board[0][0] = ("dog", "gold")
		#self.game.board[1][1] = ("rabbit", "silver")
		#self.game.board[1][0] = ("elephant", "gold")
		#self.game.board[0][1] = ("camel", "silver")

		# FIXME: must be deleted?!
		for spriteentry in self.sprites:
			(s, smetadata) = spriteentry
			s.hide()
		self.sprites.__delslice__(0, len(self.sprites))
		#for s in self.sprites:
			#del s
		#self.sprites = []
		#for a in self.arrays:
			#del a
		#self.arrays = []

		for j in range(self.game.height):
			for i in range(self.game.width):
				style = None
				if not self.game.boardstyle:
					if not self.game.noemptytiles:
						style = (255, 255, 255)
					if self.game.swaptiles:
						if (i + j) % 2:
							style = (255, 255, 255)
						else:
							style = (255, 255, 200)
				else:
					style = self.game.boardstyle[j][i]

				if style:
					color = style
					p = qt.QPixmap(64, 64)
					if len(color) == 3:
						p.fill(qt.QColor(color[0], color[1], color[2]))
					else:
						p.load(color)
					painter = qt.QPainter()
					painter.begin(p)
					painter.setBrush(qt.QColor(0, 0, 0))
					painter.drawLine(0, 0, 0, 63)
					painter.drawLine(0, 0, 63, 0)
					painter.drawLine(0, 63, 63, 63)
					painter.drawLine(63, 0, 63, 63)
					painter.end()
					l = []
					l.append(p)
					a = qtcanvas.QCanvasPixmapArray(l)
					s = qtcanvas.QCanvasSprite(a, self.canvas)
					s.move(i * 64 + 15, j * 64 + 15)
					s.setZ(-2)
					s.show()
					smetadata = (i, j, "board")
					self.sprites.append((s, smetadata))
					self.arrays.append(a)

				f = self.game.board[j][i]
				if f:
					#print "got figure!", f
					figure = self.game.figure(f)
					print figure
					if figure[-4:] == ".svg":
						#p = qt.QPixmap()
						p = self.svgpixmap(figure, 64, 64)
					else:
						p = qt.QPixmap(figure)
					l = []
					l.append(p)
					#qt.QValueList
					a = qtcanvas.QCanvasPixmapArray(l)
					#print "ok-1", a
					if a.count() > 0:
						s = qtcanvas.QCanvasSprite(a, self.canvas)
						#print "ok-2", s
						s.move(i * 64 + 15, j * 64 + 15)
						#print "ok-3"
						s.show()
						#print "ok-4"
						smetadata = (i, j, "figure")
						self.sprites.append((s, smetadata))
					self.arrays.append(a)

		self.canvas.update()
		print "done!"

	def slotQuit(self):
		self.close()

args = kdecore.KCmdLineArgs
args.init(sys.argv, about)

a = kdecore.KApplication()
w = MainWin()
w.show()
a.exec_loop()

