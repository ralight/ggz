#!/usr/bin/env python
#
# Metacle - Aggregation of metaservers
# Copyright (C) 2006 Josef Spillner <josef@ggzgamingzone.org>
# Published under GNU GPL conditions

import xml.dom.minidom
import imp
import glob

try:
	import pg
	global_database = True
except:
	global_database = False

global_verbose = True

def status(s):
	if global_verbose:
		print "||", s

class MetaConf:
	def __init__(self, configfile):
		self.metaservers = {}

		try:
			f = file(configfile)
		except:
			print "Error: Could not load configuration file %s." % configfile
			return

		lines = f.readlines()
		f.close()

		for line in lines:
			line = line.strip()

			if not line or line[0] == "#":
				continue

			#print ">>>", line
			entry = line.split("|")
			if len(entry) != 2:
				print "Warning: invalid entry %s." % line
				continue

			(service, url) = entry
			self.metaservers[url] = service

class MetaLoader:
	def __init__(self):
		self.loaders = []

		searchpaths = []
		searchpaths.append("protocols")

		for path in searchpaths:
			protocolfiles = glob.glob(path + "/*.py")

			for protocolfile in protocolfiles:
				protocolfile = protocolfile.split("/")[-1]
				protocolfile = protocolfile[:-3]

				(fileobj, filename, desc) = imp.find_module(protocolfile, [path])
				mod = imp.load_module("protocol", fileobj, filename, desc)
				fileobj.close()

				#print "MOD", mod
				protocol = mod.MetaProtocol()
				#print "->", protocol.services
				self.loaders.append(protocol)
	
	def load(self, service, url):
		for loader in self.loaders:
			if service in loader.services:
				return loader.load(url)
		print "Warning: no handler available for %s." % service
		return None

def ghash(gameserver):
	#s = gameserver["host"]
	#s += str(gameserver["port"])
	s = gameserver["uri"]
	return hash(s)

class MetaBase:
	def __init__(self):
		self.conn = None
		self.metaservers = {}
		self.gameservers = {}

	def connect(self):
		if not global_database:
			return
		status("using database persistence")
		self.conn = pg.DB(host="localhost", dbname="meta", user="meta", passwd="meta")

		q = self.conn.query("SELECT key, url FROM metaservers")
		for row in q.dictresult():
			key = row['key']
			url = row['url']
			self.metaservers[url] = key

		query = "SELECT key, uri, title, version, state, topic, players, available "
		query += "FROM gameservers"
		q = self.conn.query(query)
		for row in q.dictresult():
			row["gamename"] = row["key"]
			del row["key"]
			gameserver = row
			self.gameservers[ghash(gameserver)] = gameserver

		status("database persistence loaded")

	def store(self, gameserver):
		if not self.conn:
			return
		if self.gameservers.has_key(ghash(gameserver)):
			return
		#print "*store*", gameserver

		if not gameserver.has_key("gamename"):
			print "Warning: invalid game server entry found."

		key = gameserver.get("gamename")
		uri = gameserver.get("uri", "")
		version = gameserver.get("version", "")
		state = gameserver.get("state", "")
		topic = gameserver.get("topic", "")
		players = gameserver.get("players", "0")
		available = gameserver.get("available", "-1")

		try:
			players = int(players)
		except:
			players = 0
		try:
			available = int(available)
		except:
			available = -1

		tuple = (key, uri, version, state, topic, players, available)

		query = "INSERT INTO gameservers "
		query += "(key, uri, version, state, topic, players, available) VALUES "
		query += "('%s', '%s', '%s', '%s', '%s', '%i', '%i')" % tuple
		q = self.conn.query(query)

	def storemeta(self, service, url):
		if not self.conn:
			return
		if self.metaservers.has_key(url):
			return
		service = self.quote(service)
		url = self.quote(url)
		query = "INSERT INTO metaservers (key, url) VALUES ('%s', '%s')" % (service, url)
		q = self.conn.query(query)

	def quote(self, s):
		return s.replace("'", "\\'")

class MetaMeta:
	def __init__(self):
		self.config = MetaConf("metacle.conf")
		self.base = MetaBase()
		self.loader = MetaLoader()

		self.base.connect()

		allgameservers = {}

		status("start query")
		for url, service in self.config.metaservers.iteritems():
			#print ">>> check", url

			gameservers = self.loader.load(service, url)

			self.base.storemeta(service, url)

			if gameservers:
				#print "== list"
				for g in gameservers:
					#print g, "=>", ghash(g)
					allgameservers[ghash(g)] = g

		for h, g in allgameservers.iteritems():
			print "##", h
			self.base.store(g)

		status("done")

status("starting up")
m = MetaMeta()

