Index: kreversigame.h
===================================================================
--- kreversigame.h	(Revision 629123)
+++ kreversigame.h	(Arbeitskopie)
@@ -30,6 +30,13 @@
 
 class Engine;
 
+namespace KGGZMod
+{
+    class Module;
+};
+
+class KGGZRaw;
+
 /**
  *  KReversiGame incapsulates all of the game logic.
  *  Whenever the board state changes it emits corresponding signals.
@@ -148,6 +155,10 @@
     void boardChanged();
     void moveFinished();
     void computerCantMove();
+    void networkError();
+private slots:
+    void networkData(int fd);
+    void networkErrorHandler();
 private:
     enum Direction { Up, Down, Right, Left, UpLeft, UpRight, DownLeft, DownRight };
     /**
@@ -215,5 +226,10 @@
      *  @see m_changedChips
      */
     QStack<PosList> m_undoStack;
+    /**
+     *  Network connection to GGZ
+     */
+    KGGZMod::Module *m_mod;
+    KGGZRaw *m_raw;
 };
 #endif
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(Revision 629123)
+++ CMakeLists.txt	(Arbeitskopie)
@@ -1,3 +1,5 @@
+include(GGZ.cmake)
+
 project(kreversi)
 add_subdirectory( pics ) 
 add_subdirectory( sounds ) 
@@ -2,4 +4,5 @@
 add_subdirectory( icons ) 
+add_subdirectory( kggzmod )
 
-include_directories( ${CMAKE_SOURCE_DIR}/libkdegames ${CMAKE_SOURCE_DIR}/libkdegames/highscore  )
+include_directories( ${CMAKE_SOURCE_DIR}/libkdegames ${CMAKE_SOURCE_DIR}/libkdegames/highscore ${KGGZMOD_INCLUDE_DIR} )
 
@@ -24,9 +27,10 @@
 
 kde4_add_executable(kreversi ${kreversi_SRCS})
 
-target_link_libraries(kreversi ${KDE4_KDEUI_LIBS} kdegames)
+target_link_libraries(kreversi ${KDE4_KDEUI_LIBS} kdegames ${KGGZMOD_LIBS})
 install(TARGETS kreversi  DESTINATION ${BIN_INSTALL_DIR} )
 
+register_ggz_module(module.dsc)
 
 ########### install files ###############
 
Index: module.dsc
===================================================================
--- module.dsc	(Revision 0)
+++ module.dsc	(Revision 0)
@@ -0,0 +1,10 @@
+[ModuleInfo]
+Name = KReversi
+Author = Mario Weilguni, Inge Wallin, Dmitry Suzdalev
+CommandLine = kreversi
+Frontend = kde
+Homepage = http://games.kde.org/
+ProtocolEngine = Reversi
+ProtocolVersion = 4
+Version = 2.0
+
Index: kreversigame.cpp
===================================================================
--- kreversigame.cpp	(Revision 629123)
+++ kreversigame.cpp	(Arbeitskopie)
@@ -22,6 +22,10 @@
  ********************************************************************/
 #include <kdebug.h>
 
+#include <kggzmod/module.h>
+#include <kggzmod/player.h>
+#include <kggzmod/kggzraw.h>
+
 #include "kreversigame.h"
 #include "Engine.h"
 
@@ -39,11 +43,24 @@
     m_score[White] = m_score[Black] = 2;
 
     m_engine = new Engine(1);
+
+    kDebug() << "GGZDEBUG: see if we're in ggz mode" << endl;
+    if(KGGZMod::Module::isGGZ())
+    {
+        kDebug() << "GGZDEBUG: yep we're in ggz mode, now activate kggzmod" << endl;
+        m_mod = new KGGZMod::Module("KReversi");
+        connect(m_mod, SIGNAL(signalError()), SLOT(networkErrorHandler()));
+        connect(m_mod, SIGNAL(signalNetwork(int)), SLOT(networkData(int)));
+        kDebug() << "GGZDEBUG: kggzmod activated" << endl;
+    }
+    m_raw = NULL;
 }
 
 KReversiGame::~KReversiGame()
 {
     delete m_engine;
+    delete m_raw;
+    delete m_mod;
 }
 
 void KReversiGame::makePlayerMove( int row, int col, bool demoMode )
@@ -574,4 +591,93 @@
     return m_cells[row][col];
 }
 
+////////////////////////////////////////////////////////////////////////////
+// Network code starts here - might be moved or auto-generated in the future
+////////////////////////////////////////////////////////////////////////////
+
+// FIXME: move those to a protocol class
+#define MSG_SEAT 0
+#define MSG_PLAYERS 1
+#define MSG_START 5
+#define MSG_SYNC 6
+
+void KReversiGame::networkErrorHandler()
+{
+    kError() << "GGZDEBUG: Network error, disconnect all channels" << endl;
+    delete m_raw;
+    delete m_mod;
+    m_raw = NULL;
+    m_mod = NULL;
+
+    emit networkError();
+    // This is either on the GGZ channel or on the game channel
+    // FIXME: propagate error information to the user
+}
+
+void KReversiGame::networkData(int fd)
+{
+    int opcode;
+    char *playername1;
+    char *playername2;
+    int playertype1;
+    int playertype2;
+    int seat;
+    QString name1;
+    QString name2;
+    Q_INT8 turn, boardfield;
+
+    kDebug() << "GGZDEBUG: Network traffic on fd " << fd << endl;
+
+    if(!m_raw)
+    {
+        kDebug() << "GGZDEBUG: Set up packet reader" << endl;
+        m_raw = new KGGZRaw();
+        m_raw->setNetwork(fd);
+        connect(m_raw, SIGNAL(signalError()), SLOT(networkErrorHandler()));
+    }
+
+    *m_raw >> opcode;
+    kDebug() << "GGZDEBUG: opcode=" << opcode << endl;
+
+    if(opcode == MSG_SEAT)
+    {
+        *m_raw >> seat;
+        kDebug() << "GGZDEBUG: MSG_SEAT: seat=" << seat << endl;
+    }
+    else if(opcode == MSG_PLAYERS)
+    {
+        *m_raw >> playertype1;
+        if(playertype1 != KGGZMod::Player::open)
+        {
+            *m_raw >> playername1;
+            name1 = QString(playername1);
+        }
+        *m_raw >> playertype2;
+        if(playertype1 != KGGZMod::Player::open)
+        {
+            *m_raw >> playername2;
+            name2 = QString(playername2);
+        }
+        kDebug() << "GGZDEBUG: MSG_PLAYERS: player1=" << name1 << " player2=" << name2 << endl;
+    }
+    else if(opcode == MSG_SYNC)
+    {
+        *m_raw >> turn;
+        for(int i = 0; i < 64; i++)
+        {
+            *m_raw >> boardfield;
+        }
+        kDebug() << "GGZDEBUG: MSG_SYNC: turn=" << turn << endl;
+    }
+    else if(opcode == MSG_START)
+    {
+        kDebug() << "GGZDEBUG: MSG_START" << endl;
+    }
+    else
+    {
+        kDebug() << "GGZDEBUG: Waaaah, we've not implemented the whole protocol yet!" << endl;
+        networkError();
+    }
+}
+
 #include "kreversigame.moc"
