#!/usr/bin/env ruby

require "RGGZMod"
require "socket"

class UdpTestClient < RGGZMod
	def initialize
		super
	end

	def displayseats
		puts "-- begin seats --"
		for seat in seats()
			puts seat
		end
		for spectator in spectators()
			puts spectator
		end
		puts "-- end seats --"
	end

	def event(id, data)
		super

		puts "UdpTestClient: event!"

		if id == GGZMod::EVENTSTATE
			state = @client.get_state
			puts "State is now " + state.to_s
		elsif id == GGZMod::EVENTSERVER
			fd = data
			puts "Socket to server is " + fd.to_s

			sock = Socket.for_fd(fd)
			peername = sock.getpeername
			puts "... socket peer:", peername
			puts "... (0)", peername[0]
			puts "... (1)", peername[1]

			# FIXME: fd represents a TCP channel, but maybe we want UDP or RDP?
			# Ruby socket class hierarchy:
			# IO -> BasicSocket -> IPSocket -> TCPSocket -> SOCKSSocket
			#                               -> UDPSocket
			#                   -> Socket
			#                   -> UNIXSocket
			# However we already get TCP semantics with the pre-connected fd!
			# Only Socket and IO give us the possibility to make use of it with for_fd/new.
			# But only Socket gives us getpeername via BasicSocket!

			# FIXME: we only get 2 characters being 1 and 0, respectively
			# maybe this has to do with passing on the file descriptor?
			# It should work in theory though, see the Widelands server for getpeername().

			displayseats
		elsif id == GGZMod::EVENTPLAYER
		elsif id == GGZMod::EVENTSEAT
			displayseats
		elsif id == GGZMod::EVENTSPECTATOR
		elsif id == GGZMod::EVENTCHAT
		elsif id == GGZMod::EVENTSTATS
		elsif id == GGZMod::EVENTINFO
		elsif id == GGZMod::EVENTRANKINGS
		elsif id == GGZMod::EVENTERROR
			#@client.disconnect
		end
	end

	def loop
		super
	end
end

puts "## UDP Test Client ##"

client = UdpTestClient.new
client.loop

puts "## Bye ##"

