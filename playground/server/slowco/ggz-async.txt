Approaches to avoid blocking network operations in GGZ
======================================================

1) Resolving the name of the server, traditionally a blocking call with
   gethostbyname() or getaddrinfo().
   There are three ways to overcome this problem:
   a) use getaddrinfo_a: this is broken, see server/async/issue.txt
   b) use an external library: libggz can do that with libasyncns
   c) use a thread which can block: libggz could do that with threaded connect

   GGZ would use c) with the alternative of b) because it is more portable,
   although it requires an extra dependency library.

2) Connecting to the server, traditionally a blocking call with connect().
   There is one way to overcome this problem:
   a) use a thread which can block: libggz could do that with threaded connect

   GGZ would use a) inside ggzcore so that all the way from the invocation of
   ggzcore_server_connect() to the arrival of GGZ_CONNECTED nothing will
   block and the application can do whatever it wants.

3) Sending packets forth and back, traditionally blocking calls with read()
   and write().
   There are several ways to overcome this problem, including:
   a) using quantised packets with the DIO protocol layer
   b) using a SAX parser with an XML protocol layer

   GGZ would use both methods in its games depending on what the game author
   wants. Using GGZComm makes this an easy choice because the two protocol
   implementations can be generated automatically and be switched quickly.

-----------------------------------------------------------------------------

Notes on how libggz works:
 - asynchrony can be proved by
   - ggz_async, for resolver and connection (requires pthreads)
   - libasyncns, for resolver only
   - gai_a, for resolver only

 - if ggz_resolvename() is called, it
   - returns immediately with hostname instead of IP address
     (if no asynchrony is available)
   - returns immediately with NULL
     (otherwise)
   + invokes ggzNetworkNotify callback with its immediate return
     argument or with the resolved IP address
     (whenever the callback is set)
   + notifies on ggz_async_fd() with GGZ_ASYNC_RESOLVER

 - if ggz_make_socket() is called with GGZ_CLIENT_SOCK_ASYNC, it
   - ignores the request to asynchrony, creates the socket in blocking
     mode and returns it
     (if no asynchrony is available)
   - resolves the name first and returns GGZ_SOCKET_PENDING, and
     creates the socket in blocking mode after this event
     (if only gai_a or libasyncns are available)
   - runs both name resolving and socket creation in another thread
     and returns GGZ_SOCKET_PENDING
     (if ggz_async is available)
   + invokes ggzNetworkNotify callback with its immediate return
     argument or with the resolved IP address
     (whenever the callback is set)
   + notifies on ggz_async_fd() with GGZ_ASYNC_RESOLVER and GGZ_ASYNC_CONNECT

