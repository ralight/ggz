### Generated by GGZComm/ruby version 0.4
### Protocol 'tictactoe', version '4'
### Do NOT edit this file!

require 'socket'

class GGZRawSocket < Socket
	def sendint(n)
		n1 = (n >> 24) & 0xff
		n2 = (n >> 16) & 0xff
		n3 = (n >> 8) & 0xff
		n4 = (n >> 0) & 0xff
		self.putc(n1)
		self.putc(n2)
		self.putc(n3)
		self.putc(n4)
	end

	def getint()
		n1 = self.getc
		n2 = self.getc
		n3 = self.getc
		n4 = self.getc
		n = (n1 << 24) + (n2 << 16) + (n3 << 8) + n4
		return n
	end

	def sendbyte(n)
		self.putc(n)
	end

	def getbyte()
		n = self.getc
		return n
	end

	def sendstring(s)
		self.sendint(s.length)
		self.write(s)
	end

	def getstring()
		length = self.getint()
#		if length < 0
#			raise 'ggzcommerror'
#		end
		s = self.read(length)
		return s
	end
end

class TictactoeProto
	::MSGGAMEOVER = 3
	::MSGMOVE = 2
	::RSPMOVE = 5
	::REQSYNC = 1
	::SNDSYNC = 6
	::REQMOVE = 4
	::SNDMOVE = 0
	::GGZ__SEAT_OPEN = 1
	::MSGPLAYERS = 1
	::MSGSEAT = 0

	def initialize
		@move_c = nil
		@num = nil
		@seat = nil
		@name = nil
		@status = nil
		@player = nil
		@move = nil
		@turn = nil
		@space = nil
		@winner = nil

		@notifier = nil
		@fd = -1
		@socket = nil
		@ret = 0
		@requirelink = 0
		@nextlink = 0

		@seat = Array.new
		@seat << ::GGZ__SEAT_OPEN
		@seat << ::GGZ__SEAT_OPEN
	end

	def ggzcomm_sndmove(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		@move_c = s.getint()
		if @notifier
			@notifier.call(::SNDMOVE)
		end
	end

	def ggzcomm_reqsync(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		if @notifier
			@notifier.call(::REQSYNC)
		end
	end

	def ggzcomm_msgseat(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::MSGSEAT)
		s.sendbyte(@num)
	end

	def ggzcomm_msgplayers(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::MSGPLAYERS)
		for i1 in 0..2
			s.sendbyte(@seat[i1])
			if (@seat[i1] != ::GGZ__SEAT_OPEN)
				s.sendstring(@name[i1])
			end
		end
	end

	def ggzcomm_reqmove(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::REQMOVE)
	end

	def ggzcomm_rspmove(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::RSPMOVE)
		s.sendchar(@status)
	end

	def ggzcomm_msgmove(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::MSGMOVE)
		s.sendbyte(@player)
		s.sendbyte(@move)
	end

	def ggzcomm_sndsync(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::SNDSYNC)
		s.sendchar(@turn)
		for i1 in 0..9
			s.sendchar(@space[i1])
		end
	end

	def ggzcomm_msggameover(player)
		s = GGZRawSocket.for_fd($server.get_seat_fd(player))
		s.sendbyte(::MSGGAMEOVER)
		s.sendchar(@winner)
	end

	def ggzcomm_network_main
		opcode = getint()

		if @requirelink
			if opcode != @nextlink
				raise 'ggzcommerror'
			end
			@requirelink = 0
		end

		if opcode == ::SNDMOVE
			ggzcomm_sndmove
		end
		if opcode == ::REQSYNC
			ggzcomm_reqsync
		end
	end

	def ggzcomm_set_notifier_callback(notifier)
		@notifier = notifier
	end

	def ggzcomm_set_fd(fd)
		@fd = fd
		@socket = Socket.for_fd(fd)
	end
end

