#!/usr/bin/env ruby

require "GGZDMod"
require "socket"

puts "## RubyToe ##"

begin
	require "TTTAI"
	$ai = TTTAI.new
	puts "## Info: Using TTT-AI plugin for higher intelligence ##"
rescue LoadError
	$ai = nil
	puts "## Warning: TTT-AI not found, using internal random AI ##"
end

begin
	require "rubytoenet.rb"
rescue LoadError
	puts "## Error: TTT-Network not found, aborting now ##"
	Thread.exit
end

class TTT < TTTProto
	def initialize
		@turn = 0
		@board = Array.new(9)
	end

	def input(p)
		s = GGZRawSocket.for_fd($server.get_seat_fd(p))

		op = s.geti()

		if op == ::SND_MOVE then
			puts "   * Received: move"
			moveval = s.geti()
			puts "     Move to " + moveval.to_s
			if handle_move(p, moveval) then
				handle_next_move()
			else
				request_move(@turn)
			end
		elsif op == ::REQ_SYNC then
			puts "   * Received: sync"
			# discard for now (would result in snd_sync)
		else
			puts "   * Received: unknown opcode"
			puts "**PROTOCOL ERROR** - aborting now"
			Thread.exit
		end
	end

	def handle_move(p, moveval)
		puts "     Evaluate move of turn " + @turn.to_s + " being " + moveval.to_s
		status = evaluate_move(p, moveval)
		puts "     Status is " + status.to_s
		send_movestatus(p, status)
		if status != ::MOVE_OK then
			return false
		end
	
		do_move(@turn, moveval)
		if $server.get_seat_fd(1 - @turn) != -1 then
			send_move(1 - @turn, moveval)
		end

		return true
	end

	def handle_next_move
		if check_gameover() == true then
			broadcast_gameover(@turn)
			return
		else
			@turn = 1 - @turn
		end

		if $server.get_seat_type(@turn) == GGZDMod::SEATBOT then
			puts "   > Perform ROBOT move"
			moveval = find_move(@turn)
			if moveval >= 0 then
				if handle_move(@turn, moveval) then
					handle_next_move()
				end
			else
				broadcast_gameover(-1)
			end
		else
			request_move(@turn)
		#else
		#	# opponent has left - switch state to WAITING? (should already be... hm)
		end
	end

	def find_move(p)
		if $ai then
			return $ai.ai_findmove(p, 1, @board)
		end

		for i in 0..100
			move = rand(9)
			if evaluate_move(p, move) == ::MOVE_OK then
				return move
			end
		end
		return -1
	end

	def triple_equal(a, b, c)
		if a == b and b == c then
			return true
		end
		return false
	end

	def check_gameover
		for i in 0..2
			if triple_equal(@board[i * 3], @board[i * 3 + 1], @board[i * 3 + 2]) then
				if @board[i * 3] != nil then
					return true
				end
			end
			if triple_equal(@board[i], @board[i + 3], @board[i + 6]) then
				if @board[i] != nil then
					return true
				end
			end
		end
		if triple_equal(@board[0], @board[4], @board[8]) then
			if @board[4] != nil then
				return true
			end
		end
		if triple_equal(@board[2], @board[4], @board[6]) then
			if @board[4] != nil then
				return true
			end
		end
		return false
	end

	def evaluate_move(p, moveval)
		#MOVE_ERR_STATE
		if p != @turn then
			return ::MOVE_ERR_TURN
		elsif moveval < 0 or moveval >= 9 then
			return ::MOVE_ERR_BOUND
		elsif @board[moveval] then
			return ::MOVE_ERR_FULL
		end
		return ::MOVE_OK
	end

	def do_move(p, moveval)
		@board[moveval] = p
		puts "   > Set square " + moveval.to_s + " to " + p.to_s
	end

	def event(id, data)
		super(id, data)

		if id == GGZDMod::EVENTJOIN then
			num = data
			broadcast_players
			send_seat(num)
			trystart
		elsif id == GGZDMod::EVENTLEAVE then
			broadcast_players
		elsif id == GGZDMod::EVENTDATA then
			num = data
			input(num)
		elsif id == GGZDMod::EVENTERROR then
			puts "**GGZ ERROR** - aborting now"
			Thread.exit
		end
	end

	def trystart()
		num = $server.get_num_seats
		empty = 0
		for i in 0..num -1
			if $server.get_seat_type(i) == GGZDMod::SEATOPEN then
				empty += 1
			end
		end

		puts "   > Check start conditions (both seats must be filled)"
		puts "     Empty seats: " + empty.to_s

		if empty == 0 then
			puts "     Start now!"
			request_move(@turn)
		else
			puts "     Waiting for more players to join..."
		end
	end
end

def ggzdmod_handler(id, data)
	puts "## Callback called!"
	$ttt.event(id, data)
end

$ttt = TTT.new

$server = GGZDMod.new
$server.connect
$server.loop

puts "## Bye ##"

