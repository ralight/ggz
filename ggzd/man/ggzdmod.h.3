.TH "ggzdmod.h" 3 "22 Jan 2005" "Version 0.0.10" "GGZdMod" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ggzdmod.h \- Common functions for interfacing a game server and GGZ. 
.SH SYNOPSIS
.br
.PP
\fC#include <ggz.h>\fP
.br
\fC#include <ggz_common.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBGGZSeat\fP"
.br
.RI "\fIA seat at a GGZ game table. \fP"
.ti -1c
.RI "struct \fBGGZSpectator\fP"
.br
.RI "\fIA game spectator entry. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBGGZDMOD_VERSION_MAJOR\fP   0"
.br
.ti -1c
.RI "#define \fBGGZDMOD_VERSION_MINOR\fP   0"
.br
.ti -1c
.RI "#define \fBGGZDMOD_VERSION_MICRO\fP   10"
.br
.ti -1c
.RI "#define \fBGGZDMOD_VERSION_IFACE\fP   '3:0:0'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBGGZdMod\fP \fBGGZdMod\fP"
.br
.RI "\fIA GGZdmod object, used for tracking a ggzd<->table connection. \fP"
.ti -1c
.RI "typedef void(* \fBGGZdModHandler\fP )(\fBGGZdMod\fP *mod, \fBGGZdModEvent\fP e, void *data)"
.br
.RI "\fIEvent handler prototype. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBGGZdModState\fP { \fBGGZDMOD_STATE_CREATED\fP, \fBGGZDMOD_STATE_WAITING\fP, \fBGGZDMOD_STATE_PLAYING\fP, \fBGGZDMOD_STATE_DONE\fP }"
.br
.RI "\fITable states. \fP"
.ti -1c
.RI "enum \fBGGZdModEvent\fP { \fBGGZDMOD_EVENT_STATE\fP, \fBGGZDMOD_EVENT_JOIN\fP, \fBGGZDMOD_EVENT_LEAVE\fP, \fBGGZDMOD_EVENT_SEAT\fP, \fBGGZDMOD_EVENT_SPECTATOR_JOIN\fP, \fBGGZDMOD_EVENT_SPECTATOR_LEAVE\fP, \fBGGZDMOD_EVENT_SPECTATOR_SEAT\fP, \fBGGZDMOD_EVENT_LOG\fP, \fBGGZDMOD_EVENT_PLAYER_DATA\fP, \fBGGZDMOD_EVENT_SPECTATOR_DATA\fP, \fBGGZDMOD_EVENT_GAMEREPORT\fP, \fBGGZDMOD_EVENT_REQ_NUM_SEATS\fP, \fBGGZDMOD_EVENT_REQ_BOOT\fP, \fBGGZDMOD_EVENT_REQ_BOT\fP, \fBGGZDMOD_EVENT_REQ_OPEN\fP, \fBGGZDMOD_EVENT_ERROR\fP }"
.br
.RI "\fICallback events. \fP"
.ti -1c
.RI "enum \fBGGZdModType\fP { \fBGGZDMOD_GGZ\fP, \fBGGZDMOD_GAME\fP }"
.br
.RI "\fIThe 'type' of ggzdmod. \fP"
.ti -1c
.RI "enum \fBGGZGameResult\fP { \fBGGZ_GAME_WIN\fP, \fBGGZ_GAME_LOSS\fP, \fBGGZ_GAME_TIE\fP, \fBGGZ_GAME_FORFEIT\fP, \fBGGZ_GAME_NONE\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGGZdMod\fP * \fBggzdmod_new\fP (\fBGGZdModType\fP type)"
.br
.RI "\fICreate a new ggzdmod object. \fP"
.ti -1c
.RI "void \fBggzdmod_free\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIDestroy a finished ggzdmod object. \fP"
.ti -1c
.RI "int \fBggzdmod_get_fd\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIGet the file descriptor for the GGZdMod socket. \fP"
.ti -1c
.RI "\fBGGZdModType\fP \fBggzdmod_get_type\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIGet the type of the ggzdmod object. \fP"
.ti -1c
.RI "\fBGGZdModState\fP \fBggzdmod_get_state\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIGet the current state of the table. \fP"
.ti -1c
.RI "int \fBggzdmod_get_num_seats\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIGet the total number of seats at the table. \fP"
.ti -1c
.RI "\fBGGZSeat\fP \fBggzdmod_get_seat\fP (\fBGGZdMod\fP *ggzdmod, int seat)"
.br
.RI "\fIGet all data for the specified seat. \fP"
.ti -1c
.RI "void * \fBggzdmod_get_gamedata\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIReturn gamedata pointer. \fP"
.ti -1c
.RI "void \fBggzdmod_set_gamedata\fP (\fBGGZdMod\fP *ggzdmod, void *data)"
.br
.RI "\fISet gamedata pointer. \fP"
.ti -1c
.RI "int \fBggzdmod_get_max_num_spectators\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIGet the maximum number of spectators. This function returns the maximum number of spectator seats available. A game can use this to iterate over the spectator seats to look for spectators occupying them. Since spectators may come and go at any point and there is no theoretical limit on the number of spectators, you should consider this value to be dynamic and call this function again each time you're looking for spectators. \fP"
.ti -1c
.RI "\fBGGZSpectator\fP \fBggzdmod_get_spectator\fP (\fBGGZdMod\fP *ggzdmod, int spectator)"
.br
.RI "\fIGet a spectator's data. \fP"
.ti -1c
.RI "int \fBggzdmod_set_handler\fP (\fBGGZdMod\fP *ggzdmod, \fBGGZdModEvent\fP e, \fBGGZdModHandler\fP func)"
.br
.RI "\fISet a handler for the given event. \fP"
.ti -1c
.RI "int \fBggzdmod_count_seats\fP (\fBGGZdMod\fP *ggzdmod, GGZSeatType seat_type)"
.br
.RI "\fICount seats of the given type. \fP"
.ti -1c
.RI "int \fBggzdmod_count_spectators\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fICount current number of spectators. \fP"
.ti -1c
.RI "int \fBggzdmod_dispatch\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fICheck for and handle input. \fP"
.ti -1c
.RI "int \fBggzdmod_loop\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fILoop while handling input. \fP"
.ti -1c
.RI "int \fBggzdmod_set_state\fP (\fBGGZdMod\fP *ggzdmod, \fBGGZdModState\fP state)"
.br
.RI "\fIChange the table's state. \fP"
.ti -1c
.RI "int \fBggzdmod_connect\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIConnect to ggz. \fP"
.ti -1c
.RI "int \fBggzdmod_disconnect\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fIDisconnect from ggz. \fP"
.ti -1c
.RI "int \fBggzdmod_log\fP (\fBGGZdMod\fP *ggzdmod, char *fmt,...) ggz__attribute((format(printf"
.br
.RI "\fILog data. \fP"
.ti -1c
.RI "void \fBggzdmod_check\fP (\fBGGZdMod\fP *ggzdmod)"
.br
.RI "\fILog all information about the ggzdmod. \fP"
.ti -1c
.RI "void \fBggzdmod_report_game\fP (\fBGGZdMod\fP *ggzdmod, int *teams, \fBGGZGameResult\fP *results, int *scores)"
.br
.RI "\fIReport the results of a game to GGZ. \fP"
.ti -1c
.RI "void \fBggzdmod_request_num_seats\fP (\fBGGZdMod\fP *ggzdmod, int num_seats)"
.br
.RI "\fITell GGZ to change the number of seats at this table. \fP"
.ti -1c
.RI "void \fBggzdmod_request_boot\fP (\fBGGZdMod\fP *ggzdmod, const char *name)"
.br
.RI "\fITell GGZ to boot the given player from this table. \fP"
.ti -1c
.RI "void \fBggzdmod_request_bot\fP (\fBGGZdMod\fP *ggzdmod, int seat_num)"
.br
.RI "\fITell GGZ to change the given seat from OPEN to BOT. \fP"
.ti -1c
.RI "void \fBggzdmod_request_open\fP (\fBGGZdMod\fP *ggzdmod, int seat_num)"
.br
.RI "\fITell GGZ to change the given seat from BOT/RESERVED to OPEN. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Common functions for interfacing a game server and GGZ. 

This file contains all libggzdmod functions used by game servers to interface with GGZ (and vice versa). Just include \fBggzdmod.h\fP and make sure your program is linked with libggzdmod. Then use the functions below as appropriate.
.PP
GGZdmod currently provides an event-driven interface. Data from communication sockets is read in by the library, and a handler function (registered as a callback) is invoked to handle any events. The calling program should not read/write data from/to the GGZ socket unless it really knows what it is doing.
.PP
That this does not apply to the client sockets: ggzdmod provides one file desriptor for communicating (TCP) to each client. If data is ready to be read by one of these file descriptors ggzdmod may invoke the appropriate handler (see below), but will never actually read any data.
.PP
Here is a fairly complete example. In this game we register a handler for each of the possible callbacks. This particular game is played only when all seats are full; when any seats are empty it must wait (much like a card or board game).
.PP
.PP
.nf
     // Game-defined handler functions for GGZ events; see below.
     void handle_state_change(GGZdMod* ggz, GGZdModEvent event, void* data);
     void handle_player_join(GGZdMod* ggz, GGZdModEvent event, void* data);
     void handle_player_leave(GGZdMod* ggz, GGZdModEvent event, void* data);
     void handle_player_data(GGZdMod* ggz, GGZdModEvent event, void* data);

     // Other game-defined functions (not ggz-related).
     void game_init(GGZdMod *ggz); // initialize a game
     void game_launch(void);           // handle a game 'launch'
     void game_end(void);              // called before the table shuts down
     void resume_playing(void);        // we have enough players to play
     void stop_playing(void);          // not enough players to play

     int main()
     {
         GGZdMod *ggz = ggzdmod_new(GGZ_GAME);
         // First we register functions to handle some events.
         ggzdmod_set_handler(ggz, GGZDMOD_EVENT_STATE,
                             &handle_state_change);
         ggzdmod_set_handler(ggz, GGZDMOD_EVENT_JOIN,
                             &handle_player_join);
         ggzdmod_set_handler(ggz, GGZDMOD_EVENT_LEAVE,
                             &handle_player_leave);
         ggzdmod_set_handler(ggz, GGZDMOD_EVENT_PLAYER_DATA,
                             &handle_player_data);

         // Do any other game initializations.  You'll probably want to
         // track 'ggz' globally.
         game_init(mod);

         // Then we must connect to GGZ
         if (ggzdmod_connect(ggz) < 0)
             exit(-1);
         (void) ggzdmod_log(ggz, 'Starting game.');

         // ggzdmod_loop does most of the work, dispatching handlers
         // above as necessary.
         (void) ggzdmod_loop(ggz);

         // At the end, we disconnect and destroy the ggzdmod object.
         (void) ggzdmod_log(ggz, 'Ending game.');
         (void) ggzdmod_disconnect(ggz);
         ggzdmod_free(ggz);
     }

     void handle_state_change(GGZdMod* ggz, GGZdModEvent event, void* data)
     {
         GGZdModState old_state = *(GGZdModState*)data;
         GGZdModState new_state = ggzdmod_get_state(ggz);
         if (old_state == GGZDMOD_STATE_CREATED)
             // ggzdmod data isn't initialized until it connects with GGZ
             // during the game launch, so some initializations should wait
             // until here.
             game_launch();
         switch (new_state) {
           case GGZDMOD_STATE_WAITING:
             // At this point we've entered the 'waiting' state where we
             // aren't actually playing.  This is generally triggered by
             // the game calling ggzdmod_set_state, which happens when
             // a player leaves (down below).  It may also be triggered
             // by GGZ automatically.
             stop_playing();
             break;
           case GGZDMOD_STATE_PLAYING:
             // At this point we've entered the 'playing' state, so we
             // should resume play.  This is generally triggered by
             // the game calling ggzdmod_set_state, which happens when
             // all seats are full (down below).  It may also be
             // triggered by GGZ automatically.
             resume_playing();
             break;
           case GGZDMOD_STATE_DONE:
             // at this point ggzdmod_loop will stop looping, so we'd
             // better close up shop fast.  This will only happen
             // automatically if all players leave, but we can force it
             // using ggzdmod_set_state.
             game_end();
             break;
         }
     }

     void handle_player_join(GGZdMod* ggz, GGZdModEvent event, void* data)
     {
         GGZSeat *old_seat = (GGZSeat*)data;
         GGZSeat new_seat = ggzdmod_get_seat(ggz, old_seat->num);

         // ... do other player initializations ...

         if (ggzdmod_count_seats(ggz, GGZ_SEAT_OPEN) == 0)
             // this particular game will only play when all seats are full.
             // calling this function triggers the STATE event, so we'll end
             // up executing resume_playing() above.
             ggzdmod_set_state(ggz, GGZDMOD_STATE_PLAYING);
     }

     void handle_player_leave(GGZdMod* ggz, GGZdModEvent event, void* data)
     {
         GGZSeat *old_seat = (GGZSeat*)data;
         GGZSeat new_seat = ggzdmod_get_seat(ggz, old_seat->num);

         // ... do other player un-initializations ...

         if (ggzdmod_count_seats(ggz, GGZ_SEAT_PLAYER) == 0)
             // the game will exit when all human players are gone
             ggzdmod_set_state(ggz, GGZDMOD_STATE_DONE);
         else
             // this particular game will only play when all seats are full.
             // calling this function triggers the STATE event, so we'll end
             // up executing stop_playing() above.
             ggzdmod_set_state(ggz, GGZDMOD_STATE_WAITING);
     }

     void handle_player_data(GGZdMod* ggz, GGZdModEvent event, void* data)
     {
         int player = *(int*)data;
         int socket_fd = ggzdmod_get_seat(ggz, player).fd;

         // ... read a packet from the socket ...
     }
.fi
.PP
.PP
For more information, see the documentation at http://ggz.sf.net/.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBGGZdMod\fP \fBGGZdMod\fP"
.PP
A GGZdmod object, used for tracking a ggzd<->table connection. 
.PP
A game server should track a pointer to a GGZdMod object; it contains all the state information for communicating with GGZ. The GGZ server will track one such object for every game table that is running. 
.SS "typedef void(* \fBGGZdModHandler\fP)(\fBGGZdMod\fP *mod, \fBGGZdModEvent\fP e, void *data)"
.PP
Event handler prototype. 
.PP
A function of this type will be called to handle a ggzdmod event. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP The ggzdmod state object. 
.br
\fIe\fP The event that has occured. 
.br
\fIdata\fP Pointer to additional data for the event. The additional data will be of the following form:
.IP "\(bu" 2
GGZDMOD_EVENT_STATE: The old state (GGZdModState*)
.IP "\(bu" 2
GGZDMOD_EVENT_JOIN: The old seat (GGZSeat*)
.IP "\(bu" 2
GGZDMOD_EVENT_LEAVE: The old seat (GGZSeat*)
.IP "\(bu" 2
GGZDMOD_EVENT_SEAT: The old seat (GGZSeat*)
.IP "\(bu" 2
GGZDMOD_EVENT_SPECTATOR_JOIN: The old spectator's data (GGZSpectator*)
.IP "\(bu" 2
GGZDMOD_EVENT_SPECTATOR_LEAVE: The old spectator's data (GGZSpectator*)
.IP "\(bu" 2
GGZDMOD_EVENT_LOG: The message string (char*)
.IP "\(bu" 2
GGZDMOD_EVENT_PLAYER_DATA: The player number (int*)
.IP "\(bu" 2
GGZDMOD_EVENT_SPECTATOR_DATA: The spectator number (int*)
.IP "\(bu" 2
GGZDMOD_EVENT_ERROR: An error string (char*) 
.PP
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBGGZdModEvent\fP"
.PP
Callback events. 
.PP
Each of these is a possible GGZdmod event. For each event, the table may register a handler with GGZdmod to handle that event. 
.PP
\fBSee also:\fP
.RS 4
\fBGGZdModHandler\fP 
.PP
\fBggzdmod_set_handler\fP 
.RE
.PP

.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZDMOD_EVENT_STATE \fP\fP
Module status changed This event occurs when the game's status changes. The old state (a GGZdModState*) is passed as the event's data. 
.PP
\fBSee also:\fP
.RS 4
\fBGGZdModState\fP 
.RE
.PP

.TP
\fB\fIGGZDMOD_EVENT_JOIN \fP\fP
Player joined This event occurs when a player joins the table. The old seat (a GGZSeat*) is passed as the event's data. The seat information will be updated before the event is invoked. 
.PP
\fBNote:\fP
.RS 4
This may be dropped in favor of the SEAT event. 
.RE
.PP

.TP
\fB\fIGGZDMOD_EVENT_LEAVE \fP\fP
Player left This event occurs when a player leaves the table. The old seat (a GGZSeat*) is passed as the event's data. The seat information will be updated before the event is invoked. 
.PP
\fBNote:\fP
.RS 4
This may be dropped in favor of the SEAT event 
.RE
.PP

.TP
\fB\fIGGZDMOD_EVENT_SEAT \fP\fP
General seat change This event occurs when a seat change other than a player leave/join happens (which is currently impossible). The old seat (a GGZSeat*) is passed as the event's data. The seat information will be updated before the event is invoked. 
.PP
\fBNote:\fP
.RS 4
This is currently unused, but may eventually replace JOIN and LEAVE.
.RE
.PP

.TP
\fB\fIGGZDMOD_EVENT_SPECTATOR_JOIN \fP\fP
A spectator joins the game. The data of the old spectator (GGZSpectator*) is passed as the data for the event. It can be assumed that the spectator seat was previously empty, so the name and socket given will be invalid (NULL/-1). 
.TP
\fB\fIGGZDMOD_EVENT_SPECTATOR_LEAVE \fP\fP
A spectator left the game The old spectator data can be obtained via the (GGZSpectator*) which is passed as the event data. 
.TP
\fB\fIGGZDMOD_EVENT_SPECTATOR_SEAT \fP\fP
A spectator seat changed. The old spectator data can be obtained via the (GGZSpectator*) which is passed as the event data. This may someday replace both SPECTATOR_JOIN and SPECTATOR_LEAVE. 
.TP
\fB\fIGGZDMOD_EVENT_LOG \fP\fP
Module log request This event occurs when a log request happens. This will only be used by the GGZ server; the game server should use ggzdmod_log to generate the log. 
.TP
\fB\fIGGZDMOD_EVENT_PLAYER_DATA \fP\fP
Data available from player This event occurs when there is data ready to be read from one of the player sockets. The player number (an int*) is passed as the event's data. 
.TP
\fB\fIGGZDMOD_EVENT_SPECTATOR_DATA \fP\fP
Data available from spectator For games which support spectators, this indicates that one of them sent some data to the game server. 
.TP
\fB\fIGGZDMOD_EVENT_GAMEREPORT \fP\fP
For GGZ only. Reports the results of a game. 
.TP
\fB\fIGGZDMOD_EVENT_ERROR \fP\fP
An error has occurred This event occurs when a GGZdMod error has occurred. An error message (a char*) will be passed as the event's data. GGZdMod may attempt to recover from the error, but it is not guaranteed that the GGZ connection will continue to work after an error has happened. 
.SS "enum \fBGGZdModState\fP"
.PP
Table states. 
.PP
Each table has a current 'state' that is tracked by ggzdmod. First the table is executed and begins running. Then it receives a launch event from GGZD and begins waiting for players. At some point a game will be started and played at the table, after which it may return to waiting. Eventually the table will probably halt and then the program will exit.
.PP
More specifically, the game is in the CREATED state when it is first executed. It moves to the WAITING state after GGZ first communicates with it. After this, the game server may use ggzdmod_set_state to change between WAITING, PLAYING, and DONE states. A WAITING game is considered waiting for players (or whatever), while a PLAYING game is actively being played (this information may be, but currently is not, propogated back to GGZ for display purposes). Once the state is changed to DONE, the table is considered dead and will exit shortly thereafter (ggzdmod_loop will stop looping, etc.) (see the kill_on_exit game option).
.PP
Each time the game state changes, a GGZDMOD_EVENT_STATE event will be propogated to the game server. 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZDMOD_STATE_CREATED \fP\fP
Pre-launch; waiting for ggzdmod 
.TP
\fB\fIGGZDMOD_STATE_WAITING \fP\fP
Ready and waiting to play. 
.TP
\fB\fIGGZDMOD_STATE_PLAYING \fP\fP
Currently playing a game. 
.TP
\fB\fIGGZDMOD_STATE_DONE \fP\fP
Table halted, prepping to exit. 
.SS "enum \fBGGZdModType\fP"
.PP
The 'type' of ggzdmod. 
.PP
The 'flavor' of GGZdmod object this is. Affects what operations are allowed. 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZDMOD_GGZ \fP\fP
Used by the ggz server ('ggzd'). 
.TP
\fB\fIGGZDMOD_GAME \fP\fP
Used by the game server ('table'). 
.SS "enum \fBGGZGameResult\fP"
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIGGZ_GAME_FORFEIT \fP\fP
A forfeit is (for instance) an abandoned game. The player will not only be credited with the forfeit but their rating/ranking may drop dramatically. 
.TP
\fB\fIGGZ_GAME_NONE \fP\fP
If the player didn't take part in the game, use this label. For instance if one player abandons the game they might get a forfeit while nobody else is affected. 
.SH "Function Documentation"
.PP 
.SS "void ggzdmod_check (\fBGGZdMod\fP * ggzdmod)"
.PP
Log all information about the ggzdmod. 
.PP
This is a debugging function that will log all available information about the GGZdMod object. It uses ggzdmod_log for logging.
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
void; errors in ggzdmod_log are ignored. 
.RE
.PP

.SS "int ggzdmod_connect (\fBGGZdMod\fP * ggzdmod)"
.PP
Connect to ggz. 
.PP
Call this function to make an initial GGZ <-> game connection.
.IP "\(bu" 2
When called by the game server, this function makes the physical connection to ggz.
.IP "\(bu" 2
When called by ggzd, it will launch a table and connect to it. Note - if the game fails to exec, this function may not catch it. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure. 
.RE
.PP

.PP

.SS "int ggzdmod_count_seats (\fBGGZdMod\fP * ggzdmod, GGZSeatType seat_type)"
.PP
Count seats of the given type. 
.PP
This is a convenience function that counts how many seats there are that have the given type. For instance, giving seat_type==GGZ_SEAT_OPEN will count the number of open seats. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.br
\fIseat_type\fP The type of seat to be counted. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of seats that match seat_type. 
.RE
.PP
\fBNote:\fP
.RS 4
This could go into a wrapper library instead. 
.RE
.PP

.SS "int ggzdmod_count_spectators (\fBGGZdMod\fP * ggzdmod)"
.PP
Count current number of spectators. 
.PP
This function returns the number of spectators watching the game. Note that the spectator numbers may not match up: if there are two spectators they could be numbered 0 and 4. If you're trying to iterate through the existing spectators, you probably want \fBggzdmod_get_max_num_spectators()\fP instead. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of spectators watching the game (0 on error) 
.RE
.PP

.SS "int ggzdmod_disconnect (\fBGGZdMod\fP * ggzdmod)"
.PP
Disconnect from ggz. 
.PP
.IP "\(bu" 2
When called by the game server, this function stops the connection to GGZ. It should only be called when the table is ready to exit.
.IP "\(bu" 2
When called by the GGZ server, this function will kill and clean up after the table. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure. 
.RE
.PP

.PP

.SS "int ggzdmod_dispatch (\fBGGZdMod\fP * ggzdmod)"
.PP
Check for and handle input. 
.PP
This function handles input from the communications sockets:
.IP "\(bu" 2
It will check for input, but will not block.
.IP "\(bu" 2
It will monitor input from the GGZdmod socket.
.IP "\(bu" 2
It will monitor input from player sockets only if a handler is registered for the PLAYER_DATA event.
.IP "\(bu" 2
It will call an event handler as necessary. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
-1 on error, the number of events handled (0 or more) on success. 
.RE
.PP

.PP

.SS "void ggzdmod_free (\fBGGZdMod\fP * ggzdmod)"
.PP
Destroy a finished ggzdmod object. 
.PP
After the connection is through, the object may be freed. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.RE
.PP

.SS "int ggzdmod_get_fd (\fBGGZdMod\fP * ggzdmod)"
.PP
Get the file descriptor for the GGZdMod socket. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
GGZdMod's main ggzd <-> table socket FD. 
.RE
.PP
\fBNote:\fP
.RS 4
Don't use this; use ggzdmod_loop and friends instead. 
.RE
.PP

.SS "void* ggzdmod_get_gamedata (\fBGGZdMod\fP * ggzdmod)"
.PP
Return gamedata pointer. 
.PP
Each GGZdMod object can be given a 'gamedata' pointer that is returned by this function. This is useful for when a single process serves multiple GGZdmod's. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the gamedata block (or NULL if none). 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzdmod_set_gamedata\fP 
.RE
.PP

.SS "int ggzdmod_get_max_num_spectators (\fBGGZdMod\fP * ggzdmod)"
.PP
Get the maximum number of spectators. This function returns the maximum number of spectator seats available. A game can use this to iterate over the spectator seats to look for spectators occupying them. Since spectators may come and go at any point and there is no theoretical limit on the number of spectators, you should consider this value to be dynamic and call this function again each time you're looking for spectators. 
.PP
\fBReturns:\fP
.RS 4
The number of available spectator seats, or -1 on error. 
.RE
.PP
\fBNote:\fP
.RS 4
If no connection is present, -1 will be returned. 
.RE
.PP

.SS "int ggzdmod_get_num_seats (\fBGGZdMod\fP * ggzdmod)"
.PP
Get the total number of seats at the table. 
.PP
\fBReturns:\fP
.RS 4
The number of seats, or -1 on error. 
.RE
.PP
\fBNote:\fP
.RS 4
If no connection is present, -1 will be returned. 
.PP
While in GGZDMOD_STATE_CREATED, we don't know the number of seats. 
.RE
.PP

.SS "\fBGGZSeat\fP ggzdmod_get_seat (\fBGGZdMod\fP * ggzdmod, int seat)"
.PP
Get all data for the specified seat. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.br
\fIseat\fP The seat number (0..(number of seats - 1)). 
.RE
.PP
\fBReturns:\fP
.RS 4
A valid \fBGGZSeat\fP structure, if seat is a valid seat. 
.RE
.PP

.SS "\fBGGZSpectator\fP ggzdmod_get_spectator (\fBGGZdMod\fP * ggzdmod, int spectator)"
.PP
Get a spectator's data. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.br
\fIspectator\fP The number, between 0 and (number of spectators - 1). 
.RE
.PP
\fBReturns:\fP
.RS 4
A valid \fBGGZSpectator\fP structure, if arguments are valid. 
.RE
.PP

.SS "\fBGGZdModState\fP ggzdmod_get_state (\fBGGZdMod\fP * ggzdmod)"
.PP
Get the current state of the table. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The state of the table. 
.RE
.PP

.SS "\fBGGZdModType\fP ggzdmod_get_type (\fBGGZdMod\fP * ggzdmod)"
.PP
Get the type of the ggzdmod object. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
The type of the GGZdMod object (GGZ or GAME). 
.RE
.PP

.SS "int ggzdmod_log (\fBGGZdMod\fP * ggzdmod, char * fmt,  ...)"
.PP
Log data. 
.PP
This function sends the specified string (printf-style) to the GGZ server to be logged. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdmod object. 
.br
\fIfmt\fP A printf-style format string. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure. 
.RE
.PP

.SS "int ggzdmod_loop (\fBGGZdMod\fP * ggzdmod)"
.PP
Loop while handling input. 
.PP
This function repeatedly handles input from all sockets. It will only stop once the game state has been changed to DONE (or if there has been an error). 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on error. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzdmod_dispatch\fP 
.PP
\fBggzdmod_set_state\fP 
.RE
.PP

.SS "\fBGGZdMod\fP* ggzdmod_new (\fBGGZdModType\fP type)"
.PP
Create a new ggzdmod object. 
.PP
Before connecting through ggzdmod, a new ggzdmod object is needed. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP The type of ggzdmod. Should be GGZDMOD_GAME for game servers. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBGGZdModType\fP 
.RE
.PP

.SS "void ggzdmod_report_game (\fBGGZdMod\fP * ggzdmod, int * teams, \fBGGZGameResult\fP * results, int * scores)"
.PP
Report the results of a game to GGZ. 
.PP
After a game has completed, the game server should call this function to report the results to GGZ. GGZ can then use the information to track player statistics - including an ELO-style rating, win-loss records, etc.
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.br
\fIteams\fP An array listing a team number for each player, or NULL. 
.br
\fIresults\fP An array listing the result of the game for each player. 
.br
\fIscores\fP The scores for all players (may be NULL) 
.RE
.PP

.SS "void ggzdmod_request_num_seats (\fBGGZdMod\fP * ggzdmod, int num_seats)"
.PP
Tell GGZ to change the number of seats at this table. 
.PP
\fBNote:\fP
.RS 4
This functionality is incomplete, and should not yet be used. 
.RE
.PP

.SS "void ggzdmod_set_gamedata (\fBGGZdMod\fP * ggzdmod, void * data)"
.PP
Set gamedata pointer. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdMod object. 
.br
\fIdata\fP The gamedata block (or NULL for none). 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzdmod_get_gamedata\fP 
.RE
.PP

.SS "int ggzdmod_set_handler (\fBGGZdMod\fP * ggzdmod, \fBGGZdModEvent\fP e, \fBGGZdModHandler\fP func)"
.PP
Set a handler for the given event. 
.PP
As described above, GGZdmod uses an event-driven structure. Each time an event is called, the event handler (there can be only one) for that event will be called. This function registers such an event handler. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The GGZdmod object. 
.br
\fIe\fP The GGZdmod event. 
.br
\fIfunc\fP The handler function being registered. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, negative on failure (bad parameters) 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBggzdmod_get_gamedata\fP 
.RE
.PP

.SS "int ggzdmod_set_state (\fBGGZdMod\fP * ggzdmod, \fBGGZdModState\fP state)"
.PP
Change the table's state. 
.PP
This function should be called to change the state of a table. A game can use this function to change state between WAITING and PLAYING, or to set it to DONE. 
.PP
\fBParameters:\fP
.RS 4
\fIggzdmod\fP The ggzdmod object. 
.br
\fIstate\fP The new state. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, -1 on failure/error. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for GGZdMod from the source code.
