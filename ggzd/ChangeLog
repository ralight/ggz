2000-09-07 21:32:11  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/C/design/client-server.sgml:
	- Fix missing </para>

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/game_servers/spades/engine.h:
	- Use RETSIGTYPE as return type for signal handlers

2000-09-04 11:28:55  bugg  <bugg@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c:
	Shuffle the header files around so we can
	build ggz (no ggzd yet) on the BSDs. ggz may now be
	built like such:

	curly% GTK_CONFIG="/usr/X11R6/bin/gtk12-config" \
	CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/lib" \
	./autogen.sh

	The CPPFLAGS and LDFLAGS are so it can find popt.h and -lpopt,
	respectively.  It would be nice if they searched here as well
	by default, so you'd only have to specify the location of
	gtk12-config.

2000-09-01 21:36:51  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/INSTALL, /cvsroot/GGZ/ggzd/NEWS:
	- Modified INSTALL to reflect new dir layout
	- Deleted excess whitespace from NEWS

2000-09-01 02:09:21  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggz_server.spec:
	- Moved default location for db files to /var/tmp/ggzd

2000-08-31 07:02:44  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggz_server.spec:
	- Updated client and server RPM spec files to 0.0.3

2000-08-29 19:02:21  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/INSTALL, /cvsroot/GGZ/ggzd/NEWS, /cvsroot/GGZ/ggzd/TODO, /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/doc/admin-guide.txt, /cvsroot/GGZ/ggzd/doc/game-modules.txt:
	- Set version to 0.0.3
	- Documentation updates for new release

	* /cvsroot/GGZ/ggzd/doc/C/design/design.sgml:
	- doc updates

	* /cvsroot/GGZ/ggzd/doc/C/design/Makefile.am, /cvsroot/GGZ/ggzd/doc/C/design/appendix.sgml, /cvsroot/GGZ/ggzd/doc/C/design/client-server.sgml, /cvsroot/GGZ/ggzd/doc/C/design/overview.sgml:
	- More design doc updates
	- Include all sgml files with dist

	* /cvsroot/GGZ/ggzd/doc/C/design/client-server.sgml:
	- Wrote section on table commands
	- Wrote skeleton for chat commands

2000-08-27 23:24:40  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c:
	- Full leave/rejoin capability coded

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.h:
	- Handle game leave/rejoin during card play only

2000-08-26 20:45:09  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/C/design/design.sgml:
	- Changed chapter title
	- Corrected revision number after move

	* /cvsroot/GGZ/ggzd/doc/C/.cvsignore, /cvsroot/GGZ/ggzd/doc/C/Makefile.am, /cvsroot/GGZ/ggzd/doc/C/design/.cvsignore, /cvsroot/GGZ/ggzd/doc/C/design/Makefile.am, /cvsroot/GGZ/ggzd/doc/C/design/appendix.sgml, /cvsroot/GGZ/ggzd/doc/C/design/client-server.sgml, /cvsroot/GGZ/ggzd/doc/C/design/design.sgml, /cvsroot/GGZ/ggzd/doc/C/design/ggz.dsl, /cvsroot/GGZ/ggzd/doc/C/design/images/.cvsignore, /cvsroot/GGZ/ggzd/doc/C/design/images/server_arch.fig, /cvsroot/GGZ/ggzd/doc/C/design/overview.sgml, /cvsroot/GGZ/ggzd/doc/C/design/requirements.sgml, /cvsroot/GGZ/ggzd/game_servers/spades/spades.dsc, /cvsroot/GGZ/ggzd/game_servers/tictactoe/tictactoe.dsc, /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/doc/Makefile.am, /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Documentation overhaul:
	- Moved design doc into C/design dir so that in the future
	  translations can be done more easily
	- Split out chapters from design doc
	- Started re-writing the section on client-server interactions to be
	  more descriptive.
	- Bumped version number of ttt and spades games

2000-08-23 02:47:19  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/ggz.h, /cvsroot/GGZ/ggzd/game_servers/tictactoe/ggz.h, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.h:
	- Game servers need to handle 16 character names

2000-08-20 21:48:10  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/hash.c, /cvsroot/GGZ/ggzd/ggzd/hash.h:
	hash.[ch]
	  - Added hash_initialize() to init lock structures

	control.c
	  - Call hash_initialize() at startup

2000-08-20 05:14:34  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/configure.in:
	- s/datadir/tmpdir at one spot.  oops

	* /cvsroot/GGZ/ggzd/ggzd/control.c:
	- Use select() on listening socket to determine when there is an
	  incoming connection.
	- Make listening socket non-blocking in case connection gets removed
	  between select() and accept().  See UNPv1 ch15.

2000-08-19 17:59:41  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Rewrite table_game_join():
	- If player notification of succesful join fails, assume player has
	  logged out and force them to leave table

2000-08-19 05:13:29  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/hash.c:
	- Does this fix the hash bug?  We think it might....

2000-08-18 04:08:27  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c: server
	  - Alter MSG_HAND protocol to send a char representing dealer's seat

	client
	  - Display dealer's seat with a (D) after name
	  - Display current bidder's seat with a (B) after name ((DB) if dealer too)

2000-08-16 06:42:14  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/players.c:
	- Don't attempt to leave table for empty messages (either form player
	  or from table)

	* /cvsroot/GGZ/ggzd/ggzd/players.c:
	- Don't attempt to leave table for empty messages (either from player
	  of from table)

	* /cvsroot/GGZ/ggzd/acconfig.h, /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.c, /cvsroot/GGZ/ggzd/game_servers/spades/engine.h, /cvsroot/GGZ/ggzd/game_servers/spades/engine_func.c, /cvsroot/GGZ/ggzd/game_servers/spades/engine_main.c, /cvsroot/GGZ/ggzd/game_servers/tictactoe/ggz.c, /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/chat.h, /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/err_func.h, /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/event.h, /cvsroot/GGZ/ggzd/ggzd/ggzd.conf.in, /cvsroot/GGZ/ggzd/ggzd/ggzd.h, /cvsroot/GGZ/ggzd/ggzd/hash.c, /cvsroot/GGZ/ggzd/ggzd/hash.h, /cvsroot/GGZ/ggzd/ggzd/login.c, /cvsroot/GGZ/ggzd/ggzd/login.h, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/motd.h, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/players.h, /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/room.h, /cvsroot/GGZ/ggzd/ggzd/seats.c, /cvsroot/GGZ/ggzd/ggzd/seats.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c, /cvsroot/GGZ/ggzd/ggzd/transit.h:
	- Merge experimental dynamic-players branch back into main tree

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/ggzd.conf.in, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/acconfig.h, /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/ggz.c, /cvsroot/GGZ/ggzd/game_servers/spades/engine.h, /cvsroot/GGZ/ggzd/game_servers/spades/engine_func.c, /cvsroot/GGZ/ggzd/game_servers/spades/engine_main.c, /cvsroot/GGZ/ggzd/game_servers/tictactoe/ggz.c:
	- Use TMPDIR to store Unix domain sockets in
	- enable use of --with-tmpdir=PATH to configure it
	- Default to /tmp/ggzd for TMPDIR
	- enable use of --localstatedir to configure DATADIR (db and pid
	  files)
	- In spades module, don't send new game to players until after sending
	  REQ_GAME_OVER to ggz server
	- Create DATADIR and TMPDIR (and parent dirs) automatically if they
	  don't exist

2000-08-15 02:51:20  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.h, /cvsroot/GGZ/ggzd/game_servers/dots/ai.h:
	- Added license notice

2000-08-09 05:56:33  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/players.h, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c, /cvsroot/GGZ/ggzd/ggzd/transit.h:
	- Use GGZEvent system to notify players of successful table launch
	- Move table allocation into table_launch()
	- Move room allocation for table into table_new()
	- New function table_launch_event() for notifying users of table
	 launch status
	- New member 'launching' of player structure so that player does
	  not attempt to launch multiple tables simultaneously
	- New member 'owner' of table structure to hold name of player who
	  launched table (and is notified of launch status)
	- Moved transit_player() into players.c and renamed player_transit()
	- Moved setting of player->transit into player_transit()

2000-08-08 23:59:03  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/control.c:
	- As discussed on the mailing list a while back, set SIGPIPE to
	  SIG_IGN so that it gets handled as a "normal" socket error, and
	  doesn't bring down the entire server

	* /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/event.h, /cvsroot/GGZ/ggzd/ggzd/ggzd.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/players.h, /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c, /cvsroot/GGZ/ggzd/ggzd/transit.h:
	- New functions event_table_{enqueu,handle,flush} to handle private
	  table events
	- Allow private events to be deferred if the callback returns
	  GGZ_EVENT_DEFER
	- In event_player_enqueue(), free event and data if user lookup fails
	- New transit system using GGZEvent infrastructure!!!
	- Commenting updates in players.c and event.[ch]
	- If the game module closes the socket to the player, leave the table
	- Rewrote player_loop to only have *one* way of ending the players
	  game!
	- When table is being removed force all players to leave

2000-08-05 06:40:13  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/game_servers/dots/dots.dsc, /cvsroot/GGZ/ggzd/game_servers/spades/spades.dsc, /cvsroot/GGZ/ggzd/game_servers/tictactoe/tictactoe.dsc, /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/chat.h, /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/event.h, /cvsroot/GGZ/ggzd/ggzd/hash.c, /cvsroot/GGZ/ggzd/ggzd/hash.h, /cvsroot/GGZ/ggzd/ggzd/login.c, /cvsroot/GGZ/ggzd/ggzd/players.c:
	- Output player's name for debug messages, not just pointer address
	- Specify BotsAllowed 0 in all game description files
	- Return from hash_player_lookup() with returned player write-locked:
	  this prevents a situation where the desired player could logout in
	  between when we look them up and when we try to acquire a lock
	- Pass player name, not pointer, to event_player_enqueue()
	- Write-lock player structure when clearing fd in player_remove(): we
	  need to acquire the lock at least once there anyway so that someone
	  holding the lock wil prevent us from being removed
	- Started updating function comments in players.c

2000-07-29 02:19:52  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/parse_opt.c:
	- Permit BotsAllowed values of 0

	* /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Check for table removed from room (NULL pointers) before joining
	- When searching for tables, don't assume they start at 0 in the room

2000-07-28 05:58:25  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/dots.dsc, /cvsroot/GGZ/ggzd/game_servers/spades/spades.dsc, /cvsroot/GGZ/ggzd/game_servers/tictactoe/tictactoe.dsc:
	- Removed obsolete OptionsSize entries

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/main.c:
	- Almost forgot, don't exit until everyone's gone, even if game is over

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/main.c:
	- Figure end of game winner and notify clients

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.h:
	- Added game state for user-choice trump (hands 13-16)
	- Request and verify trump from dealer

2000-07-26 23:03:39  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.c:
	- Fixed stupid miscalculation bug in card_value()

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.h, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.h:
	First (semi)playable version of La Pocha

	WHAT WORKS

2000-07-24 03:16:47  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/table.c:
	- table_join() fails with E_NO_TABLE if table index is -1

2000-07-23 23:24:03  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.h, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.h, /cvsroot/GGZ/ggzd/game_servers/lapocha/main.c:
	- Deal proper sized hand of cards to players
	- Cut deck for trump card and send to players
	- Request and process player bids

	* /cvsroot/GGZ/ggzd/game_servers/dots/ai.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	- Implement protocol extension to send scoring information with
	  each move update message (DOTS_RSP_MOVE and DOTS_MSG_MOVE_(H/V))

2000-07-15 02:53:04  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/room.c:
	- Pack player name (instead of pointer) into room change events.  This
	  fixes the bug where player list update might try to grab information
	  from an already deleted player

2000-06-30 04:18:53  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/game_servers/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/lapocha/.cvsignore, /cvsroot/GGZ/ggzd/game_servers/lapocha/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/cards.h, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/game.h, /cvsroot/GGZ/ggzd/game_servers/lapocha/ggz.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/ggz.h, /cvsroot/GGZ/ggzd/game_servers/lapocha/lapocha.dsc, /cvsroot/GGZ/ggzd/game_servers/lapocha/lapocha.room, /cvsroot/GGZ/ggzd/game_servers/lapocha/main.c, /cvsroot/GGZ/ggzd/game_servers/lapocha/protocols.h:
	Initial checkin of La Pocha server.

	Current status:
	- Clients can connect and a sample 10 cards are dealt by the server.
	- No game play is functional.
	- Player one is told to play (so card animation can still be tested)

	Bugs:
	- Far far too numerous to mention, but nothing that appears to make either
	  server or client unstable

	* /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c:
	datatypes.h
	- Removed game options size

	parse_opt.c
	- Emit a warning about obsolete OptionsSize configuration line

2000-06-29 06:24:12  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/players.h, /cvsroot/GGZ/ggzd/ggzd/room.h, /cvsroot/GGZ/ggzd/ggzd/seats.c, /cvsroot/GGZ/ggzd/ggzd/seats.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c, /cvsroot/GGZ/ggzd/ggzd/transit.h:
	- Added locks around table checking in chat.c
	- Switched over to dynamic table allocation (lots changed!)
	- Disabled global table searches
	- Disabled open table count in for motd
	- Rewrote player_table_launch to be much more robust
	- Store list table pointers in each room
	- Make players' tabel index an index into the *room* (not a pointer
	  because tables can get removed without notifying the player)
	- Store room index as part in GGZTable structure
	- When enqueuing a table event, copy all of the info we need because
	  the table might be removed before we get to processing the event
	- Adssign table room number in table_launch() not player_table_launch()
	- Issue table UPDATE_ADD event after we've been assigned a room number
	- Statically allocate room for seat assignments at table.  This avoids
	  geting into trouble with malloc'd memory when copying tables

2000-06-25 06:24:17  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/acconfig.h, /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/daemon.c, /cvsroot/GGZ/ggzd/ggzd/daemon.h:
	- Borrowed some of daemon_init() and daemon_cleanup() from atd by
	  Thomas Koenig.  This gives us our daemon pidfile
	- Add in signal handlers for SIGINT and SIGTERM
	- Do db and daemon cleanup before exiting

2000-06-24 17:36:26  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Fixes to allow compilation without debugging enabled

	* /cvsroot/GGZ/ggzd/ggzd/players.c:
	- Free player structure after removing player

2000-06-23 21:08:09  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c:
	- Massive changes (mostly of a search and replace type):
	- Moved to individual table and game type locks
	- Moved table and type count variables into global state variable
	- Eliminates GameTypes and GameTables structure in favor of simply
	  accessing arrays of GGZTable and GameInfo
	- Restructured player_list_tables() as discussed on mailing list
	  before the 0.0.2 release to separate table searching and actual
	  sending of data (table searching still needs work)

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/err_func.h, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/motd.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/room.h, /cvsroot/GGZ/ggzd/ggzd/seats.c, /cvsroot/GGZ/ggzd/ggzd/seats.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c, /cvsroot/GGZ/ggzd/ggzd/chat.c:
	- Renamed table structure to GGZTable to be more consistent
	- Renamed GGZTable.type_index to GGZTable.type
	- Use player names over transit system instead of pointers, this avoids
	  several unnecessary name lookups and keeps the table structure from
	  depending on the player structure

	* /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/chat.h, /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/err_func.h, /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/event.h, /cvsroot/GGZ/ggzd/ggzd/hash.c, /cvsroot/GGZ/ggzd/ggzd/hash.h, /cvsroot/GGZ/ggzd/ggzd/login.c, /cvsroot/GGZ/ggzd/ggzd/login.h, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/motd.h, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/players.h, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/room.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c:
	- Moved player_login functions into login.c and renamed login_player
	- Moved player structire into player.h
	- Moved MOTD structure into moth.h
	- Created GGZState structure to hold various counts
	- ....and the big one....
	- Made player dynamically allocated!

	* /cvsroot/GGZ/ggzd/ggzd/login.c, /cvsroot/GGZ/ggzd/ggzd/login.h:
	New file.

2000-06-19 03:41:41  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/ggzdb.h:
	- Incremented db version number to 0.2 due to increase in player name
	  length to 16

	* /cvsroot/GGZ/ggzd/game_servers/spades/engine_func.c, /cvsroot/GGZ/ggzd/game_servers/spades/protocols.h:
	- Use REQ/RSP_GAME_OVER at the end of the game

	* /cvsroot/GGZ/ggzd/ggzd/ggzd.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/seats.c, /cvsroot/GGZ/ggzd/ggzd/seats.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/table.h, /cvsroot/GGZ/ggzd/ggzd/transit.c:
	- Changed the internal representation of seat assignments from integer
	  player indices to player name strings: this makes it easier when we
	  go to dynamically allocated players and eliminate player indices
	- New function seats_type() to translate special seat assignment
	  strings into the old integer codes: GGZ_SEAT_XXXX

2000-06-17 03:52:00  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Updated to comply with protocol version 3:
	- send bot_allow_mask in RSP_LIST_TYPES
	- send ID before room in RSP_LIST_TABLES
	- added GGZ_UPDATE_STATE subop to MSG_UPDATE_TABLES

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Updated protocol version to 3:
	- Added bot_mask to RSP_LIST_TYPES
	- Send table ID before room in RSP_LIST_TABLES
	- Added GGZ_UPDATE_STATE subopcode to MSG_UPDATE_TABLES

2000-06-14 04:23:51  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/tictactoe/game.c:
	- Removed many debugging statements from ttt bot code

2000-06-14 03:20:00  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/hash.c:
	- Added parens around hash_pjw line that caused a warning

	* /cvsroot/GGZ/ggzd/ggzd/ggzdb.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.c, /cvsroot/GGZ/ggzd/ggzd/players.c:
	- Wrote update and close functions for the database
	- Player last login timestamp is now updated at login

	* /cvsroot/GGZ/ggzd/ggzd/err_func.c:
	- Removed lock for fputs() - stream output in glibc2 is threadsafe

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/transit.c:
	- Switched over completely to personal locks for player structures
	- Renamed main player lock (still used to protect count) to mainlock

2000-06-14 02:06:29  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/motd.c, /cvsroot/GGZ/ggzd/ggzd/seats.c, /cvsroot/GGZ/ggzd/ggzd/seats.h, /cvsroot/GGZ/ggzd/ggzd/table.h:
	- Moved definition of table struct into table.h

2000-06-13 16:32:21  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Uncommented the {REQ,RSP}_LOGIN_NEW and {REQ,RSP}_LOGIN reference
	  pages since they are now supported by the server
	- NOTE: protocol version did not change

2000-06-12 17:54:35  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/ggzd.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Set player's table index to -1 immediately after a successful leave:
	  This fixes the bug Doug found where a table gets removed after one
	  player leaves
	- Fixed subtle bug in transit system caused by the table getting removed
	  before a player was notified of a successfule leave

	* /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/ggzd/Makefile.am:
	- Added --database option to configure script.  Currently only accepts
	  db2
	- Only build database object code selected at configure time

2000-06-12 02:12:32  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/ggzdb.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb.h:
	- Place a db version in datadir to check for outdated database files

2000-06-11 23:15:03  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/ggzdb.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.h:
	- Altered backend definitions to use functions instead of macros
	  so Brent doesn't have to deal with backend header files

	* /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.c:
	- Fixed stupid error that caused a segfault

	* /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/players.c:
	- Generates a "decent" password, common word + 2 digits for new users

	* /cvsroot/GGZ/ggzd/ggzd/ggzdb.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb.h, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.h, /cvsroot/GGZ/ggzd/ggzd/players.c:
	Phase 2 of database implementation

	ggzdb/db2.c
	  - Wrote player_get functions
	  - Altered db2 backend to be threadsafe w/o thread locks

	players.c
	  - Wrote player_login_normal to login a registered player
	  - Altered player_login_anon to check if name is in db

	* /cvsroot/GGZ/ggzd/acconfig.h, /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/control.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb.h, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.c, /cvsroot/GGZ/ggzd/ggzd/ggzdb_db2.h, /cvsroot/GGZ/ggzd/ggzd/players.c:
	Big update to kickstart the database stuff

	acconfig.h
	  - Missed an undef

	configure.in
	  - Added check for db2 in libdb

	control.c
	  - Call the ggzdb_init() function

	players.c
	  - Enabled REQ/RSP_LOGIN_NEW
	  - Updated players_login_new to work with newer ggzd features

	ggzdb.c
	  - Wrote initial front-end functions to support writing to database

	ggzdb_db2.c
	  - Wrote initial back-end functions to support db2

	* /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/ggzd.conf.in, /cvsroot/GGZ/ggzd/ggzd/ggzd.test.in, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c:
	- Added configure.in variable ggzddatadir/DATADIR
	- Parse and store DataDir from ggzd.conf configuration file
	- Default to DATADIR in config.h if not in ggzd.conf
	- Set DataDir to test directory in ggzd.test

2000-06-10 04:51:41  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Don't send MSG_UPDATE_PLAYERS to myself
	- Pack player number and seat into data for table updates
	- Send GGZ_UPDATE_LEAVE events for remaining players when a table is
	  removed

2000-06-10 00:58:09  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/hash.c:
	Personal messages between rooms now functional

	chat.c
	  - replace in-room name search with call to hash_player_lookup()

	hash.c
	  - coded hash_player_lookup() - returns p_index or -1 if not found

2000-06-09 06:25:29  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/hash.c, /cvsroot/GGZ/ggzd/ggzd/hash.h, /cvsroot/GGZ/ggzd/ggzd/players.c:
	Started work on player name hash tables

	Makefile.am
	  - Added hash.[ch] to compilation list, remember to run autogen.sh!

	players.c
	  - Call hash_player_add to add player name to hash at login
	  - Use hash_player_add return code to determine if login name is in use
	  - Call hash_player_delete to remove player name at disconnect

	hash.[ch]
	  - Initial coding of hash_player_add/delete - seems stable :)
	  - Initial number of lists coded at 31 - good for small to medium site
	  - Uses one thread lock per list to minimize contention
	  - List usage tracking coded in (for large site tuning; gives min, max,
	    and average list depths)
	  - Ripped a hash function from Holub who ripped it from Aho

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	- handle a DOTS_REQ_NEWGAME by reseting the game and asking for options

2000-06-07 04:01:39  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/chat.c:
	- Personal chats sent from a table are now blocked (E_AT_TABLE)
	- Added note to add read locks in the future

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	- Send DOTS_REQ_OPTIONS to first joining client (the launcher)
	- Send options to all clients (including launcher) when a OPTIONS event occurs
	- Send seats and names on join now that client always has a main dialog

2000-06-06 06:35:12  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	- Moved DOTS_SND_OPTIONS to client->server portion of protocol where it belongs

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.c, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.h, /cvsroot/GGZ/ggzd/game_servers/dots/main.c:
	Updated server to work with new launch protocol

	game.c:
	  - Get DOTS_SND_OPTIONS (9) opcode and process with game_get_options
	  - Added new state DOTS_STATE_OPTIONS when waiting for options
	  - Queue JOIN events so that they are not fulfilled until options are set

	ggz.c:
	  - Server no longer obtains options from main ggzd server on launch

	main.c:
	  - Don't send an options buffer to ggz_init()

	* /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/protocols.h:
	- Personal chat messages (/msg, /beep) to a user at a table are denied
	- Added E_AT_TABLE (-14) error code to return for RSP_CHAT

2000-06-05 03:06:25  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Updated to comply with protocol version 2:
	- Have MSG_UPDATE_XXX send actual update information
	- In table_loop(), unlock transit_lock, not state_lock

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Modified MSG_UPDATE_{PLAYERS|TYPES|TABLES|ROOMS} to send update
	  information, rather than just notification of a change
	- Bumped protocol version to 2

2000-05-23 04:26:02  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/room.h, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- Use event system for table updates
	- Remove all traces of old timestamp-based update system
	- No longer send room and type update messages upon login
	- No longer send player and table updates upon entering a room

2000-05-22 23:00:45  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/room.c:
	- Use event system when players join/leave room (still sends "/SxxxS")

	* /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/parse_opt.c, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/room.h, /cvsroot/GGZ/ggzd/ggzd/table.c:
	- s/chat_room/rooms/g;
	- Move definition of room struct into room.h

2000-05-20 05:19:57  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/doc/design.sgml, /cvsroot/GGZ/ggzd/game_servers/spades/engine.h, /cvsroot/GGZ/ggzd/game_servers/spades/engine_func.c, /cvsroot/GGZ/ggzd/game_servers/tictactoe/ggz.c, /cvsroot/GGZ/ggzd/game_servers/tictactoe/ggz.h, /cvsroot/GGZ/ggzd/game_servers/tictactoe/main.c:
	- Updated server to comply with protocol version 1:
	- Moved option handling into game server modules
	- Updated ttt and spades; dots still broken

2000-05-19 21:15:17  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Removed game option handling from REQ_TABLE_LAUNCH.
	- Incremented protocol version number to 1

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Spelling corrections
	- Misc doc fixes

2000-05-16 02:50:13  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Updated a few more opcodes

2000-05-15 23:51:31  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Finished making index entires for client/server protocol items (some
	  still need work though).

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Documentation updates

2000-05-14 18:12:40  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/table.c:
	Server now verifies validity of seating assignments

	table.c
	  - Supplement printing of seats and bots with tests to insure validity
	  - Return E_BAD_OPTIONS if seating invalid

	players.c
	  - Don't bother trying to join the table if it failed to create
	    (ensures proper return of error code for RSP_TABLE_LAUNCH)

2000-05-14 05:48:21  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/protocols.h:
	- Updated server to comply with protocol version 0:
	- Pass protocol version and max chat length after MSG_SERVER_ID

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	- Updated MSG_SERVER_ID protocol.
	- Added protonum entity and set to 0.
	- Removed protocol items which we don't implement

2000-05-13 07:45:13  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/ai.c:
	- AI skill upgraded to medium, now gives away least possible number of squares
	  if unable to make a safe move (1 move lookahead)

	* /cvsroot/GGZ/ggzd/doc/design.sgml:
	Updated documentation on chat protocol

2000-05-12 05:36:27  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/dots/ai.c, /cvsroot/GGZ/ggzd/game_servers/dots/ai.h, /cvsroot/GGZ/ggzd/game_servers/dots/dots.dsc, /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/main.c:
	Added AI to CtD

	Fairly simplistic, equates to "easy" mode if difficulty levels are ever
	included.  First looks for any scoring moves, if none it will pick a random
	safe move, and if no safe moves it will pick a random move with what is left.

	Future (long range?) enhancement is to add look-ahead

2000-05-11 18:49:20  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/Makefile.am, /cvsroot/GGZ/ggzd/ggzd/chat.c, /cvsroot/GGZ/ggzd/ggzd/chat.h, /cvsroot/GGZ/ggzd/ggzd/datatypes.h, /cvsroot/GGZ/ggzd/ggzd/event.c, /cvsroot/GGZ/ggzd/ggzd/event.h, /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/room.c, /cvsroot/GGZ/ggzd/ggzd/room.h:
	- New event subsystem!
	- Added room-specific and player-specific event queues to player data
	  structure
	- Reworked chat system to use events

2000-05-11 04:59:46  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	Completed implementation of DOTS_SND_SYNC

	Server:
	- Keep track of owned squares and send them as part of DOTS_SND_SYNC

	Client:
	- After receiving DOTS_SND_SYNC, call board_redraw() to display game
	- Implemented board_redraw() to draw all lines and owned squares

2000-05-10 14:33:57  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/Makefile.am:
	- Always rebuild testdir from scratch

2000-05-10 00:46:00  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	Altered CtD protocol to always send DOTS_MSG_OPTIONS

	- Removed DOTS_REQ_OPTIONS
	- Renamed DOTS_RSP_OPTIONS -> DOTS_MSG_OPTIONS
	- Send DOTS_MSG_OPTIONS to joining board, before SYNC is sent

2000-05-08 05:07:05  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/tictactoe/game.c, /cvsroot/GGZ/ggzd/game_servers/tictactoe/game.h:
	- Made ttt bot a *lot* smarter

2000-05-06 23:18:26  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/players.c: /msg and /beep implemented

	FIXME:
	  player's personal chat should be zapped when they leave the server

	* /cvsroot/GGZ/ggzd/ggzd/players.c, /cvsroot/GGZ/ggzd/ggzd/protocols.h, /cvsroot/GGZ/ggzd/ggzd/room.c:
	Updated to new chat protocol, currently handles only GGZ_CHAT_NORMAL

2000-05-06 02:54:05  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/ggzd/ggzd.h, /cvsroot/GGZ/ggzd/ggzd/table.c, /cvsroot/GGZ/ggzd/ggzd/transit.c:
	- Small redesign of transit system:
	- Eliminate GGZ_TRANSIT_RECV
	- Make GGZ_TRANSIT_LEAVE its own bit
	- When table removed signal anyone waiting for transit
	- Return error if table sends RSP_GAME_{JOIN, LEAVE} when we're not in
	  transit
	- This should eliminate the player handler thread hangs completely

	* /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/game_servers/dots/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/spades/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/tictactoe/Makefile.am:
	- s/ggzdmod/ggzdexecmod/g;  Now you can do 'make install-exec' to just
	  install executables and not conf files

2000-04-29 18:11:13  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h:
	Connect the Dots getting ever closer

	- Games now launch, moves are sent to server
	  (don't know what happens if you include a bot - DDT cuz there are no bots)
	- Server calculates moves and responds to both clients
	- Turn processing not handled just right yet (sometimes it's both players turn!)
	- Game leaves ghost at end of game (clients don't handle EOG yet)

2000-04-28 04:21:23  rgade  <rgade@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.c, /cvsroot/GGZ/ggzd/game_servers/dots/main.c:
	Get and respond to options (board width, board height)

	* /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/game_servers/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/dots/.cvsignore, /cvsroot/GGZ/ggzd/game_servers/dots/Makefile.am, /cvsroot/GGZ/ggzd/game_servers/dots/dots.dsc, /cvsroot/GGZ/ggzd/game_servers/dots/dots.room, /cvsroot/GGZ/ggzd/game_servers/dots/game.c, /cvsroot/GGZ/ggzd/game_servers/dots/game.h, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.c, /cvsroot/GGZ/ggzd/game_servers/dots/ggz.h, /cvsroot/GGZ/ggzd/game_servers/dots/main.c, /cvsroot/GGZ/ggzd/game_servers/dots/protocols.h:
	Initial stab at Connect the Dots server

	- Compiles, but can't test, client needs updating to utilize server
	- Not sure how to handle the option passing, need to talk to Brent about this

2000-04-26 21:12:59  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/ggzd/doc/design.sgml, /cvsroot/GGZ/ggzd/doc/ggz.dsl:
	- Support for role="bold" attribute of emphasis tag in ggz.dsl
	- Use <emphasis role="bold"> to get bold, not <parameter> hack

	* /cvsroot/GGZ/ggzd/configure.in, /cvsroot/GGZ/ggzd/ggz_server.spec:
	- Bump version to 0.0.3pre

2000-04-25 03:55:16  bmh  <bmh@users.sourceforce.net>

	* doc/Makefile.am:
	- Include our DSSSL file and admin guide in dist

	* ggz_server.spec:
	- Don't include easysock files

	* /cvsroot/GGZ/easysock/configure.in, /cvsroot/GGZ/easysock/Makefile.am:
	- Bumped version to 0.0.1
	- Bumped so number to 1.0.1 in accordance with libtool suggestions

2000-04-24 04:18:24  bmh  <bmh@users.sourceforce.net>

	* INSTALL, README:
	- Updated docs to reflect new compilation and install procedures

	* doc/game-modules.txt:
	- Updated to document Unix domain socket used for communication
	- Mention tic-tac-toe example module

	* doc/admin-guide.txt:
	- Moved configuration stuff into INSTALL.  Added/clarified some stuff.

	* doc/design.sgml:
	- Added REQ/RSP_LOGIN_* items to appendix

2000-04-23 23:30:15  bmh  <bmh@users.sourceforce.net>

	* doc/design.sgml, doc/ggz.dsl:
	- Put all server interactions into refentries in appendix

2000-04-22 15:41:39  bmh  <bmh@users.sourceforce.net>

	* doc/admin-guide.txt:
	- Rich's first go at a GGZ admin guide (with the syslog stuff added)

2000-04-21 22:49:02  bmh  <bmh@users.sourceforce.net>

	* doc/Makefile.am:
	- Always remake docs

2000-04-21 06:10:35  rgade  <rgade@users.sourceforce.net>

	* doc/design.sgml: Documentation updated muchly:

	- New documentation for room, chat, server options, MOTD and log internals
	- Description of the config file parse phases
	- A few bad tags and mispelings fixed I happened to see

	* ggz_server.spec: RPM Spec file modifications

	- Wrote the ggz_client spec file
	- Updated the ggz_server spec file to allow a BuildRoot so it can be built
	  by non-root users
	- Updated ggz_server spec file to use /etc for the SYSCONFDIR

2000-04-18 20:18:41  bmh  <bmh@users.sourceforce.net>

	* ggzd/ggzd.conf.in, game_servers/spades/.cvsignore, game_servers/spades/Makefile.am, game_servers/spades/spades.dsc, game_servers/tictactoe/.cvsignore, game_servers/tictactoe/Makefile.am, game_servers/tictactoe/tictactoe.dsc, TODO:
	- Renamed game modules to ggzd.* rather than ggzd_*

2000-04-15 17:27:48  rgade  <rgade@users.sourceforce.net>

	* ggz_server.spec: A spec file to generate a GGZ Server RPM

	* game_servers/spades/Makefile.am, game_servers/spades/spades.dsc, game_servers/tictactoe/Makefile.am, game_servers/tictactoe/tictactoe.dsc:
	spades executable now ggzd_spades
	tictactoe executable now ggzd_tictactoe

2000-04-11 15:41:36  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c, ggzd/protocols.h, ggzd/table.c, game_servers/tictactoe/game.c, game_servers/tictactoe/ggz.c, game_servers/tictactoe/main.c, game_servers/tictactoe/protocols.h:
	- MSG_GAME_OVER -> REQ/RSP_GAME_OVER
	- Game module doesn't exit until receiving RSP_GAME_OVER
	- As soon as table handler receives REQ_GANE_OVER, make table as done
	- Don't follow through with leave, if table marked as done

	* ggzd/transit.c:
	- If there is an error in transit, set GGZ_TRANSIT_RECV so player
	  thread won't hang.

	* game_servers/spades/Makefile.am, game_servers/tictactoe/game.c, game_servers/tictactoe/Makefile.am, ggzd/ggzd.conf.in, ggzd/ggzd.test.in, ggzd/transit.c, Makefile.am:
	- Small autoconf updates (typos, omitted files, etc)
	- Don't forget to close the remote end of the socketpair!!!

2000-04-10 22:46:24  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c, ggzd/table.c:
	- Added more log entries for failure conditions

2000-04-10 22:35:39  rgade  <rgade@users.sourceforce.net>

	* ggzd/table.c:
	- Make sure the socket is created before we exec() the game server

2000-04-10 21:25:34  bmh  <bmh@users.sourceforce.net>

	* game_servers/spades/Makefile.am, game_servers/tictactoe/Makefile.am, ggzd/ggzd.motd, ggzd/ggzd.test.in, ggzd/Makefile.am, ggzd/table.c:
	- Added sample ggzd.motd
	- Force overwrite of files when doing 'make test'

2000-04-09 20:12:22  rgade  <rgade@users.sourceforce.net>

	* ggzd/parse_opt.c: - Turned off TmpDir option parsing for now

2000-04-09 19:56:02  bmh  <bmh@users.sourceforce.net>

	* autogen.sh, configure.in, .cvsignore, game_servers/Makefile.am, game_servers/spades/Makefile.am, game_servers/tictactoe/Makefile.am, ggzd/.cvsignore, ggzd/ggzd.test.in, ggzd/Makefile.am, Makefile.am, TODO:
	- Added 'test' target.  Just do a 'make test' to create the testdir
	- Added ggzd.test.in to be filled in by configure and then used in
	  testing.

2000-04-09 19:51:00  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c:
	- Allocate a MAX_CHAT_LEN buffer for chat messages rather than allowing
	  arbitrary size strings.

2000-04-08 21:12:33  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/err_func.c, ggzd/parse_opt.c:
	- If the user specifies --debug=#, don't overwrite it from ggzd.conf

2000-04-08 21:08:50  bmh  <bmh@users.sourceforce.net>

	* ggzd/ggzd.conf.in:
	- Added example for ConfDir option, but default to commented out

2000-04-08 20:46:42  rgade  <rgade@users.sourceforce.net>

	* ggzd/parse_opt.c: - Set error defaults for admin name and email

	* game_servers/tictactoe/tictactoe.room: - GameType should be TicTacToe

	* ggzd/control.c, ggzd/datatypes.h, ggzd/motd.c, ggzd/parse_opt.c:
	Making directory structure work

	control.c
	  - Keep logfiles off until JUST before daemon_init

	datatypes.h
	  - Added tmp_dir, conf_dir

	motd.c
	  - Default to loading MOTD file from conf_dir

	parse_opt.c
	  - Use GGZDCONFDIR for finding config file
	  - Set defaults for directories which are not specified in conf file
	  - Use opt.conf_dir as base directory for game and room files

2000-04-08 19:41:19  bmh  <bmh@users.sourceforce.net>

	* acconfig.h, configure.in, game_servers/spades/Makefile.am, game_servers/spades/spades.dsc, game_servers/spades/spades.room, game_servers/tictactoe/Makefile.am, game_servers/tictactoe/tictactoe.dsc, game_servers/tictactoe/tictactoe.room, ggzd/ggzd_casual.room, ggzd/ggzd_competitive.room, ggzd/ggzd.conf, ggzd/ggzd.conf.in, ggzd/Makefile.am, ggzd/parse_opt.c, ggzd/players.c, TODO:
	- Redid autoconf stuff to put things in correct places
	- Moved room files in with game modules
	- Have configure create ggzd.conf from ggzd.conf.in
	- Enable debugging by default

2000-04-07 19:13:56  rgade  <rgade@users.sourceforce.net>

	* ggzd/control.c, ggzd/room.c: room.c
	  - room_join - don't ignore error code from room_send_chat
	  - Don't bother trying to send chat if they are moving off the server
	  - Check for GGZ_REQ_DISCONNECT in room_handle_join
	  - Replaced 0/-1's with GGZ_REQ_OK/GGZ_REQ_DISCONNECT

	control.c
	  - Don't ignore a SIGPIPE except in production

2000-04-07 19:11:30  bmh  <bmh@users.sourceforce.net>

	* game_servers/tictactoe/game.c:
	- Fixed game_send_sync() to send whole board, not just first row

2000-04-07 01:23:32  rgade  <rgade@users.sourceforce.net>

	* ggzd/control.c: - Setup to ignore SIGPIPE from a sick client

2000-04-06 21:16:25  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c:
	- Separated player_list_tables() into separate functions
	- player_list_tables_room() handles room-specific table lists
	- player_list_tables_global() handles server-wide table lists

2000-04-05 22:31:26  bmh  <bmh@users.sourceforce.net>

	* game_servers/tictactoe/game.c, game_servers/tictactoe/game.h, game_servers/tictactoe/ggz.c, game_servers/tictactoe/tictactoe.dsc:
	- Collapsed TTT_STATE_WAIT_INIT and TTT_STATE_WAIT_MID
	- Initalize turn to -1 in game_init() and then set to 0 when game
	  begins
	- Rewrote game_update to be event based, not state based
	- Add void* data parameter to game_update.  Much more useful now
	- Always send name, even if it's a bot
	- New function game_bot_move() does a simple bot (first available
	  square)
	- New function game_move() abstracts player and bot
	- Updated .dsc file now that bots are allowed

	* ggzd/room.c:
	- In room_join(), don't call room_send_chat() if in room -1

	* ggzd/control.c:
	- Remove mtrace stuff (it's GNU specific and not that helpful)

	* ggzd/room.c:
	- Fixed bug in room_handle_join if user tries to enter non-existent
	  room.

2000-04-05 18:23:26  rgade  <rgade@users.sourceforce.net>

	* ggzd/ggzd.h, ggzd/players.c, ggzd/room.c, ggzd/room.h:
	Lock fixes/optimizations on room code

	players.c
	  - Send file descriptor to room_join() and room_send_chat()

	room.c
	  - Rewrote room_send_chat, no buffer - chats sent outside of locks
	  - room_send_chat builds a list of chats to delete and removes them
	    outside of lock
	  - Don't call room_spew_chat_room() unless list debugging is enabled as it
	    is a high cost algorithm

2000-04-05 12:42:32  bmh  <bmh@users.sourceforce.net>

	* doc/design.sgml:
	- s/game/table in a couple places

2000-04-05 04:22:04  rgade  <rgade@users.sourceforce.net>

	* ggzd/ggzd.h, ggzd/room.c: ggzd.h
	  - New define: CHAT_OUTBUF_SIZE

	room.c
	  - room_chat_send() now copies chats to a buffer, then sends out
	    the I/O in a lock-free loop.

	* ggzd/room.c: - Fixed a missing free()

	* ggzd/control.c, ggzd/players.c: - Fixed two nasty memory leaks
	- Added a call to mtrace() in control.c if DEBUG is on

2000-04-04 19:57:30  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c:
	- Return error if trying to do a non-global table list when not in
	  room

	* ggzd/room.c:
	- In room_send_chat, unlock the chat_room lock if there is an error
	  sending the chats.  This should prevent hangs due to inability to
	  acquire locks held by dead people.

2000-04-03 20:28:34  bmh  <bmh@users.sourceforce.net>

	* game_servers/tictactoe/game.c, game_servers/tictactoe/game.h:
	- Added detection for tie game

	* /cvsroot/GGZ/easysock/easysock.h:
	- Added #include <sys/types.h> for size_t

	* TODO:
	- Fixed up a bit.  Moved some itmes from 0.0.2 to 0.0.3

	* game_servers/tictactoe/game.c, game_servers/tictactoe/game.h, game_servers/tictactoe/ggz.c, game_servers/tictactoe/ggz.h, game_servers/tictactoe/main.c, game_servers/tictactoe/Makefile.am, game_servers/tictactoe/protocols.h:
	- First stab at a Tic-Tac-Toe game with GGZ stuff tucked nicely away
	  in ggz.[ch]

	* ggzd/table.c, ggzd/transit.c:
	- Fixed bug where a message coming from the game server between
	  REQ_GAME_{LEAVE|JOIN} and RSP_GAME_{LEAVE|JOIN} would cause the
	  table thread to hang.

2000-04-02 23:48:55  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/parse_opt.c, ggzd/players.c, ggzd/protocols.h, ggzd/room.c, ggzd/room.h:
	Added MSG_UPDATE_ROOMS to server and client

	- Client does not yet act upon it, merely accepts it

	* ggzd/players.c, ggzd/table.c:
	- Table changes have to trigger a player list update

	* ggzd/datatypes.h, ggzd/parse_opt.c, ggzd/players.c, ggzd/room.c, ggzd/table.c:
	Room support for tables:

	datatypes.h
	  - Timestamp for table changes in chat room
	  - List of table indices in chat room

	parse_opt.c
	  - Allocate the list of table indices for chat room

	players.c
	  - Alter update code to use table_timestamp from chat room
	  - Alter joins/launches to update chat room table_timestamp
	  - Alter launches to update table index list in chat room
	  - Alter player_list_tables() to avoid search for valid tables if !global

	room.c
	  - Zap out the count of tables at room initialization
	  - Small optimization to reordering of player index list

	table.c
	  - Remove table index from chat room on table_remove and update timestamp

2000-04-01 08:56:08  bmh  <bmh@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/players.c:
	- Added room member to TableInfo
	- Do some error checking on REQ_TABLE_LAUNCH (type checking, and don't
	  allow multiple tables per player)
	- Add room support to {REQ|RSP}_LIST_TABLES to comply with protocol spec

	* doc/design.sgml:
	- Added MSG_UPDATE_ROOMS and added room stuff to REQ_TABLE_LIST
	- Minor renaming to GGZ <-> game server protocol to prevent namespace
	  clash

	**Client/Server Protocol is now frozen for 0.0.2 release**

2000-03-31 23:43:59  bmh  <bmh@users.sourceforce.net>

	* game_servers/spades/engine_func.c:
	- Comply with protocols (had forgotten to recevie size of options)

	* ggzd/players.c, ggzd/table.c:
	- Added Rich's patch for player_list_players (more efficient lock handling)
	- Don't send player list if we're not in a room.
	- Rewrote table_pass_options to be more lock-efficient and to comply
	  with protocol.

2000-03-31 19:50:43  rgade  <rgade@users.sourceforce.net>

	* ggzd/err_func.c: err_msg_exit() shouldn't print errno string

2000-03-31 06:34:00  bmh  <bmh@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/ggzd.h, ggzd/players.c:
	- Removed state member from UserInfo object (it's function can be done
	  just as easily elsewhere)

	* TODO:
	- Updated TODO list

	* ggzd/players.c, ggzd/room.c:
	- Do better validity checking
	- Don't allow anything until you're logged in (except logging in)

	* ggzd/players.c:
	- Don't try to update player list when in room -1

2000-03-31 04:28:02  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/players.c, ggzd/room.c:
	Modified RSP_LIST_PLAYERS to only list players in a user's room

	- Move timestamp into the chat_room, so only if the room contents changed
	  does an update go out
	- Rewrite of player_list_players
	- room_join updates the timestamps

	* ggzd/players.c, ggzd/room.c: Fixed some lock misuses

	players.c
	  - race condition in room_emit()

	both files
	  - removed extraneous unlocks of player structure

2000-03-31 03:12:47  bmh  <bmh@users.sourceforce.net>

	* doc/design.sgml:
	- Actually commit these changes....
	- Make sure protocol matches what we actually do.

	* ggzd/players.c, ggzd/protocols.h:
	- Check player state in appropriate places
	- New error codes

2000-03-30 23:10:30  bmh  <bmh@users.sourceforce.net>

	* ggzd/ggzd.h, ggzd/players.c, ggzd/players.h, ggzd/seats.c, ggzd/seats.h, ggzd/table.c:
	- s/comp/bot in various places (it's shorter and more recognizable)

	* ggzd/datatypes.h, ggzd/ggzd.h, ggzd/parse_opt.c, ggzd/players.c, ggzd/protocols.h, ggzd/table.c:
	- Finally got around to renaming defines to get rid of NG_ prefix
	- Eliminated COMP_ALLOW_XXX
	- Renamed type allow member elements to player_allow_mask and
	  bot_allow_mask
	- Renamed UserInfo element from playing to state
	- Created some #defines for player state

2000-03-30 16:19:11  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c, ggzd/room.h:
	- Added warning about room_emit() behaviour in room.c and room.h

2000-03-30 14:59:04  bmh  <bmh@users.sourceforce.net>

	* ggzd/chat.c, ggzd/chat.h, ggzd/control.c, ggzd/players.c, ggzd/Makefile.am, TODO:
	- Removed last vestiges of old chat system
	- Updated TODO list

	* ggzd/parse_opt.c, ggzd/room.c:
	- Added memset() to cleae game_info when we malloc it
	- Remove extraneous RSP_ROOM_JOIN

2000-03-30 03:04:57  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c, ggzd/protocols.h, ggzd/room.c:
	REQ/RSP_ROOM_JOIN implemented

	room.c
	  - Wrote room_handle_join()

	players.c
	  - Players start in room -1
	  - Chat in room -1 receives a RSP_CHAT code of -1
	  - "/join" command removed
	  - cleanups to follow

2000-03-30 00:58:26  bmh  <bmh@users.sourceforce.net>

	* doc/design.sgml:
	- Reverted ROOM_JOIN protocol change

2000-03-29 23:48:23  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c:
	- Fixed a bug in room_create_additional() - realloc() doesn't initialize
	  memory to 0's like malloc() does
	- Made same change to room_initialize() just in case

	* doc/design.sgml: - Small change to REQ/RSP_ROOM_JOIN for Justin

	* doc/design.sgml: - Added REQ/RSP section for rooms
	- Documented REQ/RSP_ROOM_JOIN

	* ggzd/room.c: Rewrote room_create_additional() to use realloc()

	* ggzd/room.c, doc/design.sgml: RSP_LIST_ROOMS protocol fix

	* ggzd/parse_opt.c:
	- Fixed lack of fclose() on game and room configuration files
	- Fixed invalid parse of AllowLeave config option

	* ggzd/players.c, ggzd/table.c:
	Altered select call wait times, 5 seconds is a long time to wait
	 - just a test to see how it affects load (shouldn't)

2000-03-29 02:46:13  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/room.c:
	- fixed small bug in room code == -1 to != -1

2000-03-29 02:21:35  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c:
	- Expect seat 0 information from client when doing table launch
	- leave table if error in responding to client after successful launch
	  or join

2000-03-28 07:25:53  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c, ggzd/room.c, ggzd/room.h:
	Implemented REQ/RSP_LIST_ROOMS on server end

	players.c
	  - Inserted call to room_handle_request()

	room.c
	  - Added room_handle_request() to handle all opcodes dealing with rooms
	  - Added room_list_send() to handle a REQ_LIST_ROOMS per latest protocol spec

2000-03-28 05:25:26  bmh  <bmh@users.sourceforce.net>

	* game_servers/spades/protocols.h, game_servers/spades/spades.dsc, game_servers/tictactoe/protocols.h, game_servers/tictactoe/tictactoe.dsc, ggzd/protocols.h, ggzd/table.c:
	- When enough people have joined a table, mark it as GGZ_TABLE_PLAYING
	- Don't attempt leave if table type is -1 (prevents leaving a removed table)
	- Don't attempt leave if !allow_leave and state is playing
	- New error code E_TABLE_FORBIDDEN for when allow_leave is 0
	- Added AllowLeave and a comment to .dsc files

2000-03-28 04:49:43  rgade  <rgade@users.sourceforce.net>

	* doc/design.sgml: Protocol change to REQ/RSP_LIST_ROOMS

	* doc/design.sgml, game_servers/spades/protocols.h, ggzd/protocols.h:
	- Added protocol specifier for REQ/RSP_LIST_ROOMS
	- Added documentation for REQ/RSP_LIST_ROOMS

	* ggzd/control.c, ggzd/datatypes.h, ggzd/ggzd_casual.room, ggzd/ggzd_competitive.room, ggzd/ggzd.conf, ggzd/ggzd.h, ggzd/parse_opt.c, ggzd/parse_opt.h, ggzd/players.c, ggzd/room.c, ggzd/room.h:
	Added AllowLeave game option to GameInfo parse and datatype

	Removed an unused var from players.c

	Implemented room definition files
	  - Put *.room files into game_dir.  Sample files are included.
	  - MaxTables parsed, stored, but not enforced.

2000-03-28 02:00:14  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c, ggzd/table.c, ggzd/transit.c:
	- Try to avoid another ghost condition by calling table_leave() when
	  doing the player's table cleanup.
	- Added some dbg messages to the transit code
	- Don't update timestamp if you've removed last player (remove will do
	  it)

	* ggzd/players.c:
	- Call table_leave() upon player logout/error (prevents ghost tables)

2000-03-27 23:02:31  bmh  <bmh@users.sourceforce.net>

	* ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c, ggzd/players.c, ggzd/table.c, TODO:
	- Added new debug level GGZ_DBG_GAME_MSG for those byte-level "User to
	  Game" messages that everybody loves
	- Lengthed log/debug defines to 32 bit
	- Fixed truncation problem on MSG_LOG/DEBUG

	* game_servers/spades/engine_main.c, game_servers/spades/err_func.c, game_servers/spades/err_func.h:
	- Added log_msg() function which utilizes MSG_LOG to the GGZ server

	* doc/ascii-lynx.dsl, doc/design.sgml, doc/ggz.dsl, doc/Makefile.am:
	- Created GGZ stylesheet from gnome one
	- Improved doc-making system

	* ggzd/table.c, ggzd/transit.c:
	- Put game module type and pid in log/debug files if options enabled

	* game_servers/spades/engine_func.c:
	- Use es_read_int_or_die() when reading bids.

	* ggzd/datatypes.h, ggzd/players.c, ggzd/table.c:
	- When launching a table, don't hardcode self to seat[0].  Instead,
	  wait until table is launched and then call table_join()
	- Removed player_fd member of TableInfo (no longer necessary)

	* ggzd/datatypes.h, ggzd/players.c, ggzd/table.c, ggzd/transit.c:
	- Made transit_flag an unsigned char so we can use all 8 bits
	- Fixup TRANSIT_LEAVE logic since it's not a flag but the absence of
	  one.
	- Added some debug messages to transit code
	- Remove table if seat count goes down to zero (fixes some ghost tables)

2000-03-27 18:55:32  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c: General cleanups to room_join()
	  - Cleaned up deadlock avoidance strategy
	  - Now checks for invalid room number rather than implicitly trusting caller
	  - Send off chat messages from old room before switching
	  - Check for already NULL chat_head before sending off to dequeue()
	  - A few other misc cleanups

	* ggzd/err_func.c, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c:
	Added option for GameTypeInLogs

	err_func.c
	  - Intialize log options to default to GameTypeInLogs ON

	err_func.h
	  - Added GGZ_LOGOPT_INC_GAMETYPE bitmask

	ggzd.conf
	  - Demonstration of syntax

	parse_opt.c
	  - Parse and set the log option

2000-03-27 04:24:31  bmh  <bmh@users.sourceforce.net>

	* TODO:
	- Fixed up TODO list

	* ggzd/datatypes.h, ggzd/err_func.h, ggzd/ggzd.h, ggzd/Makefile.am, ggzd/players.c, ggzd/table.c, ggzd/table.h, ggzd/transit.c, ggzd/transit.h:
	- Moved much of transit code to transit.c
	- Rewrote launch and transit systems to not require synchronous messages
	  from game module
	- Added transit variable transit_seat to hold seat number of joining
	  player
	- Cleaned up table_handle()

	* game_servers/spades/engine_func.c, game_servers/spades/engine_main.c, game_servers/spades/err_func.c, game_servers/spades/err_func.h, game_servers/spades/protocols.h:
	- Use MSG_LOG/MSG_DEBUG mechanism.
	- Updated to newest protcols.h
	- Code cleanups

2000-03-27 02:48:00  rgade  <rgade@users.sourceforce.net>

	* ggzd/parse_opt.c:
	Streamlined parse_log/dbg_types() using table searches

2000-03-26 23:43:12  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c:
	- room_join() now tests for room full conditions and returns E_ROOM_FULL
	- locks rewritten using trywrlock() to avoid deadlock

2000-03-26 09:30:12  bmh  <bmh@users.sourceforce.net>

	* ggzd/motd.c, ggzd/players.c, ggzd/protocols.h, ggzd/table.c:
	- Implemented REQ/RSP_MOTD
	- Implemented MSG_LOG and MSG_DBG

	* doc/design.sgml:
	- Formatting changes
	- Spelling Fixes
	- Added REQ/RSP_MOTD
	- Added MSG_LOG, MSG_DBG

2000-03-26 06:58:26  rgade  <rgade@users.sourceforce.net>

	* ggzd/err_func.c:
	- Added lock around fputs based log output when not using multi-threaded logs

2000-03-25 19:48:25  bmh  <bmh@users.sourceforce.net>

	* configure.in:
	- Create tictactoe makefile

	* game_servers/Makefile.am:
	- Added tictactoe to list of modules to make

	* game_servers/spades/engine_func.c:
	- Added support for REQ_GAME_LEAVE

	* game_servers/tictactoe/.cvsignore, game_servers/tictactoe/ggz.c, game_servers/tictactoe/ggz.h, game_servers/tictactoe/main.c, game_servers/tictactoe/Makefile.am, game_servers/tictactoe/protocols.h, game_servers/tictactoe/tictactoe.dsc:
	- Added skeleton of new game module

2000-03-25 17:38:59  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/ggzd.h, ggzd/room.c:
	- Added array of indexes to players in room
	- Search players in room when chatting, not all players
	- WARNING: There is no check for overstuffing a room yet, I want to think
		   about how to handle a failed room_join() from -1 to 0 first.
		   So don't let >100 people in a room :)
		-  Option 1: Drop their connection
		-  Option 2: Qeuue them for entry
		-  Option 3: Find any room we can stuff 'em into

2000-03-24 18:46:26  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c:
	DOH! - Always 'make' even after a simple change.  Missing semicolon fixed.

	* ggzd/room.h: Removed room_dequeue_chat() - static function now

	* ggzd/players.c, ggzd/room.c: room.c
	  - Restructured locks to make player lock unnecessary
	  - Made room_dequeue_chat() static

	players.c
	  - Removed an unncessary call to room_dequeue_chat()

2000-03-24 06:17:16  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c:
	- Updated to new es_read_string() interface

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	- es_read_string() now takes the length of the user-provided buffer as an
	  argument.  If the received string size exceeds the buffer length, it will
	  return will an error.  This should prevent buffer overflows.
	- es_read_string() now guarntees NULL-termination (again.  and it should
	  work too)

2000-03-24 02:58:23  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c:
	- Small chat bug-fix, fixes a "this could never happen" crash

	* ggzd/room.c:
	- Minor chat improvement, changed a write lock to a read lock

2000-03-23 05:07:32  rgade  <rgade@users.sourceforce.net>

	* ggzd/control.c, ggzd/players.c, ggzd/room.c:
	Emit a room change message for both entering and leaving a room

	control.c
	  - We now have 2 rooms hardcoded, 0 and 1

	players.c
	  - Players enter at room -1, auto-switched to room 0 at login completion
	  - Blocked off entry to room -1 (old chat can cause hung chats)
	  - Players switch to room -1 at disconnect
	    (By entering and leaving at room -1 causes a room change msg automatically)

	room.c
	  - Fixed an assumption in room_emit() which is not true for room leave msgs
	    (check for chat emission to an empty room)
	  - Reconnected room_notify_change() now that problems from last night are gone
	  - Fixed a VERY minor memory leak (only occured if a malloc() failed)

	* /cvsroot/GGZ/easysock/easysock.c: - ?Fixed? stack corruption bugs

2000-03-22 19:25:51  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c:
	- Repaired a memory leak, strings need to be dealloced with chat items

2000-03-22 08:45:45  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c:
	- Silly Brent, in es_read_string_alloc(), message is a char**, not a char*.
	  The correct way to null-terminate is (*message)[size] = '\0'

	* ggzd/players.c, ggzd/protocols.h, ggzd/table.c, ggzd/table.h:
	- Implemented {REQ,RSP}_TABLE_LEAVE

2000-03-22 04:12:27  rgade  <rgade@users.sourceforce.net>

	* ggzd/room.c: - Fixed a negative array index bug in room.c
	- Set default # of rooms back to 1

2000-03-21 21:07:44  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c, ggzd/room.c, ggzd/room.h:
	Chat now works in room 0, should work in 'X' rooms also, but haven't tried yet

	players.c
	  - Inserted hooks to read chat from our current room

	room.c
	  - Wrote room_send_chat() to send room chat to a player
	  - Fixed a memory leak in room_dequeue_chat()
	  - Fixed a nasty server lock in room_join()

2000-03-21 20:27:47  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c:
	- Ensure that strings read using es_read_string_XXX are always
	  NULL-terminated.

2000-03-21 19:20:36  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c, ggzd/players.c, ggzd/room.c, ggzd/room.h:
	- Messages are now enqueued for player consumption in room 0
	- This server should be memory leak free (/join is safe to use)
	- Can't read messages yet, but can view them queueing in debug

	datatypes.h
	  - Couple of tweaks

	err_func.h
	  - Added new debug types (GGZ_DBG_ROOM, GGZ_DBG_LISTS)

	parse_opt.h
	  - Added new debug types (GGZ_DBG_ROOM, GGZ_DBG_LISTS)

	players.c
	  - Calling conventions altered for some room_* calls
	  - Fixed all known memory leaks

	room.c
	  - Chat now enqueued for (later) consumption
	  - Dequeueing chat works properly
	  - List debug spewer coded - to check for leaks
	  - No memory leaks have been noticed

	* ggzd/players.c, ggzd/room.c, ggzd/room.h:
	Room change code, DON'T use '/join #' to change rooms (see ggz-dev)

	* ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.h, ggzd/Makefile.am, ggzd/players.c, ggzd/room.c, ggzd/room.h:
	Starting to add room functionality

	Changes are pretty self-explanatory, basically what I've done is setup
	the player to automatically join room -1 at connection time.  There is no
	way to change to another room :)

	If the player's room is -1, then the old chat functions are used as-is.

	* ggzd/players.c: - Emit a log_msg() when a player is removed

2000-03-20 05:00:14  bmh  <bmh@users.sourceforce.net>

	* game_servers/spades/engine_func.c, game_servers/spades/Makefile.am, game_servers/spades/protocols.h:
	- Updated to work with new table launching/joining system

	* ggzd/datatypes.h, ggzd/ggzd.h, ggzd/motd.c, ggzd/players.c, ggzd/protocols.h, ggzd/table.c, ggzd/table.h:
	- Rewrote table launching/joining code to fork table immediately upon
	  launch and then pass players to table as they join
	- Removed all code that actually deals with table to table.c
	- Created new "transit" system for joining/leaving table
	- Replaced table.info[].playing flag with table.info[].state variable

2000-03-19 05:32:03  rgade  <rgade@users.sourceforce.net>

	* ggzd/parse_opt.c: Changed the short form option for --debug to -d

	* ggzd/parse_opt.c:
	Added --debug configuration line option so we can debug GGZ_DBG_CONFIGURATION

	* ggzd/chat.c, ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/motd.c, ggzd/parse_opt.c, ggzd/players.c, ggzd/table.c:
	DebugTypes is now implemented

	Important changes:
	  dbg_msg now requires the FIRST parameter to be a valid GGZ_DBG_* debug type
	  See ggzd.conf for configuration file syntax

	* ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c, ggzd/parse_opt.h:
	LogLevel has been replaced by bitmap LogTypes

	ggzd.conf
	  - Describes and demonstrates new syntax

	control.c
	  - Updated printf() of log level to print log types as a hex value

	err_func.c
	  - log_msg() now outputs if the level passes through the log type bitmask

	parse_opt.c
	  - parse_log_types() parses a list of log types and returns a bitmask

	* ggzd/err_func.c: - Fixed a reentrancy problem

	* ggzd/err_func.c, ggzd/ggzd.conf:
	ThreadLogs configuration option now works

	err_func.c
	  - log_open_logfile() opens a logfile, appending PID if necessary
	  - err_doit() now fopen()'s the log before writing and the fclose()'s it

	ggzd.conf
	  - Cleaned up example ggzd.conf a little bit

2000-03-18 22:25:07  rgade  <rgade@users.sourceforce.net>

	* ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c, ggzd/players.c:
	Initial changes to support logs by thread PID

	- Moved all log options into log_info.options bitmap, there were enough options
	  to make it worthwhile
	- Altered #defines to reduce namespace pollution
	- Rewrote functions to deal with bitmap options
	- Parse (but don't act on) the ThreadLogs ggzd.conf directive

	* ggzd/players.c: - Replaced inet_ntoa with thread-safe inet_ntop

	* ggzd/parse_opt.c, ggzd/players.c:
	- Disabled HostnameLookup until further notice

	* ggzd/err_func.c, ggzd/motd.c:
	- Replaced all calls to localtime() with calls to thread-safe localtime_r()

2000-03-18 05:34:38  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/players.c, TODO:
	- Update table description

2000-03-18 03:13:35  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c:
	- Move motd display into player_login_* so it appears after successful login

2000-03-17 23:11:09  bmh  <bmh@users.sourceforce.net>

	* ggzd/control.c, ggzd/err_func.h, ggzd/motd.c, ggzd/players.c, ggzd/table.c:
	- Removed all occurrences of FAIL() macro since some system
	  calls return different values for success and failure

	* ggzd/ggzd.h, ggzd/players.c, ggzd/protocols.h:
	- Added MSG_ERROR to protocol
	- New function player_send_error() to send MSG_ERROR to client in
	  response to unrecognized opcodes
	- Rename player_handler() responses
	- Fixed bug in player_updates() where player number not printed
	  correctly
	- When checking for duplicate names, don't compare to players who
	  aren't logged in
	- Don't disconnect on failed login
	- Cleaned up read_name()

	* ggzd/control.c, ggzd/motd.c, ggzd/parse_opt.c, ggzd/players.c:
	- In parse_file(), set motd_info.use_motd if a motd file is specified
	- Call motd_read_file() from main() if it is set
	- Only try to send MOTD to client if it is set
	- Don't set it by default in motd_read_file()
	- Flag some non-reentrant functions in players.c
	- Close socket if we encounter an error in player_new()

	* ggzd/control.c, ggzd/parse_opt.c:
	- Removed hardcoded spades gametype.  Game types *MUST* be loaded from
	  description files in gamedir now.
	- Various cleanups
	- Make 5688 default port (as we discussed on ggz-dev)

2000-03-17 04:36:38  rgade  <rgade@users.sourceforce.net>

	* ggzd/players.c: - Fixed a warning in players.c

	* ggzd/players.c, ggzd/players.h:
	- anonymous login now fails on duplicate name

	* ggzd/datatypes.h, ggzd/players.c:
	- player handler thread now determines IP address for itself

	* ggzd/control.c, ggzd/players.c, ggzd/players.h:
	- We no longer pass ip_addr to the thread, it will determine it on it's own

	* ggzd/chat.c:
	- fixed chat_mark_all_read() to remove a finished chat message

2000-03-17 00:52:01  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/players.c:
	- Adds the option for players to add coments to games

2000-03-16 03:25:39  rgade  <rgade@users.sourceforce.net>

	* ggzd/chat.c, ggzd/players.c:
	- Implemented chat_mark_all_read(), should fix bug #102763

2000-03-15 04:04:36  rgade  <rgade@users.sourceforce.net>

	* ggzd/err_func.c:
	- fixed log file opens to append rather than overwrite

2000-03-14 00:37:38  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/err_func.c, ggzd/ggzd.conf, ggzd/parse_opt.c:
	- Added configuration option for logs (TimeInLogs) to include a timestamp

	- Fixed some potential buffer overruns in err_doit() - replaced all
	  v/sprintf with v/snprintf so we can't do that in the future.

2000-03-12 23:39:31  rgade  <rgade@users.sourceforce.net>

	* ggzd/ggzd.conf: Removed erroneous (Not Implemented) flags

	* ggzd/ggzd.conf, ggzd/parse_opt.c, ggzd/players.c:
	Hostname lookup on connecting client IP address now performed.  The default
	is not to do a hostname lookup, configurable in ggzd.conf.

	* ggzd/datatypes.h, ggzd/err_func.c, ggzd/ggzd.conf, ggzd/parse_opt.c:
	Enabled new ggzd.conf feature (PIDInLogs)

	* ggzd/parse_opt.c:
	Fixed a bug which caused a syntax error if debugging not enabled

	* ggzd/datatypes.h:
	Marked some items for eventual cleanup() that I hadn't been keeping up with :)

	* ggzd/control.c, ggzd/datatypes.h, ggzd/players.c, ggzd/players.h:
	IP address is now sent down to player functions to store in player table

	datatypes.h
	  - added ip_addr to UserInfo

	control.c
	  - stuff the ip address into a char buffer

	players.c
	  - modified players_handler_launch() and player_new() to pass the
	    IP address to player_new() in addition to the socket fd
	  - player_new() stores IP address in player info structure

	* ggzd/control.c, ggzd/err_func.c, ggzd/err_func.h, ggzd/parse_opt.c:
	Created log_msg function for general log messages

	err_func.c
	  - log_info now gets initialized with some defaults
	  - added log_msg function
	  - default log_level is set to 1

	err_func.h
	  - several defines added for log_level implementation

	control.c
	  - added some examples of using log_msg()
	  - we now retrieve the IP address of connections made to the server

	parse_opt.c
	  - don't overwrite log_level if specified at command prompt

2000-03-11 06:13:21  rgade  <rgade@users.sourceforce.net>

	* ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c:
	Basic logfile handling introduced

	err_func.c
	  - logfile_set_facility() sets the syslogd facility to use
	  - logfile_initialize() opens logfiles or sets up syslog
	  - err_doit() now logs to stderr only if logging not initialized yet
	  - err_doit() is now passed a syslog priority to use

	parse_opt.c
	  - parse the logfile configuration options

	datatypes.h
	  - added a log_info structure to keep things organized

	control.c
	  - calls logfile_initialize() after configuration files parsed

2000-03-10 01:52:07  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/motd.c:
	- Added cputype to message of the day parsing (%C)

	* doc/design.sgml: - Updated to include %C code in MOTD parsing

2000-03-09 20:48:26  bmh  <bmh@users.sourceforce.net>

	* TODO:
	- Some TODO updates (still needs work)

	* game_servers/spades/engine_func.c, game_servers/spades/engine.h, game_servers/spades/engine_main.c, game_servers/spades/socketfunc.c, game_servers/spades/socketfunc.h:
	- Use unix domain socket to communicate with GGZ rather than stdin/stdout
	- Fixed various compiler warnings

	* ggzd/table.c:
	- Changed GGZ to use unix domain sockets for communication with game_server.
	  Socket names take the form of /tmp/<game name>.<process id>
	- Don't close STDIN and STDOUT on forked table

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	- Created es_make_unix_socket() and es_make_unix_socket_or_die()

	* ggzd/chat.c, ggzd/control.c, ggzd/datatypes.h, ggzd/ggzd.h, ggzd/Makefile.am, ggzd/motd.c, ggzd/parse_opt.c, ggzd/players.c, ggzd/seats.c, ggzd/table.c:
	- Split out #define statements into ggzd.h

2000-03-09 04:09:27  rgade  <rgade@users.sourceforce.net>

	* doc/design.sgml: - Added docs for MOTD
	- Fixed a missing </listitem>

2000-03-08 23:10:02  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/ggzd.conf, ggzd/motd.c, ggzd/parse_opt.c:
	- Added AdminName and AdminEmail to ggzd.conf
	- Added %a and %e to MOTD

	* ggzd/datatypes.h, ggzd/motd.c:
	- Removed static variables from motd functions

2000-03-08 02:36:58  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/motd.c:
	- Upped the MOTD to 80 lines, should be enought to make most people happy
	- Addet %p for the port number, please check it to make shure I did it right

2000-03-08 01:40:52  rgade  <rgade@users.sourceforce.net>

	* ggzd/motd.c:
	- Implemented %g (total tables running) and %G (tables waiting for
	  players) codes for MOTD

2000-03-08 00:20:01  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/motd.c:
	- Added version to motd paser

2000-03-08 00:18:50  bmh  <bmh@users.sourceforce.net>

	* doc/design.sgml:
	- Filled in section on GGZ-control/game_server protocol
	- Added MOTD subsystem

2000-03-07 23:59:54  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/motd.c: - More MOTD functionality
	- Added MAX_MOTD_LINES to resolve potential future problems

2000-03-07 23:59:25  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h, /cvsroot/GGZ/easysock/TODO:
	- Added data type ES_FD
	- Fixed up es_*_fd() to fit our coding style
	- Added output debugging and error messages to es_*_fd()

2000-03-07 23:17:28  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h: - Upped maximum MOTD lines to 40

2000-03-07 23:09:06  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/motd.c:
	- Made the MOTD a little longer 40 lines now.

2000-03-07 18:09:27  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c:
	- When printing out debug message in read_string(), use message, not *message.

	* /cvsroot/GGZ/easysock/easysock.c:
	- Replaced references to err_quit() with _err_func().  This allows us to
	  actually like easysock to things...

2000-03-07 06:59:57  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h:
	- Just popped a little warning comment in the motd structure

2000-03-07 06:58:40  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	- Added es_write_fd() and es_read_fd() based on functions by Richard
	  Stevens in Unix Network Programming Vol 1.  These are untested by me.

2000-03-07 06:53:47  rgade  <rgade@users.sourceforce.net>

	* ggzd/motd.c: - motd lines are now sent through motd_parse_motd_line()
	- %h specifier is replaced by hostname

2000-03-07 05:41:06  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/TODO:
	- s/bug/buf.  Stupid typo.  This lets us compile with
	  --enable-debug-socket

2000-03-07 04:59:10  rgade  <rgade@users.sourceforce.net>

	* ggzd/motd.c, ggzd/players.c: motd.c
	  - altered return code of motd_show_motd to return true on failure

	players.c
	  - moved call to motd_show_motd to a more sensible location

	* ggzd/ggzd.conf, ggzd/motd.c, ggzd/motd.h, ggzd/players.c:
	Server now sends out (basic) MOTD file

	motd.c
	  - added motd_send_motd() function

	players.c
	  - calls motd_send_motd() function after sending server ID

	* ggzd/motd.c: - Server now reads in the motd file

2000-03-07 02:44:34  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	- Lots of code cleanups
	- Use es_writen() and es_readn() for everything
	- Make sure all functions (except readn/writen, and *_die()) return 0
	  on success and -1 on failure

2000-03-07 02:27:56  rgade  <rgade@users.sourceforce.net>

	* ggzd/ggzd.conf, ggzd/Makefile.am, ggzd/motd.c, ggzd/motd.h, ggzd/parse_opt.c:
	- Added motd.c, motd.h
	- parse_opt.c calls motd_read_file()

	* ggzd/datatypes.h:
	- Added a structure for message of the day information

2000-03-07 01:55:02  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c:
	- Fixed es_make_socket() so it returns on error instead of trying to
	  continue

	* /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	- Ran code through 'tindent -kr -i8'

2000-03-07 00:05:12  rgade  <rgade@users.sourceforce.net>

	* ggzd/parse_opt.c:
	- Fixed a few logic errors that could cause a segfault later

2000-03-06 01:53:11  rgade  <rgade@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/parse_opt.c:
	- parse and store the motd_file from the configuration file

	* ggzd/ggzd.conf:
	- Removed (Not Implemented) notations where applicable

	* game_servers/spades/spades.dsc, ggzd/control.c, ggzd/parse_opt.c, ggzd/parse_opt.h:
	control.c
	  - setup to call parse_game_files()
	  - if it failed, use the old hardwired code for people who don't have
	    valid conf files
	  - moved code to set default port to parse_opt.c

	parse_opt.h
	  - added prototype for parse_game_files()

	parse_opt.c
	  - set defaults at end of parse_conf_file() for important values, including
	    Port and GameDir
	  - added parse_game_files() - selects game files to add to game_types
	  - parse_game_files() cleans up the add_ignore_list when done
	  - added parse_dselect() - selects filenames ending in ".dsc" for scandir
	  - added parse_game() - opens a game description file and imports values
	    into a GameInfo struct and finally adding it to game_types
	  - reorganized order of functions in module

	spades.dsc
	  - Updated syntax in spades.dsc

2000-03-06 00:34:42  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c:
	- Write timestamp while we still have write lock!

2000-03-05 19:25:49  rgade  <rgade@users.sourceforce.net>

	* game_servers/spades/spades.dsc, game_servers/spades.dsc:
	- Moved spades.dsc file into the spades srcdir proper

2000-03-05 14:26:57  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/players.c:
	- Added a tables.timestamp to joining a table. The table list client side
	- now show the correct number of open seats.

2000-03-04 20:46:14  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/control.c, ggzd/ggzd.conf, ggzd/players.c:
	- When sending the game type list, we now send the num_play_allow as well
	- This is neede by the client so the launch dialog know how many combo
	- items to show.

2000-03-04 17:05:49  bmh  <bmh@users.sourceforce.net>

	* doc/design.sgml, game_servers/spades/engine_func.c, game_servers/spades/engine_main.c, ggzd/datatypes.h, ggzd/Makefile.am, ggzd/players.c, ggzd/seats.c, ggzd/seats.h, ggzd/table.c, TODO:
	- Changed TableInfo structure to only hold information about not seat
	  assignments, not num_players, comp_players, etc.
	- Updated REQ_LAUNCH_GAME and REQ_LIST_TABLES to reflect new table structure
	- Changed the table data passed to game_server for same reason
	- Added seats.[ch] to provide functions seats_num(), seats_open(), etc.
	- #define special seat assignments GGZ_SEAT_OPEN, GGZ_SEAT_COMP,
	  GGZ_SEAT_RESV, and GGZ_SEAT_NONE

2000-03-04 00:49:27  rgade  <rgade@users.sourceforce.net>

	* ggzd/ggzd.conf, ggzd/parse_opt.c:
	- Added initial functionality for AddGame, AddAllGames, and IgnoreGame

2000-03-03 22:13:53  bmh  <bmh@users.sourceforce.net>

	* ggzd/table.c, TODO:
	- Acquire readlock in a couple places
	- Small formatting changes

2000-03-03 05:39:59  rgade  <rgade@users.sourceforce.net>

	* ggzd/parse_opt.c: - Fixed a spurious conf file syntax error

	* game_servers/spades.dsc: - Sample spades.dsc file

	* ggzd/datatypes.h, ggzd/ggzd.conf, ggzd/parse_opt.c:
	- Added some functionality for GameDir parameter
	  (parsed, not acted upon yet)

2000-03-02 22:02:33  bmh  <bmh@users.sourceforce.net>

	* ggzd/control.c, ggzd/players.c:
	- Fixed list_players() and list_types() send correct results even if
	  desired elements are not the first elements (closes bug #102477)

	* ggzd/control.c, ggzd/players.c:
	- Don't initialize player's table_index and uid upon startup
	- Don't need to obtain write lock when initializing types since at that
	  point there is only one thread
	- Initialize player info fields when we find an open spot.  Then we
	  don't need to do it in player_remove()
	- Have player_handler() pass players fd as often as possible to avoid
	  having to look it up.
	- Fixed a few spots that needs to obtain write-lock
	- Don't rely on players.info[].playing.  Do we even need this*?
	- Mark player timestamp when player leaves table at end of game
	- Some formatting changes

	* ggzd/chat.c, ggzd/chat.h:
	- Change chat_add() to accpet a 'name' string as well.  This
	  eliminates another lookup requiring mutex locks
	- Acquire read lock on players before doing chat_mark_all_unread
	  since we need to determine who is online
	- Determine online status by looking at fd, not uid (since we no
	  longer initilaize uid to UID_NONE)

	* ggzd/chat.c, ggzd/control.c, ggzd/players.c, ggzd/table.c, TODO:
	- Renamed global structure from game_tables to tables (concise is
	  good)

	* ggzd/players.c, ggzd/table.c:
	-  Rename functions to match file and opcode names where appropriate

	* ggzd/players.c, ggzd/protocols.h, TODO:
	- Renamed opcodes according to new design spec

	* TODO:
	- Updated TODO list for 0.0.2

	* doc/design.sgml:
	- Renamed a few opcodes to be more consistent
	- Added REQ_TABLE_LEAVE

2000-03-02 06:48:15  rgade  <rgade@users.sourceforce.net>

	* ggzd/control.c, ggzd/ggzd.conf, ggzd/parse_opt.c: control.c
		- If no port specified, default to 1174

	ggzd.conf
		- Sample ggzd.conf

	parse_opt.c
		- Altered parse_conf_file to open a configuration file
		- Added parse_file to drive the configuration file parse
		- Added parse_line to parse individual lines of config file
		- Port=### syntax implemented

2000-03-02 06:04:05  bmh  <bmh@users.sourceforce.net>

	* configure.in:
	- Bumped version to 0.0.2

2000-03-01 05:10:53  bmh  <bmh@users.sourceforce.net>

	* README:
	- Updated README for new package names

	* configure.in:
	- Renamed package to ggz_server (prgram files remain the same)

2000-02-29 21:13:42  bmh  <bmh@users.sourceforce.net>

	* ChangeLog, configure.in, doc/design.sgml, doc/game-modules.txt, doc/Makefile.am, Makefile.am, NEWS, README:
	- Documentation updates for 0.0.1 release

	* HACKING:
	- First go at a HACKING file to describe GGZ coding style

	* game_servers/spades/err_func.c, game_servers/spades/err_func.h, game_servers/spades/Makefile.am:
	- Remove easysock dependent portion since we don't use it here

	* doc/Makefile.am:
	- Fixed up rules so that text and html docs get distributed

	* doc/Makefile.am, game_servers/spades/Makefile.am, ggzd/Makefile.am, Makefile.am:
	- make dist chokes when SUBDIRS is empty, so put SUBDIRS = .

	* AUTHORS, TODO:
	- Documentation updates

	* ggzd/control.c, ggzd/players.c:
	- Don't chdir to / when daemonizing (we still have hardcoded paths)
	- Don't send RSP_GAME header if "message" from game is a closed socket

	* game_servers/spades/engine_func.c, game_servers/spades/engine_main.c, game_servers/spades/err_func.c, game_servers/spades/err_func.h, game_servers/spades/Makefile.am, game_servers/spades/socketfunc.c:
	- Use dbg_msg() rather than fprintf()

	* doc/design.sgml, doc/game-modules.txt, doc/Makefile.am:
	- Documentation updates

Tue Feb 29 18:42:39 2000  bmh  <bmh@users.sourceforce.net>

	* HACKING:
	- First go at a HACKING file to describe GGZ coding style

	* game_servers/spades/Makefile.am, game_servers/spades/err_func.c, game_servers/spades/err_func.h:
	- Remove easysock dependent portion since we don't use it here

	* doc/Makefile.am:
	- Fixed up rules so that text and html docs get distributed

	* Makefile.am, doc/Makefile.am, game_servers/spades/Makefile.am, ggzd/Makefile.am:
	- make dist chokes when SUBDIRS is empty, so put SUBDIRS = .

	* AUTHORS, TODO:
	- Documentation updates

	* ggzd/control.c, ggzd/players.c:
	- Don't chdir to / when daemonizing (we still have hardcoded paths)
	- Don't send RSP_GAME header if "message" from game is a closed socket

	* game_servers/spades/Makefile.am, game_servers/spades/engine_func.c, game_servers/spades/engine_main.c, game_servers/spades/err_func.c, game_servers/spades/err_func.h, game_servers/spades/socketfunc.c:
	- Use dbg_msg() rather than fprintf()

	* doc/Makefile.am, doc/design.sgml, doc/game-modules.txt:
	- Documentation updates

Tue Feb 29 03:24:57 2000  rgade  <rgade@users.sourceforce.net>

	* autogen.sh, configure.in:
	- Fixed a few remaining 'NetGames' instances in configure scripts

Sun Feb 27 07:44:39 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c:
	- Send RSP_CHAT status as a char, not an int.  This fixes the "can't
	  see my own chats" bug which I uncovered when I fixed the "my table list
	  blanks when I receive my chat" bug.  Sheesh.
	- Send MSG_SERVER_FULL as int, not char.  Apparently nobody has tested this
	  functionality yet otherwise it would be a bug.  Anyway, it's fixed now.

	* ggzd/players.c:
	- Oops!  After REQ_CHAT we should respond with a RSP_CHAT, not
	  RSP_TABLE_LIST.  This fixes the "vanishing table list" bug
	- Update player timestamps when they launch or join a table.  This fixes
	  the bug that the player table numbers were not getting updated.

Wed Feb 23 00:25:16 2000  jzaun  <jzaun@users.sourceforce.net>

	* AUTHORS:

	- Updated AUTHORS file.

Mon Feb 21 23:31:10 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/chat.c, ggzd/chat.h, ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/parse_opt.c, ggzd/parse_opt.h, ggzd/players.c, ggzd/players.h, ggzd/protocols.h, ggzd/table.c, ggzd/table.h:
	- Replaced occurances of 'NetGames' with 'GGZ' (ok, so it breaks the
	  freeze, but I figured for our first release the server at least
	  ought to know it's own name!)

	* ggzd/datatypes.h, ggzd/parse_opt.c, ggzd/players.c, ggzd/table.c:
	- First stab at MSG_XXX_UPDATE functionality:
	- Added timestamp member to players, game_types, and game_tables
	  structures.
	- Each player thread send MSG_XXX_UPDATE if timestamp is newer than
	  local copy
	- Update appropriate timestamp when making changes to global lists
	  (table handling needs updating after 0.0.2 re-write)

Sun Feb 20 07:05:23 2000  bmh  <bmh@users.sourceforce.net>

	* TODO:
	- Added reservations to TODO list

	* ggzd/players.c:
	- New function type_match_table() to match game table types including
	  ALL, OPEN, and RES (will need player number for RES...)
	- Fixed up table_list() so that we send tables of interest, not just
	  the first game_tables.count tables regardless of status

	* doc/Makefile.am:
	- Made targets for htmldir, txtdir, and psdir.
	- Made XXX-docs depend on XXXdir
	- Uncommented ps-docs stuff (it works here)

	* doc/design.sgml:
	- Updated interactions to reflect reality
	- Removed title tag from programlisting (docbook complains invalid)

	* ggzd/players.c, ggzd/protocols.h:
	- When handling REQ_JOIN_GAME, return error if table is empty, and
	  only create socketpair if table is valid
	- Redefined some error constants

	* TODO:
	- Specified TODO elements for 0.0.1 and 0.0.2

Sat Feb 19 19:01:00 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/protocols.h:
	- Added MSG_USERS_UPDATE, MSG_TYPES_UPDATE, and MSG_TABLES_UPDATE

	* doc/.cvsignore:
	- Added html, txt, and ps dirs

	* doc/ascii-lynx.dsl:
	- Added ascii-lynx.dsl (we use lynx to create our plaintext)

	* doc/Makefile.am:
	- Made more machine-indpendent.
	- Made general rules for sgml->html,txt,ps

Sat Feb 19 05:23:51 2000  rgade  <rgade@users.sourceforce.net>

	* doc/Makefile.am, doc/design.sgml: Makefile.am
	  - Remove directory html so that the following mv command will work
	    on updates.

	design.sgml
	  - Added tables to sections 2.1/2.2

Fri Feb 18 14:04:12 2000  bmh  <bmh@users.sourceforce.net>

	* doc/Attic/README.Design, doc/images/.cvsignore, doc/images/server_arch.fig:
	- Removed old READEME.Design
	- Added images directory

	* configure.in, Makefile.am:
	- Added doc subdir to build

Thu Feb 17 05:33:52 2000  bmh  <bmh@users.sourceforce.net>

	* doc/.cvsignore, doc/Makefile.am, doc/design.sgml:
	- Added DocBook format design.sgml
	- Begin writing Makefile.am to make docs

Thu Feb 10 17:56:46 2000  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.c:
	- in es_make_socket(), stop trying to connect if gethostbyname() has
	  an error.  (Fixes segfaults when host doesn't exist)

Thu Feb 10 00:43:08 2000  jzaun  <jzaun@users.sourceforce.net>

	* ggzd/control.c:
	- Updated the *hack* for game_types to fill in all the descriptions

Tue Feb  8 13:52:18 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/datatypes.h, ggzd/players.c, ggzd/protocols.h:
	- Implemented supporyt for REQ_GAME and RSP_GAME
	  (removes ugly message passing hack while at a table)
	- New functions player_msg_{to|from}_sized() for passing messages
	  between client and game server
	- Fixed ugly reference return of t_fd (now, it's a pretty reference
	  return)

Mon Feb  7 20:59:12 2000  bmh  <bmh@users.sourceforce.net>

	* /cvsroot/GGZ/easysock/easysock.h:
	- Fixed typo in comment.  es_{write|read}n return -1 on error, not 1

	* ggzd/Makefile.am, ggzd/chat.c, ggzd/chat.h, ggzd/control.c, ggzd/datatypes.h, ggzd/players.c:
	- Added infratructure for chat facility (data types and
	  func. interface)

Sun Feb  6 00:10:32 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/players.c:
	- Fixed player_remove() to reses table index to -1, not 0.
	- Added stub function player_updates() for doing periodic updates

Sat Feb  5 23:05:32 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/control.c, ggzd/players.c, ggzd/players.h, ggzd/table.c, ggzd/table.h:
	- Renamed functions to better reflect filename and purpose
	  (all in the name of clean code)

	* ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/parse_opt.c, ggzd/parse_opt.h, ggzd/players.c, ggzd/protocols.h, ggzd/table.c, ggzd/table.h:
	- Ran code through 'indent -kr -i8'

Sat Jan 29 19:40:11 2000  bmh  <bmh@users.sourceforce.net>

	* ggzd/control.c:
	- Updated path to spades game server (still needs permanenet fix)

Wed Jan 26 16:43:41 2000  bmh  <bmh@users.sourceforce.net>

	* configure.in:
	- Packahe name is ggzd, not ggz

	* doc/README.Design:
	- Created doc dir and put README.Design there

	* configure.in:
	- Moved easysock to beginning of SUBDIRS since other depend on it
	  being compiled

	* .cvsignore, AUTHORS, COPYING, ChangeLog, INSTALL, Makefile.am, NEWS, README, TODO, acconfig.h, autogen.sh, configure.in, game_servers/.cvsignore, game_servers/Makefile.am, game_servers/spades/.cvsignore, game_servers/spades/Makefile.am, game_servers/spades/ai.c, game_servers/spades/card.c, game_servers/spades/card.h, game_servers/spades/engine.h, game_servers/spades/engine_func.c, game_servers/spades/engine_main.c, game_servers/spades/options.h, game_servers/spades/protocols.h, game_servers/spades/socketfunc.c, game_servers/spades/socketfunc.h, ggzd/.cvsignore, ggzd/Makefile.am, ggzd/control.c, ggzd/datatypes.h, ggzd/err_func.c, ggzd/err_func.h, ggzd/ggzd.conf, ggzd/parse_opt.c, ggzd/parse_opt.h, ggzd/players.c, ggzd/players.h, ggzd/protocols.h, ggzd/table.c, ggzd/table.h:
	- Imported files from NetGames project

	* /cvsroot/GGZ/easysock/.cvsignore:
	- Added easysock.lo and libeasysock.la to .cvsignore

	* /cvsroot/GGZ/easysock/.cvsignore, /cvsroot/GGZ/easysock/BUGS, /cvsroot/GGZ/easysock/COPYING, /cvsroot/GGZ/easysock/ChangeLog, /cvsroot/GGZ/easysock/INSTALL, /cvsroot/GGZ/easysock/Makefile.am, /cvsroot/GGZ/easysock/NEWS, /cvsroot/GGZ/easysock/TODO, /cvsroot/GGZ/easysock/acconfig.h, /cvsroot/GGZ/easysock/configure.in, /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	Imported easysock sources

	* /cvsroot/GGZ/easysock/.cvsignore, /cvsroot/GGZ/easysock/BUGS, /cvsroot/GGZ/easysock/COPYING, /cvsroot/GGZ/easysock/ChangeLog, /cvsroot/GGZ/easysock/INSTALL, /cvsroot/GGZ/easysock/Makefile.am, /cvsroot/GGZ/easysock/NEWS, /cvsroot/GGZ/easysock/TODO, /cvsroot/GGZ/easysock/acconfig.h, /cvsroot/GGZ/easysock/configure.in, /cvsroot/GGZ/easysock/easysock.c, /cvsroot/GGZ/easysock/easysock.h:
	Initial revision

	* /cvsroot/GGZ/easysock/AUTHORS, /cvsroot/GGZ/easysock/README, /cvsroot/GGZ/easysock/autogen.sh:
	Imported easysock sources

	* /cvsroot/GGZ/easysock/AUTHORS, /cvsroot/GGZ/easysock/README, /cvsroot/GGZ/easysock/autogen.sh:
	Initial revision

2000-01-21 04:57:17  Brent Hendricks  <brentmh@ece.rice.edu>

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c:
	- Wrote table_list() to handle REQ_TABLE_LIST
	- Renamed game_types() to list_types() due to name clash
	- Renamed opcodes to correct values
	- es_write_str() -> es_write_string()

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/datatypes.h:
	- Added #defines for NG_TYPE_ALL/RES/OPEN

	* /home/brentmh/pub/sp.cvsroot/NetGames/README.Design:
	- Pass total number of seats and open seats with RSP_TABLE_LIST

	* /home/brentmh/pub/sp.cvsroot/NetGames/README.Design:
	- REQ_TABLE_LIST followed by int, not chr.

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/protocols.h, /home/brentmh/pub/sp.cvsroot/NetGames/README.Design:
	- Rename some of the opcodes to include TABLE

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/datatypes.h:
	- Added author, homepage, and version member to GameInfo struct

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c:
	- Wrote user_list() and game_types() to handle REQ_USER_LIST and
	  REQ_GAMES_TYPES respectively

2000-01-20 23:50:52  Brent Hendricks  <brentmh@ece.rice.edu>

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/table.c, /home/brentmh/pub/sp.cvsroot/NetGames/server/datatypes.h, /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c:
	- Replaced occurances of 'slot' with 'seat'

	* /home/brentmh/pub/sp.cvsroot/NetGames/TODO, /home/brentmh/pub/sp.cvsroot/NetGames/README.Design:
	- Better description of table<->control communication
	- Cleanup data structure description

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/callbacks.h, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/interface.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/interface.h:
	- Make connection detail dialog rather than part of connection window

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/client_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_connect.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_connect.h, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_dlg_options.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/callbacks.c:
	- Make detail window rather than part of connect dialog
	- Don't disconnect when done playing

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine.h, /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine_main.c:
	- Handle passing of opcodes REQ/RSP_GAME_LAUNCH, and MSG_GAME_OVER

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/table.c:
	- #include <sys/signals> for kill()
	- #include <protocols.h> since we handle comm. between table and
	  control
	- New function do_table() to handle creation of table process
	- New function game_over() to handle MSG_GAME_OVER from table
	- io_loop() doens't need to return anything, since either way we
	  are going to destroy the table
	- Added some functions descriptions
	- Prepend REQ_GAME_LAUNCH to info sent to table
	- Wait for RSP_GANE_LAUNCH when done
	- Expanded handle_game() to handle requests from table
	- close fd's when not in use

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/protocols.h:
	- Added new opcodes REQ/RSP_CHAT
	- Added new enum types for data between table and control
	- Added opcodes for REQ/RSP_GAME_LAUNCH and MSG_GAME_OVER

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c:
	- Call remove_player() from new_player(), not io_handler()
	- Use es_writen() rather than write() when relaying data
	  between player and game.  Can't use es_readn() because we don't
	  know how much data there is.
	- Close fds and clean up and game is over
	- Initialize table.num_humans when launching a table

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/datatypes.h:
	- Add new member to table info struct: num_humans

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/control.c:
	- Really don't call es_err_func_set() (not MT safe)

	* /home/brentmh/pub/sp.cvsroot/easysock/easysock.h, /home/brentmh/pub/sp.cvsroot/easysock/easysock.c, /home/brentmh/pub/sp.cvsroot/easysock/TODO:
	- Renamed readn() to es_readn()
	- Added prorotypes for es_readn() and es_writen() to easysock.h

	* /home/brentmh/pub/sp.cvsroot/easysock/easysock.c:
	- Added Stevens' readn() function from Unix network programming

2000-01-19 19:55:42  Brent Hendricks  <brentmh@ece.rice.edu>

	* /home/brentmh/pub/sp.cvsroot/easysock/easysock.c:
	- Added es_writen from Stevens book.

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/Makefile.am:
	- Link libeasysock from ($top_builddir)/easysock no ($top_srcdir)/easysock

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/listen.c, /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/Makefile.am:
	- Added options.h to sources list
	- Removed listen.c

	* /home/brentmh/pub/sp.cvsroot/NetGames/NEWS:
	- Update with info about sketch

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/Makefile.am:
	- DOH!  Forgot to add all-cards.xpm to sources list

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/Makefile.am, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/protocols.h:
	- Hopefully fixed protocols.h problem

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/protocols.h:
	- Added protocols.h

	* /home/brentmh/pub/sp.cvsroot/NetGames/configure.in, /home/brentmh/pub/sp.cvsroot/NetGames/server_arch.fig:
	- Require gtk1.2
	- Don't try to create slclient/Makefile
	- Added sketch of server arch

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/control.c, /home/brentmh/pub/sp.cvsroot/NetGames/server/netgamed.conf:
	- Don't hardcode my homedir into path from game server (still
	  need to read path from file though)
	- Added empty netgamed.conf

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/Makefile.am:
	- Removed taunt.h from sources list

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/taunt.h, /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/taunt.c:
	- Removed taunt.*

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/Makefile.am, /home/brentmh/pub/sp.cvsroot/NetGames/README, /home/brentmh/pub/sp.cvsroot/NetGames/README.Design:
	- More docs.
	- Removed taunt.* from spades server sources list

	* /home/brentmh/pub/sp.cvsroot/NetGames/NEWS, /home/brentmh/pub/sp.cvsroot/NetGames/README.Design, /home/brentmh/pub/sp.cvsroot/NetGames/TODO:
	- Wrote some documentation prior to initial release

2000-01-18 23:00:36  Brent Hendricks  <brentmh@ece.rice.edu>

	* /home/brentmh/pub/sp.cvsroot/NetGames/ChangeLog:
	*** empty log message ***

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine_func.c:
	- Fixed so human players don't have to be consecutive

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_menu.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/options.h, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/callbacks.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/client_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_dlg_options.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_dlg_options.h, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_io.c:
	- (sigh) More hacks so that options are not hardcoded.  One of these
	  days I need to write a real client.

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c, /home/brentmh/pub/sp.cvsroot/NetGames/server/table.c, /home/brentmh/pub/sp.cvsroot/NetGames/server/control.c:
	- Cosmetic changes to debug messages

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/.cvsignore:
	- Added .libs

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/table.h, /home/brentmh/pub/sp.cvsroot/NetGames/server/table.c:
	- Remove temporary hardcoded spades hack.  Game specific stuff (path
	  and options) now obtained from GameInfo struct.

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.h, /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c:
	- Detect when game-table is over and stop trying to be mediator
	- Handle operation REQ_JOIN_GAME
	- New function join_table() joins a previously existing game table
	- New function num_comp_play() to count computer players from mask
	- When launching a new game, initialize slot mutex and cond. variable

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/err_func.c:
	- Print [pid]: before messages

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/datatypes.h:
	- #define MAX_PATH_LEN 256 for games that are exec()'d.
	- New #define's for allowable number of players and computer players.
	  These get OR'd together
	- New member path for GamInfo struct
	- New member count for GameTypes struct

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/control.c:
	- Initialize player's uid to NG_UID_NONE, not their fd
	- Temporary hack to put in spades GameInfo.  This should be read from
	  a config file somewhere.
	- Don't bother initializing table pid and slot mutex, as these get
	  overwritten anyway.

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/.cvsignore:
	- Added .libs to .cvsignore

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/.cvsignore, /home/brentmh/pub/sp.cvsroot/NetGames/games/.cvsignore:
	- Added .cvsignore

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine.h:
	- Small hacks in options passing to talk to NetGames server

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_io.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/callbacks.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/client_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_connect.c:
	- Hacks to get client to play multiplayer game with server

2000-01-18 19:14:08  Brent Hendricks  <brentmh@ece.rice.edu>

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine_func.c:
	- Fixed so human players don't have to be consecutive

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_menu.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/options.h, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/callbacks.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/client_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_dlg_options.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_dlg_options.h, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_io.c:
	- (sigh) More hacks so that options are not hardcoded.  One of these
	  days I need to write a real client.

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c, /home/brentmh/pub/sp.cvsroot/NetGames/server/table.c, /home/brentmh/pub/sp.cvsroot/NetGames/server/control.c:
	- Cosmetic changes to debug messages

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/.cvsignore:
	- Added .libs

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/table.h, /home/brentmh/pub/sp.cvsroot/NetGames/server/table.c:
	- Remove temporary hardcoded spades hack.  Game specific stuff (path
	  and options) now obtained from GameInfo struct.

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/players.h, /home/brentmh/pub/sp.cvsroot/NetGames/server/players.c:
	- Detect when game-table is over and stop trying to be mediator
	- Handle operation REQ_JOIN_GAME
	- New function join_table() joins a previously existing game table
	- New function num_comp_play() to count computer players from mask
	- When launching a new game, initialize slot mutex and cond. variable

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/err_func.c:
	- Print [pid]: before messages

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/datatypes.h:
	- #define MAX_PATH_LEN 256 for games that are exec()'d.
	- New #define's for allowable number of players and computer players.
	  These get OR'd together
	- New member path for GamInfo struct
	- New member count for GameTypes struct

	* /home/brentmh/pub/sp.cvsroot/NetGames/server/control.c:
	- Initialize player's uid to NG_UID_NONE, not their fd
	- Temporary hack to put in spades GameInfo.  This should be read from
	  a config file somewhere.
	- Don't bother initializing table pid and slot mutex, as these get
	  overwritten anyway.

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/.cvsignore:
	- Added .libs to .cvsignore

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/.cvsignore, /home/brentmh/pub/sp.cvsroot/NetGames/games/.cvsignore:
	- Added .cvsignore

	* /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/games/spades/engine.h:
	- Small hacks in options passing to talk to NetGames server

	* /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_io.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/callbacks.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/client_func.c, /home/brentmh/pub/sp.cvsroot/NetGames/gtkclient/gtk_connect.c:
	- Hacks to get client to play multiplayer game with server

2000-01-14 04:06:01  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/README.Design:
	- Added MSG_SERVER_FULL to description of C/S interactions

	* /usr/local/cvsroot/brentmh/NetGames/games/spades/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine_func.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine_main.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/listen.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/taunt.c:
	- Lots of hacks so we can use as a Netgames server.  This will get
	  mostly rewritten when the time comes, I just need *something* now.

	* /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_play.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_play.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_taunt.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/interface.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/interface.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/callbacks.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_func.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/display.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_connect.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_connect.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_exit.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_options.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_options.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_stat.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_stat.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/callbacks.c:
	- <sigh>  Lots of dirty hacks to get the spades client to work with
	  the new Netgames protocol.  This will all go away when I *really*
	  start writing a client in earnest.  Now I just need something to
	  test the server

	* /usr/local/cvsroot/brentmh/NetGames/server/.cvsignore:
	- Added .libs

	* /usr/local/cvsroot/brentmh/NetGames/server/control.c, /usr/local/cvsroot/brentmh/NetGames/server/datatypes.h, /usr/local/cvsroot/brentmh/NetGames/server/parse_opt.c, /usr/local/cvsroot/brentmh/NetGames/server/players.c, /usr/local/cvsroot/brentmh/NetGames/server/table.c:
	- Removed rest of references to taunt port
	- Added condition variable and accompanying mutex for number of open
	  slots in each game (we wait until 0 open slots to fork table process)
	- Add num_reserves element to table struct
	- Add 1 to fd_max before using select (DOH!)
	- A few temporary hacks so we can play spades :)
	- New function pass_options() for liason thread to pass options to game

2000-01-12 07:21:13  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/server/players.c, /usr/local/cvsroot/brentmh/NetGames/server/players.h:
	- Set thread ID for all player-handling threads
	- Use select() in io_handler() since we now handle fd from the table
	  (In fact the thread acts as a go between for player and table)
	- Don't pass p_index as referemce to handle_player(), we can get
	  t_index from user structure
	- Use mutexes when updating player data upon login
	- Count computer players when calculating open slots
	- Create socketpait so the game tabel can communicate with the player
	- If new game launches successfully, put t_index in user structure
	- Some function renaming

	* /usr/local/cvsroot/brentmh/NetGames/server/control.c:
	- First go at in init_data() routine
	- Call basic daemon_init() to background self, close fd's, etc
	- Don't set es_err_func (not MT safe)
	- Remove references to taunt server/socket (handled by main sock now)

	* /usr/local/cvsroot/brentmh/NetGames/server/protocols.h:
	- New exchanmge REQ/RSP_USER_LIST to send list of logged in users

	* /usr/local/cvsroot/brentmh/NetGames/server/table.c, /usr/local/cvsroot/brentmh/NetGames/server/table.h:
	- Major work done:
	- launch_table() created the new thread to manage the table
	- new_table() is the thread init function, updating structures,
	  then forking off game table child process.
	- Parent calls io_loop() to talk to child through socketpair
	- Child calls run_game() which dup's fds onto 0 and 1 and then
	  exec's the game
	- remove_table() deletes structure from list when game is over

	* /usr/local/cvsroot/brentmh/NetGames/server/datatypes.h:
	- Added member to table type for player fds
	- Added thread_t member to user struct
	- Incorporated mutexes into data structures
	- Renamed datatypes

2000-01-11 13:42:20  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/gtkclient/.cvsignore:
	- Added .cvsignore

	* /usr/local/cvsroot/brentmh/NetGames/gtkclient/callbacks.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/callbacks.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/interface.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/interface.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/support.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/support.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/Makefile.am:
	- Added in glade-generated files for new interface

2000-01-10 19:34:35  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/games/spades/card.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/card.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine_func.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine_main.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/listen.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/options.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/socketfunc.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/socketfunc.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/taunt.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/taunt.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/games/spades/ai.c:
	- Brought over spadesd src for temporary game hack

	* /usr/local/cvsroot/brentmh/NetGames/games/Makefile.am:
	- New dir to house game modules

	* /usr/local/cvsroot/brentmh/NetGames/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/acconfig.h, /usr/local/cvsroot/brentmh/NetGames/configure.in:
	- Uncommented client and gtk-client references in configure.in
	- Added check for pthread lib in configure.in
	- Added #define _XOPEN_SOURCE 500 to for read-write locks
	- Added #define _REENTRANT for thread-dafe code

	* /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtkspinbutton.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtkspinbutton.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/options.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/socketfunc.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/socketfunc.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_connect.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_connect.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_about.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_about.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_disconnect.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_disconnect.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_error.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_error.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_exit.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_exit.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_options.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_options.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_stat.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_stat.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_menu.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_menu.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_play.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_play.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_taunt.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_taunt.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/card.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/card.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_func.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/display.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/gtkclient/all-cards.xpm:
	- Brought over client src from NetSpades for temporary client-hack
	  (Will be rewritten from scratch later)

	* /usr/local/cvsroot/brentmh/NetGames/server/table.c, /usr/local/cvsroot/brentmh/NetGames/server/table.h:
	- New files for setting up handling io with game tables

	* /usr/local/cvsroot/brentmh/NetGames/server/control.c, /usr/local/cvsroot/brentmh/NetGames/server/datatypes.h, /usr/local/cvsroot/brentmh/NetGames/server/players.c, /usr/local/cvsroot/brentmh/NetGames/server/players.h, /usr/local/cvsroot/brentmh/NetGames/server/protocols.h:
	- Reworked for threads
	- Rewrote get_game_launch()
	- Filled in login_anon()
	- Generalize handler so that thread can handle game io
	- Some temporary #define's

	* /usr/local/cvsroot/brentmh/NetGames/server/Makefile.am:
	- Added files table.h, table.c

2000-01-10 19:34:35  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/games/spades/card.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/card.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine_func.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/engine_main.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/listen.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/options.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/socketfunc.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/socketfunc.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/taunt.c, /usr/local/cvsroot/brentmh/NetGames/games/spades/taunt.h, /usr/local/cvsroot/brentmh/NetGames/games/spades/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/games/spades/ai.c:
	- Brought over spadesd src for temporary game hack

	* /usr/local/cvsroot/brentmh/NetGames/games/Makefile.am:
	- New dir to house game modules

	* /usr/local/cvsroot/brentmh/NetGames/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/acconfig.h, /usr/local/cvsroot/brentmh/NetGames/configure.in:
	- Uncommented client and gtk-client references in configure.in
	- Added check for pthread lib in configure.in
	- Added #define _XOPEN_SOURCE 500 to for read-write locks
	- Added #define _REENTRANT for thread-dafe code

	* /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtkspinbutton.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtkspinbutton.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/options.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/socketfunc.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/socketfunc.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_connect.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_connect.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_about.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_about.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_disconnect.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_disconnect.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_error.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_error.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_exit.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_exit.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_options.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_options.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_stat.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_dlg_stat.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_io.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_menu.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_menu.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_play.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_play.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_taunt.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/gtk_taunt.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/card.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/card.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_func.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/client_main.c, /usr/local/cvsroot/brentmh/NetGames/gtkclient/display.h, /usr/local/cvsroot/brentmh/NetGames/gtkclient/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/gtkclient/all-cards.xpm:
	- Brought over client src from NetSpades for temporary client-hack
	  (Will be rewritten from scratch later)

	* /usr/local/cvsroot/brentmh/NetGames/server/table.c, /usr/local/cvsroot/brentmh/NetGames/server/table.h:
	- New files for setting up handling io with game tables

	* /usr/local/cvsroot/brentmh/NetGames/server/control.c, /usr/local/cvsroot/brentmh/NetGames/server/datatypes.h, /usr/local/cvsroot/brentmh/NetGames/server/players.c, /usr/local/cvsroot/brentmh/NetGames/server/players.h, /usr/local/cvsroot/brentmh/NetGames/server/protocols.h:
	- Reworked for threads
	- Rewrote get_game_launch()
	- Filled in login_anon()
	- Generalize handler so that thread can handle game io
	- Some temporary #define's

	* /usr/local/cvsroot/brentmh/NetGames/server/Makefile.am:
	- Added files table.h, table.c

2000-01-07 18:37:06  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/server/Makefile.am:
	- Temporary hack to link with -lpthread

	* /usr/local/cvsroot/brentmh/NetGames/server/control.c, /usr/local/cvsroot/brentmh/NetGames/server/players.c, /usr/local/cvsroot/brentmh/NetGames/server/players.h:
	- Don't use select() since we;re relying on shared mem rather than
	  communication via pipes
	- Get rid of fd_set stuff
	- Rename game_prop to game_types and games to game_tables
	- Include "daemonize" stuff unless DEBUG is defined
	- Use for() instead of while() for main loop
	- Ignore EINTR on call to accept()
	- Call launch_handler() to start new process/thread to handle incoming
	  connection
	- New function launch_handler() creates new thread for incoming conn.
	- Add some basic functions for communication with users (needs work)

	* /usr/local/cvsroot/brentmh/NetGames/server/err_func.h, /usr/local/cvsroot/brentmh/NetGames/server/err_func.c:
	- Update to new easysock naming scheme

2000-01-07 18:35:47  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/easysock.c:
	- Set SO_REUSEADDR option when creating server socket

2000-01-06 05:21:54  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/README.Design:
	- Added header

1999-12-10 07:21:46  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h:

	- Cleaned up header file to better document interface
	- Rename enum types to remove undescores and capitalize words
	- Preface enum values with ES to avoid namespace problems
	- Internal function _debug() outputs debug string if DEBUG_SOCKET defined

	* /usr/local/cvsroot/brentmh/NetGames/server/control.c:
	- Pass NULL as seconf two arguments of accept()

1999-10-30 18:53:36  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/easysock.c:
	- Small cleanup

	* /usr/local/cvsroot/brentmh/NetGames/.cvsignore:
	- Modified .cvsignores

	* /usr/local/cvsroot/brentmh/NetGames/server/.cvsignore:
	- Added .cvsignore

	* /usr/local/cvsroot/brentmh/NetGames/gtkclient/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/gtkclient/main.c:
	- Added empty files

	* /usr/local/cvsroot/brentmh/NetGames/man/Makefile.am:
	- Initial file

	* /usr/local/cvsroot/brentmh/easysock/ChangeLog:
	*** empty log message ***

	* /usr/local/cvsroot/brentmh/NetGames/.cvsignore, /usr/local/cvsroot/brentmh/NetGames/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/acconfig.h, /usr/local/cvsroot/brentmh/NetGames/configure.in:
	- Fixed some compilation issues
	- Added SYSCONFDIR to acconfig.h
	- Added test for libpopt

	* /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h:
	- Added variable argument es_va_write_string()
	- Made es_xxx_func_rem() return the old function
	- Added make_socket_or_die()
	- Call err_func with strerror(errno)

	* /usr/local/cvsroot/brentmh/NetGames/server/players.c, /usr/local/cvsroot/brentmh/NetGames/server/players.h, /usr/local/cvsroot/brentmh/NetGames/server/protocols.h, /usr/local/cvsroot/brentmh/NetGames/server/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/server/control.c, /usr/local/cvsroot/brentmh/NetGames/server/datatypes.h, /usr/local/cvsroot/brentmh/NetGames/server/err_func.c, /usr/local/cvsroot/brentmh/NetGames/server/err_func.h, /usr/local/cvsroot/brentmh/NetGames/server/parse_opt.c, /usr/local/cvsroot/brentmh/NetGames/server/parse_opt.h:
	- Added headers for datatypes/enums of protocols
	- Added code for main select() loop in control
	- Added cmd-line parser and stub for conf-file parser
	- Added error functions a la Stevens APUE
	- Added basic player handler
	- Added stub handlers for login/logout
	- Added handler for new logins
	- Fixed a couple compilation issues

	* /usr/local/cvsroot/brentmh/NetGames/README.Design:
	- Several strucutral modifications
	- Focus solely on server/protocol design
	- Filled in a few sections

1999-10-12 04:54:05  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/NetGames/.cvsignore:
	- Added .cvsignore

	* /usr/local/cvsroot/brentmh/NetGames/server/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/server/control.c, /usr/local/cvsroot/brentmh/NetGames/AUTHORS, /usr/local/cvsroot/brentmh/NetGames/BUGS, /usr/local/cvsroot/brentmh/NetGames/COPYING, /usr/local/cvsroot/brentmh/NetGames/ChangeLog, /usr/local/cvsroot/brentmh/NetGames/INSTALL, /usr/local/cvsroot/brentmh/NetGames/Makefile.am, /usr/local/cvsroot/brentmh/NetGames/NEWS, /usr/local/cvsroot/brentmh/NetGames/README, /usr/local/cvsroot/brentmh/NetGames/README.Design, /usr/local/cvsroot/brentmh/NetGames/acconfig.h, /usr/local/cvsroot/brentmh/NetGames/autogen.sh, /usr/local/cvsroot/brentmh/NetGames/configure.in:
	- Added files (mostly stubs)

1999-09-19 05:22:51  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/configure.in, /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h:
	- Fleshed out stub functions
	- Added calls to (*_err_func) and (*_exit_func)

1999-09-18 04:37:44  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h, /usr/local/cvsroot/brentmh/easysock/ChangeLog:
	*** empty log message ***

	* /usr/local/cvsroot/brentmh/easysock/easysock.c:
	- Fixed referencees to write_int and read_int

	* /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h:
	*** empty log message ***

	* /usr/local/cvsroot/brentmh/easysock/easysock.c:
	- Prepended all functions with es_ to avoid namespace pollution
	- Added *_or_die function stubs
	- Added function stubs for handling exit and error functions

1999-09-12 03:18:30  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/ChangeLog, /usr/local/cvsroot/brentmh/easysock/Makefile.am, /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h:
	- Fixed up automake stuff
	- Changed occurances of int8_t to char since other platforms
	  don't all have int8_t defined
	- Renamed x_byte to x_char

1999-09-11 06:05:53  Brent M. Hendricks  <brentmh@ece.rice.edu>

	* /usr/local/cvsroot/brentmh/easysock/BUGS, /usr/local/cvsroot/brentmh/easysock/TODO, /usr/local/cvsroot/brentmh/easysock/.cvsignore, /usr/local/cvsroot/brentmh/easysock/AUTHORS, /usr/local/cvsroot/brentmh/easysock/ChangeLog, /usr/local/cvsroot/brentmh/easysock/Makefile.am, /usr/local/cvsroot/brentmh/easysock/NEWS, /usr/local/cvsroot/brentmh/easysock/README, /usr/local/cvsroot/brentmh/easysock/acconfig.h, /usr/local/cvsroot/brentmh/easysock/autogen.sh, /usr/local/cvsroot/brentmh/easysock/configure.in, /usr/local/cvsroot/brentmh/easysock/easysock.c, /usr/local/cvsroot/brentmh/easysock/easysock.h:
	- Added files to repository

