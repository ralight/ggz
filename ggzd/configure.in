dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_CONFIG_SUBDIRS( easysock )
AM_INIT_AUTOMAKE(ggz_server, 0.0.3)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

dnl Check for standard build environment
dnl ====================================
AC_PROG_CC
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_CPP
AM_PROG_CC_STDC
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET


dnl Compiling Options
dnl =====================
AC_ARG_ENABLE(server, [  --disable-server        Don't build ggzd server],, enable_server=yes)
AC_ARG_ENABLE(games,  [  --disable-games         Don't build ggzd games],, enable_games=yes)
AC_ARG_ENABLE(debug,  [  --disable-debug         Turn off debugging (on by default)],, enable_debug=yes)
AC_ARG_ENABLE(debug-gdb,    [  --enable-debug-gdb      enable GDB debugging ],,enable_debug_gdb=no)
AC_ARG_ENABLE(debug-mem,    [  --enable-debug-mem      enable mem debugging ],,enable_debug_mem=no)
AC_ARG_ENABLE(debug-socket, [  --enable-debug-socket   enable socket debugging ],, enable_debug_socket=no)
AC_ARG_WITH(tmpdir,         [  --with-tmpdir=PATH      directory for temporary files [default=/tmp/ggzd]], tmpdir=$withval, tmpdir="/tmp/ggzd")
AC_ARG_WITH(database,       [  --with-database=DB      type of database to use: db2], database=$withval, database=db2)


dnl Check for header files
dnl ======================
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(sys/time.h unistd.h)


dnl Check for typedefs, structures, and compiler characteristics
dnl ============================================================
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_HEADER_TIME


dnl Check for library functions
dnl ===========================
AC_CHECK_FUNC(select)
AC_CHECK_FUNC(socket, ,
    AC_CHECK_LIB(socket, socket,
	AC_CHECK_HEADER(sys/socket.h, LDADD="-lsocket",
	    AC_MSG_ERROR(*** Cannot find socket headers ); exit ),
	AC_MSG_ERROR(*** Cannot find socket library ); exit ))

AC_CHECK_FUNC(gethostbyname, ,
    AC_CHECK_LIB(nsl, gethostbyname, LDADD="$LDADD -lnsl",
	AC_MSG_ERROR(*** Cannot find nsl library ); exit ))

AC_CHECK_FUNC(inet_ntoa, ,
    AC_CHECK_LIB(nsl, inet_ntoa, LDADD="$LDADD -lnsl",
	AC_MSG_ERROR(*** Cannot find nsl library ); exit ))

AC_CHECK_LIB(popt, poptGetNextOpt,
    AC_CHECK_HEADER(popt.h, ggzd_LIBS="$ggzd_LIBS -lpopt",
        AC_MSG_ERROR(*** Cannot find popt.h header); exit),
    AC_MSG_ERROR(*** Cannot find popt library ); exit)
    
AC_CHECK_LIB(pthread, pthread_create,
    AC_CHECK_HEADER(pthread.h, ggzd_LIBS="$ggzd_LIBS -lpthread" 
         CFLAGS="$CFLAGS -D_REENTRANT"
         AC_DEFINE(_XOPEN_SOURCE, 500),
         AC_MSG_ERROR(*** Cannot find pthread.h header); exit),
    AC_MSG_ERROR(*** Cannot find pthread library ); exit)

AC_CHECK_FUNC(strsep,
    AC_DEFINE(_BSD_SOURCE),
    AC_MSG_ERROR(*** Cannot find strsep function); exit )


dnl Check database libs
dnl ===================
if test "$database" = mysql; then
   dnl test for mySQL database
   AC_MSG_WARN(*** MySQL not supprted yet, defaulting to libdb2)
elif test "$database" = db3; then
    db3_style=-1
    AC_CHECK_LIB(db, db_env_create,
        AC_CHECK_HEADER(db.h, db3_style=0,
            AC_MSG_ERROR(*** Cannot find db.h header); exit),
        AC_MSG_WARN(*** Cannot find db library, trying -ldb3 ))
     if test "$db3_style" = -1; then
         AC_CHECK_LIB(db3, db_env_create,
             AC_CHECK_HEADER(db3/db.h, db3_style=1,
                 AC_MSG_ERROR(*** Cannot find db3/db.h header); exit),
             AC_MSG_ERROR(*** Cannot find db3 library ); exit)
     fi
 
     if test "$db3_style" = 0; then
         ggzd_LIBS="$ggzd_LIBS -ldb"
     else
         ggzd_LIBS="$ggzd_LIBS -ldb3"
         AC_DEFINE(DB3_IN_DIR)
     fi
else 
    database=db2
    db2_style=-1
    AC_CHECK_LIB(db, db_appinit,
        AC_CHECK_HEADER(db.h, db2_style=0,
            AC_MSG_ERROR(*** Cannot find db.h header); exit),
        AC_MSG_WARN(*** Cannot find db library, trying -ldb2 ))
     if test "$db2_style" = -1; then
         AC_CHECK_LIB(db2, db_appinit,
             AC_CHECK_HEADER(db2/db.h, db2_style=1,
                 AC_MSG_ERROR(*** Cannot find db2/db.h header); exit),
             AC_MSG_ERROR(*** Cannot find db2 library ); exit)
     fi
 
     if test "$db2_style" = 0; then
         ggzd_LIBS="$ggzd_LIBS -ldb"
     else
         ggzd_LIBS="$ggzd_LIBS -ldb2"
         AC_DEFINE(DB2_IN_DIR)
     fi
fi


dnl Use -Wall if we have gcc.
dnl ========================
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl


dnl Debug modes
dnl ===========
if test "$enable_debug" = yes; then
    AC_DEFINE(DEBUG)
    DFLAGS="DEBUG"
fi

if test "$enable_debug_socket" = yes; then
    AC_DEFINE(DEBUG_SOCKET)
    DFLAGS="$DFLAGS DEBUG_SOCKET"
fi

if test "$enable_debug_mem" = yes; then
    AC_DEFINE(DEBUG_MEM)
    DFLAGS="$DFLAGS DEBUG_MEM"
    LDADD="$LDADD -ldmalloc"
fi

if test "$enable_debug_gdb" = yes; then
    CFLAGS="$CFLAGS -ggdb"
fi


dnl Various dirs
dnl ============

if test "x${sysconfdir}" = 'x${prefix}/etc'; then
  if test "x${prefix}" = "xNONE"; then
    ggzdconfdir="${ac_default_prefix}/etc/ggzd"
  else
    ggzdconfdir="${prefix}/etc/ggzd"
  fi
else
  ggzdconfdir="${sysconfdir}/ggzd"
fi
AC_DEFINE_UNQUOTED(GGZDCONFDIR, "${ggzdconfdir}")
ggzdroomdir="${ggzdconfdir}/rooms"
ggzdgamedir="${ggzdconfdir}/games"


if test "x${libdir}" = 'x${exec_prefix}/lib'; then
  if test "x${exec_prefix}" = "xNONE"; then
    if test "x${prefix}" = "xNONE"; then
      ggzdexecmoddir="${ac_default_prefix}/lib/ggzd"
    else
      ggzdexecmoddir="${prefix}/lib/ggzd"
    fi
  else
    ggzdexecmoddir="${exec_prefix}/lib/ggzd"
  fi
else
  ggzdexecmoddir="${libdir}/ggzd"
fi
AC_DEFINE_UNQUOTED(GAMEDIR, "${ggzdexecmoddir}")

if test "x${localstatedir}" = 'x${prefix}/var'; then
  if test "x${prefix}" = "xNONE"; then
    ggzdstatedir="${ac_default_prefix}/var/ggzd"
  else
    ggzdstatedir="${prefix}/var/ggzd"
  fi
else
  ggzdstatedir="${localstatedir}/ggzd"
fi
AC_DEFINE_UNQUOTED(DATADIR, "${ggzdstatedir}")

AC_DEFINE_UNQUOTED(TMPDIR, "${tmpdir}")

packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")


dnl Which progs to compile
dnl ======================

SUBDIRS="easysock"

if test "$enable_server" = yes; then
    SUBDIRS="$SUBDIRS ggzd"
fi

if test "$enable_games" = yes; then
    SUBDIRS="$SUBDIRS game_servers"
fi


AC_SUBST(LDADD)
AC_SUBST(ggzd_LIBS)
AC_SUBST(SUBDIRS)
AC_SUBST(ggzdconfdir)
AC_SUBST(ggzdroomdir)
AC_SUBST(ggzdgamedir)
AC_SUBST(ggzdexecmoddir)
AC_SUBST(ggzdstatedir)
AC_SUBST(packagesrcdir)
AC_SUBST(database)

AC_OUTPUT([Makefile 
           ggzd/Makefile 
	   ggzd/ggzd.conf
	   ggzd/ggzd.test
	   doc/Makefile
	   doc/C/Makefile
	   doc/C/design/Makefile
	   game_servers/Makefile
	   game_servers/spades/Makefile
	   game_servers/tictactoe/Makefile
	   game_servers/dots/Makefile
	   game_servers/lapocha/Makefile
	   game_servers/reversi/Makefile
	   game_servers/combat/Makefile
	   ])


dnl Status Output
dnl =============
echo "*** GGZD will be built with the following debugging flags: $DFLAGS"
echo "***"
echo "*** To compile and install server:"
echo "***"
echo "***'make install'"
echo "***"
echo "*** To compile and test server locally without installing:"
echo "***"
echo "*** 'make test; cd ggzd; ./ggzd -f ggzd.test'"
echo ""



