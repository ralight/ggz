<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [ 
<!ENTITY protonum "0">
]>
 
<book id="index">
  <bookinfo>
    <title>Gnu Gaming Zone Design Specification</title>
    <authorgroup>
      <author>
        <firstname>Brent</firstname>
        <surname>Hendricks</surname>
        <affiliation>
          <address>
            <email>bmh@users.sourceforge.net</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>1999, 2000</year>
      <holder>Brent Hendricks</holder>
    </copyright>
    <revhistory>
      <revision>
	<revnumber>$Revision: 525 $</revnumber>
	<date>$Date: 2000-05-15 19:50:13 -0700 (Mon, 15 May 2000) $</date>
      </revision>
    </revhistory>
    <abstract>
      <para>
        Design specification for the Gnu Gaming Zone.  This document
        covers the internal server architecture and the client/server
        communication protocols.
      </para>
    </abstract>
  </bookinfo>

  <preface id="preface">
    <title>Introduction</title>
    <para>
      At some point during the devlopment of
      <application moreinfo="refentry">NetSpades</application>, I
      realized that a major rewrite was in order.  I wasn't happy with
      the client/server interactions, and I wanted to add some
      features which just wouldn't work within the current
      infrstructure.  So I began to formulate grandiose plans for
      <application>NetSpades v5</application>, but continued to work
      on the 4.X series.  A little later, I began to contemplate
      adding the ability to play Hearts as well as Spades.  But why
      stop there?  Why not develop a general framework for playing
      networked games?  And so my plans have developed into what I
      called <application>NetGames</application>.
    </para>
    <para>
      Just before I was going to announce my new project on
      <ulink url="http://www.sourceforge.net">SourceForge</ulink>, I
      happened across Rich's announcement and plans for an online
      gaming system.  It was to be in the same vein as Microsoft's
      Internet Gaming Zone, so he named it the <application>Gnu Gaming
      Zone</application>(<abbrev>GGZ</abbrev>).  His goals and plans
      were so similar to mine that I suggested we merge projects and
      collaborate.  He readily agreed, and the GGZ was born.
    </para>
  </preface>
  
  <chapter id="requirements"><title>Design Requirements</title>
    <para>
      There are many planned features for GGZ.  Some will take longer
      than others to implement.  Some may be discarded at a later
      date.  Planned features include (but are not limited to):
    </para>
    <itemizedlist>
      <listitem>
        <para>Password-based user accounts</para>
      </listitem>
      <listitem>
        <para>Persistent user statistics</para>
      </listitem>
      <listitem>
        <para>Ability to leave and then rejoin game</para>
      </listitem>
      <listitem>
        <para>Ability to reserve games for specific users</para>
      </listitem>
      <listitem>
        <para>Dynamic run-time configuration of server</para>
      </listitem>
      <listitem>
        <para>
          Ability to add/remove game types from server without
          having to recompile
        </para>
      </listitem>
      <listitem>
        <para>
          Capability for users to chat without resorting to second
          port/socket
        </para>
      </listitem>
      <listitem>
        <para>
          Basic infrastructure from game developers to write network games
          without having to worry about connections/login/user
          accounts/etc.
        </para>
      </listitem>
      <listitem>
        <para>
          Multiple "rooms" in which to play games.  These rooms may
          reside on different servers, transparent to the user.
        </para>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter id="client-server-comm"><title>Client-Server Communications</title>
    <para>
      The client and GGZ server will communicate via the protocol
      described here.  Individual games will of course communicate via
      their own protocol.  These messages must be embedded within the
      GGZ message type REQ_GAME or RSP_GAME.  It is recommended that
      game developers use a message passing scheme similar to the one
      described here for consistency.
    </para>

    <section id="opcodes"><title>Interactions</title>
      <para>
	Three types of data are exchanged between the client and the server:
	<itemizedlist>
	  <listitem>
	    <para>chr: a 1-byte signed char</para>
	  </listitem>
	  <listitem>
	    <para>int: a 4-byte signed integer in network byte order</para>
	  </listitem>
	  <listitem>
	    <para>
	      str: a multibyte null-terminated string preceeded by
	      its length (including null-termination) as an integer.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	Interactions take one of three forms: server messages, client
	requests, and server responses.  Each interaction is prefaced
	by a header indentifying it (some interactions consist solely
	of the header).  The header (stored as an enumerated value) is
	sent as an int.
      </para>
      
      <section id="server-messages"><title>Server Messages</title>

	<para>
	  These messages are received from the server without being
	  directly requested by the client.  They are used by the
	  server to pass necessary information to the client.
	</para>
	<programlisting role="pseudocode">
	  MSG_SERVER_ID

	  MSG_SERVER_FULL

	  MSG_MOTD

	  MSG_CHAT

	  MSG_UPDATE_ROOMS

	  MSG_UPDATE_PLAYERS

	  MSG_UPDATE_TYPES

	  MSG_UPDATE_TABLES
	</programlisting>
      </section>

      <section id="player-management"><title>Player Management</title>
	<para>
	  These are client requests and the corresponding server
	  responses related to managing player sessions and data.
	</para>
	
	<programlisting role="pseudocode">
      
	  REQ_LOGIN_NEW

	  RSP_LOGIN_NEW

	  REQ_LOGIN

	  RSP_LOGIN

	  REQ_LOGIN_ANON

	  RSP_LOGIN_ANON

	  REQ_LOGOUT

	  RSP_LOGOUT

	</programlisting>
      </section>

      <section id="info-request"><title>Information request</title>
	<para>
	  These are client requests for information and the
	  corresponding server responses.
	</para>
	
	<programlisting role="pseudocode">
      
	  REQ_LIST_PLAYERS

	  RSP_LIST_PLAYERS

	  REQ_LIST_TYPES

	  REQ_LIST_TABLES

	  RSP_LIST_TABLES

	  REQ_LIST_ROOMS

	  RSP_LIST_ROOMS

	  REQ_MOTD

	  RSP_MOTD
	  
	</programlisting>
      </section>
      
      <section id="table-management"><title>Table Management</title>
	<para>
	  These are client requests related to game tables and the
	  corresponding server responses.
	</para>
	
	<programlisting role="pseudocode">
	  REQ_TABLE_LAUNCH
            int: game type index
	    str: table description
	    int: number of seats
	    sequence of
	       int: seat assignment (-1 for OPEN, -2 for COMP, -3 RESV )
	       str: name for reservation (if status = RESV)
	    int: size of options in bytes (possibly 0)
            (game options)
          RSP_TABLE_LAUNCH
  
	  REQ_TABLE_JOIN
            int: table index
	  RSP_TABLE_JOIN

          REQ_TABLE_LEAVE

	  RSP_TABLE_LEAVE
	    
      </programlisting>
    </section>

      <section id="chat"><title>Chat Facility</title>
      <para>
	Similar to the "Taunt" feature provided with NetSpades, the
	GGZ server will provide the ability to send messages to other
	players via the server.   The following interaction describes
	how the client sends a chat message to the server.  Chats are
	sent to the client with the MSG_CHAT opcode described above.
      </para>

      <programlisting role="pseudocode">
        REQ_CHAT
	  chr: sub-opcode
	  one or more of the following fields
	    str: player_name
            str: chat_string
        RSP_CHAT

	</programlisting>

	<para>
	  Sub-opcodes for chat messages are as follows:
	  <itemizedlist>
	    <listitem>
	      <para>
		GGZ_CHAT_NORMAL - typical chat message to all in room
		(include field: chat_string)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		GGZ_CHAT_BEEP - send a beep to another player's console
		(include field: player_name)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		GGZ_CHAT_PERSONAL - typical chat message directed to a single
		player (include fields: player_name, chat_string)
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>

      <section id="rooms"><title>Room Facility</title>
        <para>
	  The server supports the ability to have separate rooms for
	  individual game types.  Chatting in a room is only heard
	  by members of that room.
        </para>

        <programlisting role="pseudocode">
	  REQ_ROOM_JOIN

	  RSP_ROOM_JOIN
  
	</programlisting>
      </section>

      <section id="game-messages"><title>Game Interactions</title>
	<para>
	  In order to allow the GGZ server to identify chat and other
	  control messages during the course of a game, it is
	  necessary that interactions with a game being played have an
	  identifiable header.  This header will be stripped off
	  before the rest of the data is sent to the game itself.
	  Similarly, any messages from the game to the client will
	  have a header prepended.
	  
	  Messages from the client take the following form:

	  <programlisting role="pseudocode">
	    REQ_GAME
	  </programlisting>

	  Similarly, messages from the server appear as:
	  <programlisting role="pseudocode">
	    RSP_GAME
	  </programlisting>
	</para>
      </section>
    </section>
  </chapter>

  <chapter id="design"><title>Design Overview</title>

    <para>
      There are three parts which comprise the server side:
      <itemizedlist>
        <listitem>
          <para>Main GGZ server (called GGZ-control)</para>
        </listitem>
        <listitem>
          <para>Individual game servers</para>
        </listitem>
        <listitem>
          <para>Run-time config utility program</para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      We will discuss each of these in turn, but first we'll look at
      the overall architecture.
      <figure>
	<title>Server Architecture</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/server_arch.eps" format="eps">
	  </imageobject>
	  <imageobject>
	    <imagedata fileref="server_arch.gif" format="gif" scale="50">
	  </imageobject>
	  <textobject>
	    <para>Server Architecture</para>
	  </textobject>
	</mediaobject>
      </figure>
      GGZ-control will handle incoming connections, manage the user
      database, and keep track of all of the games being played
      (referred to as game tables).  Clients are always in direct
      communication with control.
    </para>

    <para>
      Control will not handle the specifics of how to play any
      particular game.  That logic is contained in the individual game
      servers.  It is expected (and hoped!) that game developers will
      write their own games servers for use with GGZ.  GGZ will
      attempt to provide a simple franework for writing network games
      in which developer need not worry about connections or user
      logins or maintaining statistics.  All of that will be done by
      GGZ.  Game devlopers should only have to concern themselves with
      gameplay.
    </para>

    <para>
      The third item is more loosely connected.  We will provide some
      sort of run-time configuration utility for GGZ, so the main
      server will not have to be restarted (or worse.. recompiled!) in
      order for various options to be changed.
    </para>

    <para>
      Some options may include:
      <itemizedlist>
        <listitem>
          <para>Location of game servers</para>
        </listitem>
        <listitem>
          <para>Set auto removal of inactive users
            <itemizedlist>
              <listitem>
                <para>Set inactivity threshold</para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para>Set auto clearing of statistics
            <itemizedlist>
              <listitem>
                <para>Set clearing interval</para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para>Log level (level of detail in server logs)</para>
        </listitem>
      </itemizedlist>
    </para>
    
    <section id="control"><title>GGZ-control</title>
      <para>
      This is the main brain for the server side of GGZ.  It handles
      client logins and new user registrations.  It manages option
      negotiation with the clients, and launches new game sessions.
      It maintains a list of running game sessions and keeps a
      database of win/lose statistics for each user.  Control
      coordinates games, users, and databases, and is responsible for
      interacting with the client, the running games, and the config
      utility.
    </para>
    
    <para>
      I considered several possble designs before settling on the
      current one.  It is possible that as GGZ develops this design
      will change as well. Since control must communicate with
      multiple parties (game tables, users, etc.) I decided to use a
      multi-threaded concurrent server where each connection (be it
      user or game table) gets its own thread.  This avoids the
      situation where control is servicing a request and therefore
      cannot handle any incoming connections or other requests.  I
      chose threads rather than forking child processes because
      threads have a smaller overhead and it is easier to share memory
      between threads than between processes.
    </para>
    
    <para>
      Every time a new user connects, control creates a new thread to
      handle all requests for that user.  This thread is known as the
      player handler.  If the user decides to launch a new game table,
      the player handler creates a thread to handle all requests from
      the game table.  This new thread is known as the table handler.
      The table handler waits until enough players have joined the
      table and then forks a process, known as the game table process,
      in which to run the game server (The reason game servers are not
      run within a thread is so that game developers not be required
      to worry about writing thread-dafe code).
    </para>
    
    <para>
      During the course of the game, the player thread for each player
      acts as a liason between the player and the game table, passing
      requests back and forth transparent to the player and the game
      server.  When a player logs out, the player handler thread is
      destroyed.
    </para>

      <section id="controlgame">
	<title>Interactions between control and running games</title>
	<para>
	  Sample game servers will be provided with GGZ, but it
	  is hoped that others will write game modules, and either
	  submit them for inclusion in the GGZ package, or
	  maintain and distribute them separately.  The following API
	  describes how control will interact with the game processes.
	</para>
    
	<para>
	Four types of data are exchanged between GGZ-control and game servers:
	<itemizedlist>
	    <listitem>
	      <para>chr: a 1-byte signed char</para>
	    </listitem>
	    <listitem>
	      <para>int: a 4-byte signed integer in network byte order</para>
	    </listitem>
	    <listitem>
	      <para>
	      str: a multibyte null-terminated string preceeded by
	      its length (including null-termination) as an integer.
	    </para>
	    </listitem>
	    <listitem>
	      <para>
               fd: a file descriptor passed via sendmsg() along with a
               single byte of dummy data
               </para>
	    </listitem>
	</itemizedlist>
      </para>
	
	<para>
	  The following is a complete list of messages between the
	  game module and the control section of the server.  Again, I
	  have chosen to intersperse game module requests with the
	  corresponding control responses.
	</para>
    
	<para>
	  Please note: the following is not written stone, merely a
	  list of ideas.

          <programlisting role="pseudocode">
	    REQ_GAME_LAUNCH
              int: size of options data in bytes
              (options data)
              int: number of seats at table
  	      sequence of
	        int: seat assignment (-1 for OPEN, -2 for COMP, -3 RESV)
	        str: name of player (if assignment >=0 or == RESV)
                fd:  file dscriptor of player (if assignment >= 0)
            RSP_GAME_LAUNCH
              chr: success flag (0 if OK, -1 if error)
          
            REQ_GAME_JOIN
	      int: seat number
  	      str: name of player
              fd:  file dscriptor of player 
            RSP_GAME_JOIN
              chr: success flag (0 if OK, -1 if error)

            REQ_GAME_LEAVE
              str: name of player
            RSP_GAME_LEAVE
              chr: success flag (0 if OK, -1 if error)

            MSG_GAME_OVER
              int: number of statistics
              sequence of
                int: player index
                int: number of games won
                int: number of games lost
	    
	    MSG_LOG
	      int: log level mask
	      str: log message

	    MSG_DBG
	      int: debug level mask
	      str: debug message
	  </programlisting>

	</para>
      </section>
  
      <section id="controlconfig">
	<title>Interactions between control and config utility</title>
	<para>
	  Since the server runs non-interactively in the background,
	  there needs to be a run-time configuration tool so that
	  server options may be changed without restarting.  This
	  program will communicate with control via a Unix domain
	  socket or a message queue, or some such thing.
	</para>
	
	<para>
	  Messages between control and the config utility include:
	  <itemizedlist>
	    <listitem>
	      <para>Request available game types (loaded modules)</para>
	    </listitem>
	    <listitem>
	      <para>Add/Remove Game types</para>
	    </listitem>
	    <listitem>
	      <para>Remove users</para>
	    </listitem>
	    <listitem>
	      <para>Request list of active games</para>
	    </listitem>
	    <listitem>
	      <para>Clear Player statistics</para>
	    </listitem>
	    <listitem>
	      <para>Modify logging</para>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
    </section>
    
    <section id="gameservers"><title>Individual Game Servers</title>
      <para>
	As described above, game servers run in their own processes,
	and are responsible for handling the gameplay of a particular
	game.
      </para>
    
      <para>
	There are three possibilities for game server design.
	<itemizedlist>
	  <listitem>
	    <para>
	      Compiled in.  The game table process calls a statrtup
	      function which begins execution of the game server.
	      This scheme has the benefit that the server has access
	      to control's data structures at the time the process was
	      forked.  Communication between the game table and
	      control can be via pipes or a socketpair.  The problem
	      with this scheme is that to change which games are
	      offered by a particular server requires a reocmpile.
	      Not good.
          </para>
	  </listitem>
	  <listitem>
	    <para>
	      Dynamically loaded modules.  Similar to the above except
	      that game server exist as loadable modules which may be
	      inserted and removed at runtime. This allows for adding
	      new game types without a recompile.  Downside is that it
	      requires both game developers and myself to know how to
	      deal with loadable modules.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Exec() separate program.  In this scheme, GGZ acts
	      much like the inet daemon by handling the connections
	      and then doing a fork()/exec() to launch the game
	      server.  This scheme also allows for adding new games at
	      runtime and has the bonus effect that game servers can
	      be written in other kanguages that C.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      
      <para>
	The current design requires game servers of type three.  It is
	possible however, that in the future GGZ will allow
	dynamically loaded server modules as well.
      </para>
      
      <para>
	Once the game server is running it is necessary that control
	pass it some required information such as player names and
	file descriptors.  This communication occurs over a pipe or
	socketpair which is established prior to the forking of the
	process.  The interactions between game modules and the
	control section are listed above in section 3.1.1.1.
      </para>
    </section>

    <section id="configutility">
      <title>Config Utility</title>
      <para>Not written</para>
    </section>
    
    <section id="subsystems"><title>Key Subsystems</title>
      <para>
	While the architecture of the server is divided into the aforementioned
	three parts, there are a few "subsystems" which are necessary.
      </para>
      
      <section id="optionparse"><title>Options Parser</title>
	<para>
	  This is a two part system.  One to parse the command-line
	  arguments, and one to parse the configuration file.  Options
	  specified on the command line should have a higher
	  precedence than those in the config file. Additionally, an
	  alternate config file may be specified on the command line.
	</para>
	
	<para>
	  At the present, I am using the popt library for cmd-line
	  parsing.
	</para>

	<para>
	  The configuration file parsing is a three-phase process which
	  bootstraps itself from a dark, dreary and empty server to one
	  supporting multiple chat rooms, each of which can host one specific
	  game:
	  <itemizedlist>
	    <listitem>
	      <para>
		Phase One: Read the ggzd.conf file from SYSCONFDIR.
		The file to read can be determined at runtime with
		the <emphasis>--file=/path/to/conffile</emphasis>
		option.  This feature is most notably used when testing a
		new configuration.
	      </para>
	      <para>
		The same line parser is used throughout the configuration
		process.  It is relatively simplistic, much like strtok(),
		but processes an entire line in a single shot.  It then
		sets two module variables 'varname' and 'varvalue' to the
		appropriate contexts from the configuration line.  The file
		parsers can then use these strings to configure various
		run-time variables.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Phase Two: Scan all the game description files and parse
		those which have been signaled as in use by the main
		configuration file.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Phase Three: Scan all the room description files and parse
		those which have been signaled as in use by the main
		configuration file.  These must be processed after the
		game files, as each room will host a game which is already
		loaded by phase two.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  The actual contents of the configuration files is discussed in
	  the server administration documentation.
	</para>
      </section>

      <section id="userdb"><title>Login/User Database</title>
	<para>
	  The server will need to store a database of user ID, name,
	  and password at the very least.  This system must allow
	  searching by name or ID, and allow for easy
	  addition/deletion.  GGZ will probably use libdb for
	  this.  A SQL database is possible but probably not
	  necessary, and just too much for our simple requirements.
	</para>
      </section>
  
      <section id="motd"><title>MOTD System</title>
	<para>
	  The message of the day is read at initialization time from a file
	  pointed to by the MOTD configuration file option.  The file can
	  consist of up to 80 lines (this is configurable at build via
	  MAX_MOTD_LINES).
	</para>

	<para>
	  The message of the day file can contain % specifiers which are
	  replaced by the server before sending to the client.  The following
	  codes are supported:
	  <itemizedlist>
	    <listitem>
	      <para>
		%a - Server administrator's name
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%C - Server cputype (according to last kernel build)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%d - Current date on server
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%e - Server administrator's email address
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%g - Current number of game tables
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%G - Current number of game tables with free seats
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%h - Server's hostname
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%o - Server's OS name
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%p - Port number for this server
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%t - Current local time on server
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%u - Current server uptime statistic
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%U - Current numbers of users on system
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		%v - Version of running server
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>

      </section>
  
      <section id="stats"><title>Player Statistics</title>
	<para>
	  Since the game modules are dynamic, it makes sense to store
	  the statistics on a per-game type basis, rather than on a
	  per-user basis.
	</para>
      </section>
  
      <section id="module"><title>Module loading</title>
	<para>Not written</para>
      </section>
    </section>
    
    <section id="structures"><title>Data Structures</title>
      <para>
	There will be an array of <emphasis>game_t</emphasis>
	structures on the server.  This array will be initialized at
	startup, and may be changed when dynamic loading of new game
	modules occurs.  The index into this array is referred to as
	the game type index.
      </para>
      <programlisting role="pseudocode">
	game_t {
          str: short string for name of game (16 chars?)
          str: long string for description (256 chars?)
          fnc: pointer to function for launching game
          chr: allowable player numbers (2^num)
          chr: allow computer players (1 for yes)
          int: sizeof options struct in bytes
          chr: enabled flag (1 if playing this game is enabled)
	}
      </programlisting>
      
      <para>
	There will be an array of <emphasis>game_run_t</emphasis>
	structures represnting running games, This array will be
	dynamic since as games are started and finished, entries in
	the array are created and destroyed.  The index into this
	array is referred to as the game index.
      </para>
      <programlisting role="pseudocode">
	game_run_t {
          int: game type index
          int: number of player slots
          *int: array of player codes for registered players
          chr: play/wait flag (0 if waiting for players, 1 if playing)
          int: process or thread ID
          *void: pointer to options struct for this game
          *int: array of player codes for reservations
          int: number of open player slots
          int: file descriptor for communication
	  chr: computer players (2^num)
	}
      </programlisting>

      <para>
	There will also be a large array of
	<emphasis>user_t</emphasis> structures, representing connected
	users.  As soon as a user connects, an entry is created and
	the file descriptor filled in.  When the user completes the
	login process, the user code and name are filled in.  When the
	user launches, or joins a game, the game index is filled in.
      </para>
      <programlisting role="pseudocode">
	user_t {
          int: user code (unique user id number)
          str: user name
          int: file descriptor for communication
          int: game index
	}
      </programlisting>

      <para>
	An array of <emphasis>reservation_t</emphasis> structures
	holds all of the reservations requested.  These are created
	when a game is launched with reservation requests.  They may
	be altered once the game has been launched.  They are deleted
	when a user accepts a reservation or declines it.
      </para>
      <programlisting role="pseudocode">
	reservation_t {
          int: game index
          int: user code
	}
      </programlisting>

      <para>
	The server options are stored in a <emphasis>Options</emphasis>
	structure.  This holds many run-time configurable options.
	<emphasis>Note:</emphasis> Not all of these options are implemented
	at this current time.
      </para>

      <programlisting role="psuedocode">
	Options {
	  str: Name of configuration file specified in --file
	  chr: remove_users
	  int: User inactivity time
	  chr: clear_stats
	  int: stat_clr_time
	  int: TCP/IP port to use for communications
	  str: Directory in which game description files are found
	  str: tmp_dir
	  str: The base configuration directory
	  str: The server admin's name
	  str: The server admin's email address
	  int: Whether to perform hostname lookups for log files
	}
      </programlisting>

      <para>
	A chat room is implemented internally in a
	<emphasis>RoomStruct</emphasis>.  These are stored in a run-time
	allocated array as needed.  Hopefuly this will allow on-the-fly
	room creation in the future.
      </para>
      <programlisting>
	RoomStruct {
	  str: Short room name
	  str: Long room description
	  int: Number of players in room
	  int: Maximum number of players allowed in this room
	  int: Number of active tables in room
	  int: Maximum number of active tables in room
	  int: The game type this room hosts
	  time_t: A timestamp when the player list last changed
	  time_t: A timestamp when the table list last changed
	  *int: An array of player indices (players in room)
	  *int: An array of table indices
	  *ChatItemStruct: The tail of a linked list of chat for this room
	}
      </programlisting>

      <para>
	Chat messages are implemented as a set of linked lists, one per
	chat room.  The chat room itself points to the tail of the linked
	list so that chats may easily be tacked onto the end.  Each player
	has a pointer to their head of the chain, which is the next message
	they expect to receive.  A <emphasis>ChatItem</emphasis> is stored
	as follows:
      </para>
      <programlisting>
	ChatItem {
	  int: Number of players who have not read this chat
	  str: The name of the sender of this chat
	  str: The message itself
	  *ChatItem: The next message in the linked list
	}
      </programlisting>

      <para>
	The message of the day is stored internally in a
	<emphasis>MOTDInfo</emphasis> structure.  It is read at system
	initialization and will not change dynamically (at least yet).
      </para>
      <programlisting>
	MOTDInfo {
	  str: Filename where MOTD is found
	  chr: Whether to utilize the MOTD (bool)
	  ulong: Time the server started up (used to calc uptime)
	  int: Number of lines in MOTD file
	  *str: An array of MOTD text lines
	  str: The server's hostname
	  str: The server's system name (eg: Linux)
	  str: The server's CPU identifier - this is not strictly accurate
	       and depends on who compiled the kernel
	  str: The port number the server is using
	}
      </programlisting>

      <para>
	Logfile options are stored separately from the main server
	options in a <emphasis>LogInfo</emphasis> structure:
      </para>
      <programlisting>
	LogInfo {
	  int: Have log files been initialized?  If no, we emit to stdout/err
	  int: Which syslog facility to use
	  uint: A bitmap of options (see err_func.h)
	  str: Filename for logfile (if not syslog)
	  *FILE: Stream for logfile
	  uint: Log types to include in logs (see err_func.h)
	    ** The following are only included if debug is on **
	  chr: A flag to note that debug level was set on command line
	  str: Filename for debug file (if not syslog)
	  *FILE: Stream for debug file
	  uint: Debug types to include in logs (see err_func.h)
	}
      </programlisting>
    </section>
  </chapter>

  <appendix id="appendix"><title>Message Reference</title>

    <para>
     We now list a complete reference of messages which get
     passed to and from the GGZ server.  This listing conforms to
     protocol version &protonum;.
    </para>
    
    <section id ="server-to-client"><title>Server to client messages</title>
      <para>
	Three types of data are exchanged between the client and the server:
	<itemizedlist>
	  <listitem>
	    <para>char: a 1-byte signed char</para>
	  </listitem>
	  <listitem>
	    <para>int: a 4-byte signed integer in network byte order</para>
	  </listitem>
	  <listitem>
	    <para>
	      string: a multibyte null-terminated string preceeded by
	      its length (including null-termination) as an integer.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>

      <para>
	Interactions take one of three forms: server messages, client
	requests, and server responses.  Each interaction is prefaced
	by an opcode indentifying it (some interactions consist solely
	of the opcode).  The opcode (stored as an enumerated value) is
	sent as an int.
      </para>
      
      <refentry id="msg.server.id"><?dbhtml filename="msg_server_id.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_SERVER_ID</primary>
	  </indexterm>
	  <refentrytitle>MSG_SERVER_ID</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_SERVER_ID</refname>
	  <refpurpose>Server identification</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>0</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    MSG_SERVER_ID
                  </entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">server_id</entry>
		  <entry>string</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">protocol_version</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">chat_length</entry>
		  <entry>int</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>An identifcation message from the server</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">server_id</emphasis></term>
		<listitem>
		  <para>
		    Server identification string (including version number)
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">protocol_version</emphasis></term>
		<listitem>
		  <para>
		    32-bit protocol version number
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">chat_length</emphasis></term>
		<listitem>
		  <para>
		    Maximum allowable chat message length (in bytes)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_SERVER_ID is sent from the server to the client upon
	      a successful connection.  It does not guarantee a
	      successful login.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="msg.server.full"><?dbhtml filename="msg_server_full.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_SERVER_FULL</primary>
	  </indexterm>
	  <refentrytitle>MSG_SERVER_FULL</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_SERVER_FULL</refname>
	  <refpurpose>Server full message</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>1</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    MSG_SERVER_FULL
                  </entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Indication that the server cannot accept any logins</para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_SERVER_FULL is sent from the server to the client
	      upon immediately after <link
	      linkend="msg.server.id">MSG_SERVER_ID</link> if the
	      server has reached its maximum number of connected
	      users.  The connection is then terminated.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="msg.motd"><?dbhtml filename="msg_motd.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_MOTD</primary>
	  </indexterm>
	  <refentrytitle>MSG_MOTD</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_MOTD</refname>
	  <refpurpose>Server Message of the day</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>2</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    MSG_MOTD
                  </entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">lines</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C3">
		    <emphasis>sequence of</emphasis> lines:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C2" nameend="C2">message</entry>
		  <entry>string</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Message of the day (MOTD) from the Server</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">lines</emphasis></term>
		<listitem>
		  <para>
		    Number of lines in MOTD to follow.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">message</emphasis></term>
		<listitem>
		  <para>
		    A single line of the MOTD
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_MOTD is sent from the server to the client upon
	      successful login (ie. after <link
	      linkend="rsp.login.new">RSP_LOGIN_NEW</link>,<link
	      linkend="rsp.login.anon">RSP_LOGIN_ANON</link>, or <link
	      linkend="rsp.login">RSP_LOGIN</link>)
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>
      
      <refentry id="msg.chat"><?dbhtml filename="msg_chat.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_CHAT</primary>
	  </indexterm>
	  <refentrytitle>MSG_CHAT</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_CHAT</refname>
	  <refpurpose>Server-relayed chat message</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>3</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">MSG_CHAT</entry>
		</row>
		
		<row rowsep="1">
		  <entry><emphasis role="bold">Data</emphasis></entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		  <entry><emphasis role="bold">Sent</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry>sub-opcode</entry>
		  <entry>char</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry>player</entry>
		  <entry>string</entry>
		  <entry>if bit set</entry>
		</row>

		<row rowsep="1">
		  <entry>message</entry>
		  <entry>string</entry>
		  <entry>if bit set</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Chat message from a player (relayed via server)</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">sub-opcode</emphasis></term>
		<listitem>
		  <para>
		    Chat operation type:
		    <itemizedlist>
		      <listitem>
			<para>
			  GGZ_CHAT_NORMAL (64) : typical chat message
			  to all in room (include field: message)
			</para>
		      </listitem>
		      <listitem>
			<para>
			  GGZ_CHAT_BEEP (128) : send a beep to another
			  player's console (include field: player)
			</para>
		      </listitem>
		      <listitem>
			<para>
			  GGZ_CHAT_PERSONAL (192) : message directed
			  to a single player (include fields:
			  player, message)
			</para>
		      </listitem>
		    </itemizedlist>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">player</emphasis></term>
		<listitem>
		  <para>
		    Name of player who originated message.  Only
		    included if most-significant bit of sub-opcode is
		    sent (ie. sub-opcode & 0x80 is true)
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">message</emphasis></term>
		<listitem>
		  <para>
		    Chat message.  Only included if next to
		    most-significant bit of sub-opcode is sent
		    (ie. sub-opcode & 0x40 is true)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_CHAT is sent from the server to the client whenever
	      that client has pending chats from other players.  This
	      occurs only when the player is a room.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="msg.update.players"><?dbhtml filename="msg_update_players.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_UPDATE_PLAYERS</primary>
	  </indexterm>
	  <refentrytitle>MSG_UPDATE_PLAYERS</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_UPDATE_PLAYERS</refname>
	  <refpurpose>Notification that player list has changed</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>4</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">MSG_UPDATE_PLAYERS</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Notification that the list of players in the current
	  room has been modified since the last update</para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_UPDATE_PLAYERS is sent from the server to the client
	      if the list of players in the current room has changed
	      since the last update.  It is also sent immediately upon
	      entering a room (ie. after <link
	      linkend="rsp.room.join">RSP_ROOM_JOIN</link>). It is
	      expected that the client will then send a <link
	      linkend="req.list.players">REQ_LIST_PLAYERS</link> to
	      obtain the updated list.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="msg.update.types"><?dbhtml filename="msg_update_types.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_UPDATE_TYPES</primary>
	  </indexterm>
	  <refentrytitle>MSG_UPDATE_TYPES</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_UPDATE_TYPES</refname>
	  <refpurpose>Notification that game type list has changed</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>5</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">MSG_UPDATE_TYPES</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Notification that the list of supported game types has
	  been modified since the last update</para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_UPDATE_TYPES is sent from the server to the client
	      if the list of game types which the server supports has
	      changed since the last update.  It is also sent upon
	      successful login (ie. after <link
	      linkend="rsp.login.new">RSP_LOGIN_NEW</link>,<link
	      linkend="rsp.login.anon">RSP_LOGIN_ANON</link>, or <link
	      linkend="rsp.login">RSP_LOGIN</link>).  It is expected
	      that the client will then send a <link
	      linkend="req.list.types">REQ_LIST_TYPES</link> to obtain
	      the updated list.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="msg.update.tables"><?dbhtml filename="msg_update_tables.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_UPDATE_TABLES</primary>
	  </indexterm>
	  <refentrytitle>MSG_UPDATE_TABLES</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_UPDATE_TABLES</refname>
	  <refpurpose>Notification that the table list has changed</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>6</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">MSG_UPDATE_TABLES</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Notification that the list of tables in the current
	  room has been modified since the last update</para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_UPDATE_TABLES is sent from the server to the client
	      if the list of tables in the current room has changed
	      since the last update.  It is also sent upon entry to a
	      new room (ie. after <link
	      linkend="rsp.room.join">RSP_ROOM_JOIN</link>).  It is
	      expected that the client will then send a <link
	      linkend="req.list.tables">REQ_LIST_TABLES</link> to
	      obtain the updated list.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="msg.update.rooms"><?dbhtml filename="msg_update_rooms.html">
	<refmeta>
	  <indexterm>
	    <primary>MSG_UPDATE_ROOMS</primary>
	  </indexterm>
	  <refentrytitle>MSG_UPDATE_ROOMS</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>MSG_UPDATE_ROOMS</refname>
	  <refpurpose>Notificatiion that the room listing has been changed</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>7</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">MSG_UPDATE_ROOMS</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Notification that the room list has changed since the
	  last update</para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      MSG_UPDATE_ROOMS is sent from the server to the client
	      if the room list has changed since the last update.  It
	      is also sent after a successful login (ie. after <link
	      linkend="rsp.login.new">RSP_LOGIN_NEW</link>,<link
	      linkend="rsp.login.anon">RSP_LOGIN_ANON</link>, or <link
	      linkend="rsp.login">RSP_LOGIN</link>).  It is expected
	      that the client will then send a <link
	      linkend="req.list.rooms">REQ_LIST_ROOMS</link> to obtain
	      the updated list.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <![IGNORE[

    <refentry id="rsp.login.new"><?dbhtml filename="rsp_login_new.html">
    <refmeta>
    <indexterm>
    <primary>RSP_LOGIN_NEW</primary>
    </indexterm>
    <refentrytitle>RSP_LOGIN_NEW</refentrytitle>
    </refmeta>
      
    <refnamediv>
    <refname>RSP_LOGIN_NEW</refname>
    <refpurpose>Server response to first-time login request</refpurpose>
    </refnamediv>
      
    <refsynopsisdiv><title>Synopsis</title>
    <informaltable>
    <tgroup cols="3">
    <colspec colnum="1" colname="C1" align="left">
    <colspec colnum="2" colname="C2">
    <colspec colnum="3" colname="C3">
    <tbody>
      
    <row rowsep="0">
    <entry namest="C1" nameend="C2">
    <emphasis role="bold">Opcode</emphasis>
    </entry>
    <entry>9</entry>
    </row>
      
    <row rowsep="0">
    <entry namest="C1" nameend="C3">RSP_LOGIN_NEW</entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">
    <emphasis role="bold">Data</emphasis>
    </entry>
    <entry><emphasis role="bold">Type</emphasis></entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">status</entry>
    <entry>char</entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">password</entry>
    <entry>string</entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">checksum</entry>
    <entry>int</entry>
    </row>
      
    </tbody>
    </tgroup>
    </informaltable>
	</refsynopsisdiv>
      
    <refsect1>
    <title>Description</title>
    <para>Server response to first-time login request</para>
    <refsect2>
    <title>Message Data</title>
    <variablelist>
    <varlistentry>
    <term><emphasis role="bold">status</emphasis></term>
    <listitem>
    <para>
      status of login request (zero if successful,
      negative on error)
    </para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term><emphasis role="bold">password</emphasis></term>
    <listitem>
    <para>
      Password for new account (only sent if login successful)
    </para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term><emphasis role="bold">checksum</emphasis></term>
    <listitem>
    <para>
      Checksum of game types (only sent if login successful)
    </para>
    </listitem>
    </varlistentry>
    </variablelist>
    </refsect2>
	  
    <refsect2>
    <title>Usage</title>
    <para>
      RSP_LOGIN_NEW is sent from the server to the client in
      response to a new login request via <link
      linkend="req.login.new">REQ_LOGIN_NEW</link>.
    </para>
    </refsect2>
    </refsect1>
    </refentry>
      
    <refentry id="rsp.login"><?dbhtml filename="rsp_login.html">
    <refmeta>
    <indexterm>
    <primary>RSP_LOGIN</primary>
    </indexterm>
    <refentrytitle>RSP_LOGIN</refentrytitle>
    </refmeta>

    <refnamediv>
    <refname>RSP_LOGIN</refname>
    <refpurpose>Server response to login request</refpurpose>
    </refnamediv>
      
    <refsynopsisdiv><title>Synopsis</title>
    <informaltable>
    <tgroup cols="3">
    <colspec colnum="1" colname="C1" align="left">
    <colspec colnum="2" colname="C2">
    <colspec colnum="3" colname="C3">
    <tbody>
      
    <row rowsep="0">
    <entry namest="C1" nameend="C2">
    <emphasis role="bold">Opcode</emphasis>
    </entry>
    <entry>10</entry>
    </row>
      
    <row rowsep="0">
    <entry namest="C1" nameend="C3">RSP_LOGIN</entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">
    <emphasis role="bold">Data</emphasis>
    </entry>
    <entry><emphasis role="bold">Type</emphasis></entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">status</entry>
    <entry>char</entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">checksum</entry>
    <entry>int</entry>
    </row>
      
    <row rowsep="1">
    <entry namest="C1" nameend="C2">reservations</entry>
    <entry>char</entry>
    </row>
      
    </tbody>
    </tgroup>
    </informaltable>
    </refsynopsisdiv>
      
    <refsect1>
    <title>Description</title>
    <para>Server response to player login request</para>
    <refsect2>
    <title>Message Data</title>
    <variablelist>
    <varlistentry>
    <term><emphasis role="bold">status</emphasis></term>
    <listitem>
    <para>
      status of login request (zero if successful,
      negative on error)
    </para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term><emphasis role="bold">checksum</emphasis></term>
    <listitem>
    <para>
      Checksum of game types (only sent if login successful)
    </para>
    </listitem>
    </varlistentry>
    <varlistentry>
    <term><emphasis role="bold">reservation</emphasis></term>
    <listitem>
    <para>
      Flag to indicate if player has resverations
      waiting (only sent if login successful)
    </para>
    </listitem>
    </varlistentry>
    </variablelist>
    </refsect2>
      
    <refsect2>
    <title>Usage</title>
    <para>
      RSP_LOGIN is sent from the server to the client in
      response to a login request via <link
      linkend="rsp.login.new">RSP_LOGIN</link>.
    </para>
    </refsect2>
    </refsect1>
    </refentry>
      
      ]]>

      <refentry id="rsp.login.anon"><?dbhtml filename="rsp_login_anon.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_LOGIN_ANON</primary>
	  </indexterm>
	  <refentrytitle>RSP_LOGIN_ANON</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_LOGIN_ANON</refname>
	  <refpurpose>Server response to anonymous login request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>11</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_LOGIN_ANON</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">checksum</entry>
		  <entry>int</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to anonymous login request</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of login request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">checksum</emphasis></term>
		<listitem>
		  <para>
		    checksum of supported game types (if login was successful)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_LOGIN_ANON is sent from the server to the client in
	      response to an "anonymous" login request via <link
	      linkend="req.login.anon">REQ_LOGIN_ANON</link>.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.logout"><?dbhtml filename="rsp_logout.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_LOGOUT</primary>
	  </indexterm>
	  <refentrytitle>RSP_LOGOUT</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_LOGOUT</refname>
	  <refpurpose>Server response to logout request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>12</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_LOGOUT</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player logout request</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of logout request (zero if successfule,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_LOGOUT is sent from the server to client in response
	      to a logout request via <link
	      linkend="req.logout">REQ_LOGOUT</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.list.players"><?dbhtml filename="rsp_list_players.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_LIST_PLAYERS</primary>
	  </indexterm>
	  <refentrytitle>RSP_LIST_PLAYERS</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_LIST_PLAYERS</refname>
	  <refpurpose>
	    Server response to request for list of players in room.
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>15</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    RSP_LIST_PLAYERS
                  </entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">players</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C3">
		    <emphasis>sequence of</emphasis> players:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry align="right" namest="C1" nameend="C2">name</entry>
		  <entry>string</entry>
		</row>

		<row rowsep="1">
		  <entry align="right" namest="C1" nameend="C2">table</entry>
		  <entry>int</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to request for list of players in
	  current room</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">players</emphasis></term>
		<listitem>
		  <para>
		    Number of players in room, or -1 on error
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">name</emphasis></term>
		<listitem>
		  <para>
		    Player name
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">table</emphasis></term>
		<listitem>
		  <para>
		    ID number of table at which player is "sitting" or -1
		    if the player is not at a table.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_LIST_PLAYERS is sent from the server to the client
	      in response to
	      <link linkend="req.list.players">REQ_LIST_PLAYERS</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.list.types"><?dbhtml filename="rsp_list_types.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_LIST_TYPES</primary>
	  </indexterm>
	  <refentrytitle>RSP_LIST_TYPES</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_LIST_TYPES</refname>
	  <refpurpose>
	    Server response to request for list of server-supported
	    game types.
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <colspec colnum="4" colname="C4">
	      <spanspec spanname="data.seq0" namest="C1" nameend="C2"
			align="left">
	      <spanspec spanname="data.seq1" namest="C1" nameend="C2"
			align="right">
	      <spanspec spanname="all" namest="C1" nameend="C4"
			align="left"> 
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>16</entry>
		</row>

		<row rowsep="0">
		  <entry spanname="all">RSP_LIST_TYPES</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq0">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		  <entry><emphasis role="bold">Sent</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq0">types</entry>
		  <entry>int</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="all">
		    <emphasis>sequence of</emphasis> types:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq1">ID</entry>
		  <entry>int</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">name</entry>
		  <entry>string</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">version</entry>
		  <entry>string</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">player_mask</entry>
		  <entry>char</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">description</entry>
		  <entry>string</entry>
		  <entry>if verbose</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">author</entry>
		  <entry>string</entry>
		  <entry>if verbose</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">homepage</entry>
		  <entry>string</entry>
		  <entry>if verbose</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to request for list of players in
	  current room</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">ID</emphasis></term>
		<listitem>
		  <para>
		    Unique numeric ID for this game type
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">name</emphasis></term>
		<listitem>
		  <para>
		    Name of game
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">version</emphasis></term>
		<listitem>
		  <para>
		    Version string for this game type
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">player_mask</emphasis></term>
		<listitem>
		  <para>
		    Bit mask of allowable player numbers
		    FIXME:  Needs explained
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">description</emphasis></term>
		<listitem>
		  <para>
		    Longer decription of this game.  Only sent if the
		    client requested a verbose listing.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">author</emphasis></term>
		<listitem>
		  <para>
		    Author of this game module.  Only sent if the
		    client requested a verbose listing.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">homepage</emphasis></term>
		<listitem>
		  <para>
		    URL for obtaining this game module.  Only sent if the
		    client requested a verbose listing.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_LIST_TYPES is sent from the server to the client
	      in response to
	      <link linkend="req.list.types">REQ_LIST_TYPES</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>
      
      <refentry id="rsp.list.tables"><?dbhtml filename="rsp_list_tables.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_LIST_TABLES</primary>
	  </indexterm>
	  <refentrytitle>RSP_LIST_TABLES</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_LIST_TABLES</refname>
	  <refpurpose>
	    Server response to request for list of tables
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <colspec colnum="4" colname="C4">
	      <spanspec spanname="data.seq0" namest="C1" nameend="C3"
			align="left">
	      <spanspec spanname="data.seq1" namest="C1" nameend="C3"
			align="center">
	      <spanspec spanname="data.seq2" namest="C1" nameend="C3"
			align="right">
	      <spanspec spanname="all" namest="C1" nameend="C4"
			align="left"> 
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>17</entry>
		</row>

		<row rowsep="0">
		  <entry spanname="all">RSP_LIST_TABLES</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq0">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq0">tables</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="all">
		    <emphasis>sequence of</emphasis> tables:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq1">room</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">ID</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">type</entry>
		  <entry>int</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq1">description</entry>
		  <entry>string</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq1">state</entry>
		  <entry>char</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">seats</entry>
		  <entry>int</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="all">
		    <emphasis>sequence of</emphasis> seats:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq2">assignment</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq2">name</entry>
		  <entry>string</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to request for list of tables</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">tables</emphasis></term>
		<listitem>
		  <para>
		    Number of tables, or -1 on error
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">room</emphasis></term>
		<listitem>
		  <para>
		    Room in which table resides
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">ID</emphasis></term>
		<listitem>
		  <para>
		    Unique numeric ID for table
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_LIST_TABLES is sent from the server to the client
	      in response to
	      <link linkend="req.list.tables">REQ_LIST_TABLES</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.list.rooms"><?dbhtml filename="rsp_list_rooms.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_LIST_ROOMS</primary>
	  </indexterm>
	  <refentrytitle>RSP_LIST_ROOMS</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_LIST_ROOMS</refname>
	  <refpurpose>
	    Server response to request for list of rooms
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <colspec colnum="4" colname="C4">
	      <spanspec spanname="data.seq0" namest="C1" nameend="C2"
			align="left">
	      <spanspec spanname="data.seq1" namest="C1" nameend="C2"
			align="right">
	      <spanspec spanname="all" namest="C1" nameend="C4"
			align="left">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>18</entry>
		</row>

		<row rowsep="0">
		  <entry spanname="all">RSP_LIST_ROOMS</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq0">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		  <entry><emphasis role="bold">Sent</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq0">rooms</entry>
		  <entry>int</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="all">
		    <emphasis>sequence of</emphasis> rooms:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq1">ID</entry>
		  <entry>int</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">name</entry>
		  <entry>string</entry>
		  <entry>always</entry>
		</row>
		
		<row rowsep="1">
		  <entry spanname="data.seq1">game</entry>
		  <entry>int</entry>
		  <entry>always</entry>
		</row>

		<row rowsep="1">
		  <entry spanname="data.seq1">description</entry>
		  <entry>string</entry>
		  <entry>if verbose</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to request for list of rooms</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">rooms</emphasis></term>
		<listitem>
		  <para>
		    Number of rooms, or -1 on error
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">ID</emphasis></term>
		<listitem>
		  <para>
		    Unique numeric room ID
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">name</emphasis></term>
		<listitem>
		  <para>
		    Room name
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">game</emphasis></term>
		<listitem>
		  <para>
		    ID of game type played in this room
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">description</emphasis></term>
		<listitem>
		  <para>
		    Longer description of room.  Only sent if client
		    requested verbose listing.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_LIST_ROOMS is sent from the server to the client in
	      response to <link
	      linkend="req.list.rooms">REQ_LIST_ROOMS</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.table.launch"><?dbhtml filename="rsp_table_launch.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_TABLE_LAUNCH</primary>
	  </indexterm>
	  <refentrytitle>RSP_TABLE_LAUNCH</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_TABLE_LAUNCH</refname>
	  <refpurpose>Server response to request for table launch</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>21</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_TABLE_LAUNCH</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request for new table launch</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of launch request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_TABLE_LAUNCH is sent from the server to client in
	      response to a table launch request via <link
	      linkend="req.table.launch">REQ_TABLE_LAUNCH</link>.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.table.join"><?dbhtml filename="rsp_table_join.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_TABLE_JOIN</primary>
	  </indexterm>
	  <refentrytitle>RSP_TABLE_JOIN</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_TABLE_JOIN</refname>
	  <refpurpose>Server response to request to join table</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>22</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_TABLE_JOIN</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request to join table</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of join request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_TABLE_JOIN is sent from the server to client in response
	      to a table join request via <link
	      linkend="req.table.join">REQ_TABLE_JOIN</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.table.leave"><?dbhtml filename="rsp_table_leave.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_TABLE_LEAVE</primary>
	  </indexterm>
	  <refentrytitle>RSP_TABLE_LEAVE</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_TABLE_LEAVE</refname>
	  <refpurpose>Server response to table leave request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>23</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_TABLE_LEAVE</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request to leave tablet</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of logout request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_TABLE_LEAVE is sent from the server to client in response
	      to a table leave request via <link
	      linkend="req.table.leave">REQ_TABLE_LEAVE</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.game"><?dbhtml filename="rsp_game.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_GAME</primary>
	  </indexterm>
	  <refentrytitle>RSP_GAME</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_GAME</refname>
	  <refpurpose>Message from game module server</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>24</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_GAME</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">size</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C3">(raw data)</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Message from game module server</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">size</emphasis></term>
		<listitem>
		  <para>
		    number of bytes sent from game module server to
		    game module client
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_GAME is a message sent from the server to client 
	      containing data from the game module server for the game
	      module client.  See also <link
	      linkend="req.game">REQ_GAME</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.chat"><?dbhtml filename="rsp_chat.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_CHAT</primary>
	  </indexterm>
	  <refentrytitle>RSP_CHAT</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_CHAT</refname>
	  <refpurpose>Server response to chat message request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>25</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_CHAT</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player chat request</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of chat message request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_CHAT is sent from the server to client in response
	      to a chat message request via <link
	      linkend="req.chat">REQ_CHAT</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>
      
      <refentry id="rsp.motd"><?dbhtml filename="rsp_motd.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_MOTD</primary>
	  </indexterm>
	  <refentrytitle>RSP_MOTD</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_MOTD</refname>
	  <refpurpose>Server response to request for MOTD</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>26</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">lines</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C3">
		    <emphasis>sequence of</emphasis> lines:
		  </entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C2" nameend="C2">message</entry>
		  <entry>string</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Message of the day (MOTD) from the Server</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">lines</emphasis></term>
		<listitem>
		  <para>
		    Number of lines in MOTD to follow.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">message</emphasis></term>
		<listitem>
		  <para>
		    A single line of the MOTD
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_MOTD is sent from the server to client in response
	      to a logout request via <link
	      linkend="req.motd">REQ_MOTD</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="rsp.room.join"><?dbhtml filename="rsp_room_join.html">
	<refmeta>
	  <indexterm>
	    <primary>RSP_ROOM_JOIN</primary>
	  </indexterm>
	  <refentrytitle>RSP_ROOM_JOIN</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>RSP_ROOM_JOIN</refname>
	  <refpurpose>Server response to room change request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>27</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">RSP_ROOM_JOIN</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request to chamge rooms</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of room change request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      RSP_ROOM_JOIN is sent from the server to client in response
	      to a room chamge request via <link
	      linkend="req.room.join">REQ_ROOM_JOIN</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

    </section>
    
    <section id ="client-to-server"><title>Client to server messages</title>
      
      <refentry id="req.login.new"><?dbhtml filename="req_login_new.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LOGIN_NEW</primary>
	  </indexterm>
	  <refentrytitle>REQ_LOGIN_NEW</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LOGIN_NEW</refname>
	  <refpurpose>Client requested first-time login</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>0</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LOGIN_NEW</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">name</entry>
		  <entry>string</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Client requested login of new player</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">name</emphasis></term>
		<listitem>
		  <para>
		    Requested user name for new player
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LOGIN_NEW is sent from the client to the server to
	      request that a new player account be created with the
	      specified name.  The request may come after <link
	      linkend="msg.server.id">MSG_SERVER_ID</link>.  The server
	      will respond to the request with <link
	      linkend="rsp.login.new">RSP_LOGIN_NEW</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

            <refentry id="req.login"><?dbhtml filename="req_login.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LOGIN</primary>
	  </indexterm>
	  <refentrytitle>REQ_LOGIN</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LOGIN</refname>
	  <refpurpose>Client requested login</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>1</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LOGIN</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">name</entry>
		  <entry>string</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">password</entry>
		  <entry>string</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Client requested login</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">name</emphasis></term>
		<listitem>
		  <para>
		    Login name
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">password</emphasis></term>
		<listitem>
		  <para>
		    Player password
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LOGIN is sent from the client to the server to
	      request a player login.  The request may come after
	      <link linkend="msg.server.id">MSG_SERVER_ID</link>.  The
	      server will respond to the request with <link
	      linkend="rsp.login">RSP_LOGIN</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.login.anon"><?dbhtml filename="req_login_anon.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LOGIN_ANON</primary>
	  </indexterm>
	  <refentrytitle>REQ_LOGIN_ANON</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LOGIN_ANON</refname>
	  <refpurpose>Client requested "anonymous" login</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>2</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LOGIN_ANON</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">name</entry>
		  <entry>string</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Client requested login of "anonymous" player</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">name</emphasis></term>
		<listitem>
		  <para>
		    Requested name for "anonymous" player
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LOGIN_ANON is sent from the client to the server to
	      request an "anonymous" login with the given name.  The
	      request may come after <link
	      linkend="msg.server.id">MSG_SERVER_ID</link>.  The server
	      will respond to the request with <link
	      linkend="rsp.login.anon">RSP_LOGIN_ANON</link>
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.logout"><?dbhtml filename="req_logout.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LOGOUT</primary>
	  </indexterm>
	  <refentrytitle>REQ_LOGOUT</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LOGOUT</refname>
	  <refpurpose>Client requested logout</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>3</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LOGOUT</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para></para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LOGOUT is sent from the client to the server to
	      request that the player be logged out.  The server will
	      then respond with <link
	      linkend="rsp.logout">RSP_LOGOUT</link>.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.list.players"><?dbhtml filename="req_list_players.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LIST_PLAYERS</primary>
	  </indexterm>
	  <refentrytitle>REQ_LIST_PLAYERS</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LIST_PLAYERS</refname>
	  <refpurpose>
	    Client request for list of players in current room.
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>6</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LIST_PLAYERS</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para></para>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LIST_PLAYERS is sent from the client to the server
	      to request a list of all players in the current room.
	      The server will respond with <link
	      linkend="rsp.list.players">RSP_LIST_PLAYERS</link>.
	      This request is only valid once the player has
	      successfully joined a room.  See <link
	      linkend="req.room.join">REQ_ROOM_JOIN</link>.
					     
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.list.types"><?dbhtml filename="req_list_types.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LIST_TYPES</primary>
	  </indexterm>
	  <refentrytitle>REQ_LIST_TYPES</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LIST_TYPES</refname>
	  <refpurpose>
	    Client request for list of server-supported game types
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>7</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LIST_TYPES</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">verbose</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Client request for list of server-supported data types</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">verbose</emphasis></term>
		<listitem>
		  <para>
		    verbosity flag.  Set to 0 for short game type
		    descriptions, 1 for full descriptions.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LIST_TYPES is sent from the client to the server
	      to request a list of all game types which the server
	      supports.  The server will respond with <link
	      linkend="rsp.list.types">RSP_LIST_TYPES</link>.
	      This request is only valid once the player has
	      successfully logged in.  (ie. after <link
	      linkend="rsp.login.new">RSP_LOGIN_NEW</link>,<link
	      linkend="rsp.login.anon">RSP_LOGIN_ANON</link>, or <link
	      linkend="rsp.login">RSP_LOGIN</link>)
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.list.tables"><?dbhtml filename="req_list_tables.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LIST_TABLES</primary>
	  </indexterm>
	  <refentrytitle>REQ_LIST_TABLES</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LIST_TABLES</refname>
	  <refpurpose>
	    Client request for list of tables
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>8</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LIST_TABLES</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">type</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">global</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Client request for list of tables</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">type</emphasis></term>
		<listitem>
		  <para>
		    type ID of tables to list.  -1 for all types and
		    -3 for open tables of any type.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">global</emphasis></term>
		<listitem>
		  <para>
		    global search flag.  Set to 1 to list tables in
		    any room on the server.  Set to 0 to restrict
		    table list to current room.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LIST_TABLES is sent from the client to the server to
	      request a list of tables.  Clients may request lists to
	      be confined to tables of a specific game type, tables
	      with open seats, or any table.  Additionally the list
	      can be global or restricted to the current room.  The
	      server will respond with <link
	      linkend="rsp.list.tables">RSP_LIST_TABLES</link>.  This
	      request is only valid once the player has successfully
	      joined a room.  See <link
	      linkend="req.room.join">REQ_ROOM_JOIN</link>.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.list.rooms"><?dbhtml filename="req_list_rooms.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_LIST_ROOMS</primary>
	  </indexterm>
	  <refentrytitle>REQ_LIST_ROOMS</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_LIST_ROOMS</refname>
	  <refpurpose>
	    Client request for list of rooms on the server
	  </refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>9</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_LIST_ROOMS</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">type</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">verbose</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Client request for list of rooms on the server</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">type</emphasis></term>
		<listitem>
		  <para>
		    list of rooms of specified game type ID.  -1 for
		    all types and.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><emphasis role="bold">verbose</emphasis></term>
		<listitem>
		  <para>
		    verbosity flag.  Set to 0 for short room 
		    descriptions, 1 for full descriptions.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_LIST_ROOMS is sent from the client to the server to
	      request a list of all rooms on the server.  The server
	      will respond with <link
	      linkend="rsp.list.rooms">RSP_LIST_ROOMS</link>.  This
	      request is only valid once the player has successfully
	      logged in. (ie. after <link
	      linkend="rsp.login.new">RSP_LOGIN_NEW</link>,<link
	      linkend="rsp.login.anon">RSP_LOGIN_ANON</link>, or <link
	      linkend="rsp.login">RSP_LOGIN</link>)
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.table.launch"><?dbhtml filename="req_table_launch.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_TABLE_LAUNCH</primary>
	  </indexterm>
	  <refentrytitle>REQ_TABLE_LAUNCH</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_TABLE_LAUNCH</refname>
	  <refpurpose>Client request for new table launch</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>12</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_TABLE_LAUNCH</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request for new table launch</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of launch request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_TABLE_LAUNCH is sent from the server to client in
	      response to a table launch request via <link
	      linkend="req.table.launch">REQ_TABLE_LAUNCH</link>.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.table.join"><?dbhtml filename="req_table_join.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_TABLE_JOIN</primary>
	  </indexterm>
	  <refentrytitle>REQ_TABLE_JOIN</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_TABLE_JOIN</refname>
	  <refpurpose>Server response to request to join table</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>13</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_TABLE_JOIN</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request to join table</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of join request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_TABLE_JOIN is sent from the server to client in response
	      to a table join request via <link
	      linkend="req.table.join">REQ_TABLE_JOIN</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.table.leave"><?dbhtml filename="req_table_leave.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_TABLE_LEAVE</primary>
	  </indexterm>
	  <refentrytitle>REQ_TABLE_LEAVE</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_TABLE_LEAVE</refname>
	  <refpurpose>Server response to table leave request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>14</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_TABLE_LEAVE</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player request to leave tablet</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of logout request (zero if successful,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_TABLE_LEAVE is sent from the server to client in response
	      to a table leave request via <link
	      linkend="req.table.leave">REQ_TABLE_LEAVE</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.game"><?dbhtml filename="req_game.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_GAME</primary>
	  </indexterm>
	  <refentrytitle>REQ_GAME</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_GAME</refname>
	  <refpurpose>Message from game module client</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>15</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_GAME</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">size</entry>
		  <entry>int</entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C3">(raw data)</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Message from game module client</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">size</emphasis></term>
		<listitem>
		  <para>
		    number of bytes sent from game module client to
		    game module server
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_GAME is a message sent from the client to the server
	      containing data from the game module client for the game
	      module server.  See also <link
	      linkend="rsp.game">RSP_GAME</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.chat"><?dbhtml filename="req_chat.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_CHAT</primary>
	  </indexterm>
	  <refentrytitle>REQ_CHAT</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_CHAT</refname>
	  <refpurpose>Client chat message request</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>16</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_CHAT</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">status</entry>
		  <entry>char</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Server response to player logout request</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">status</emphasis></term>
		<listitem>
		  <para>
		    status of logout request (zero if successfule,
		    negative on error)
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_CHAT is sent from the server to client in response
	      to a logout request via <link
	      linkend="req.logout">REQ_LOGOUT</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>
      
      <refentry id="req.motd"><?dbhtml filename="req_motd.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_MOTD</primary>
	  </indexterm>
	  <refentrytitle>REQ_MOTD</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_MOTD</refname>
	  <refpurpose>Request for MOTD from server</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>17</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_MOTD</entry>
		</row>
		
	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Request fro MOTD from server</para>

	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_MOTD is sent to request the MOTD.  The server is
	      expected to respond with <link
	      linkend="rsp.motd">RSP_MOTD</link>.
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>

      <refentry id="req.room.join"><?dbhtml filename="req_room_join.html">
	<refmeta>
	  <indexterm>
	    <primary>REQ_ROOM_JOIN</primary>
	  </indexterm>
	  <refentrytitle>REQ_ROOM_JOIN</refentrytitle>
	</refmeta>

	<refnamediv>
	  <refname>REQ_ROOM_JOIN</refname>
	  <refpurpose>Request to chamge rooms</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv><title>Synopsis</title>
	  <informaltable>
	    <tgroup cols="3">
	      <colspec colnum="1" colname="C1" align="left">
	      <colspec colnum="2" colname="C2">
	      <colspec colnum="3" colname="C3">
	      <tbody>

		<row rowsep="0">
		  <entry namest="C1" nameend="C2">
                    <emphasis role="bold">Opcode</emphasis>
                  </entry>
		  <entry>18</entry>
		</row>

		<row rowsep="0">
		  <entry namest="C1" nameend="C3">REQ_ROOM_JOIN</entry>
		</row>
		
		<row rowsep="1">
		  <entry namest="C1" nameend="C2">
		    <emphasis role="bold">Data</emphasis>
		  </entry>
		  <entry><emphasis role="bold">Type</emphasis></entry>
		</row>

		<row rowsep="1">
		  <entry namest="C1" nameend="C2">room</entry>
		  <entry>int</entry>
		</row>

	      </tbody>
	    </tgroup>
	  </informaltable>
	</refsynopsisdiv>

	<refsect1>
	  <title>Description</title>
	  <para>Request to change rooms</para>
	  <refsect2>
	    <title>Message Data</title>
	    <variablelist>
	      <varlistentry>
		<term><emphasis role="bold">room</emphasis></term>
		<listitem>
		  <para>
		    room ID of requested destination room
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	  
	  <refsect2>
	    <title>Usage</title>
	    <para>
	      REQ_ROOM_JOIN is sent from the client to the server to
	      request a room change.  It is expected that the server
	      will respond with <link
	      linkend="rsp.room.join">RSP_ROOM_JOIN</link>.  
	    </para>
	  </refsect2>
	</refsect1>
      </refentry>
      
    </section>

    
    <section id = "server-to-module"><title>Messages from server to game module</title>
      <para>Messages from server to game module</para>
    </section>
    
  </appendix>
</book>

