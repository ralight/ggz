<para>
  The client and GGZ server will communicate via the protocol
  described here.  Individual games will of course communicate via
  their own protocol.  These messages currently be embedded within the
  GGZ message type REQ_GAME or RSP_GAME.  We are investigating the
  possibility of having game servers communicate directly to game
  clients via a separate socket. 
</para>

<para>
  Interactions are presented here categorically.  For a complete
  reference of client-server interactions, please see the <link
  linkend="appendix">appendix</link>
</para>

<section id="logging-in">
  <title>Logging in</title>

  <para>
    When a client first connects to the server, the server wil respond
    with <link linkend="msg.server.id">MSG_SERVER_ID</link>, notifying
    the client of the server type and protocol version number.  If the
    server is full (ie. no more user logins allowed), it will also
    send <link linkend="msg.server.full">MSG_SERVER_FULL</link>.
    After establishing a connection to the server, the client may send
    one of three commands to login: 
    
    <itemizedlist>
      <listitem>
	<para>
	  <link linkend="req.login">REQ_LOGIN</link> is used for
	  normal player logins.  The server will respond with <link
	  linkend="rsp.login.new">RSP_LOGIN_NEW</link>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <link linkend="req.login.new">REQ_LOGIN_NEW</link> is used
	  for first time logins (ie. new account requests).  The
	  server will respond with <link
	  linkend="rsp.login.new">RSP_LOGIN_NEW</link>.  It is
	  probable that in the future this interaction will be updated
	  to all site admins greater flexibility in how they setup
	  login accounts.
	</para>
      </listitem>
      
      <listitem>
	<para>
	  <link linkend="req.login.anon">REQ_LOGIN_ANON</link> is used
	  to request a guest login.  Guest logins are not
	  <emphasis>strictly</emphasis> anonymous since they still
	  have a screen name, but no statistics are stored for them
	  and they may not have seats reserved for them.  The server
	  will respond with <link
	  linkend="rsp.login.anon">RSP_LOGIN_ANON</link>
	</para>
      </listitem>
    </itemizedlist>
	      
    <note>
      <para>
	Clients may choose to send login requests immediately, not
	waiting for the <link
	linkend="msg.server.id">MSG_SERVER_ID</link>.  This is
	acceptable, provided the client handle the case where the
	server sends <link
	linkend="msg.server.full">MSG_SERVER_FULL</link>. It will
	receive no further notification that the login has failed.
	</para>
    </note>
  </para>
  
  <para>
    After a successful login, the server may optionally send a
    message-of-the-day to the client via <link
    linkend="msg.motd">MSG_MOTD</link>.  This is a text message,
    possibly with embedded color codes.  For more details, see <link
    linkend="motd">MOTD System</link>.
  </para>

  <para>
    Any time after logging in, the client may logout of the server by
    sending <link linkend="req.logout">REQ_LOGOUT</link>.  The server
    will respond with <link linkend="rsp.logout">RSP_LOGOUT</link>.
    Clients should <emphasis>not</emphasis> simply disconnect from
    the server without logging out as player data and game statistics
    may not get written back to the database.

    <note>
      <para>
	A clients may only login once.  At the present, if the player
	wishes to re-login for some reason (eg. to become anonymous, or
	to switch accounts), he will have to logout and then back in
	again.  We may make account-switching possible at a future date,
	once we implement player preferences.
      </para>
    </note>

    <warning>
      <para>
	Although it is not explicitly disallowed by the server,
	clients are discouraged from allowing players to logout while
	at a game table.  The client should send the appropriate <link
	linkend="req.table.leave">REQ_TABLE_LEAVE</link> first.
      </para>
    </warning>
  </para>
</section>

<section id="server-info">
  <title>Requesting server information</title>
  
  <para>
    After logging in, there are several pieces of information about
    the server which the client may request:
    
    <itemizedlist>
      <listitem>
	<para>
	  To request a list of game types which the server supports,
	  the client should send <link
	  linkend="req.list.types">REQ_LIST_TYPES</link>.  The server
	  will then send the client the list of supported games via
	  <link linkend="rsp.list.types">RSP_LIST_TYPES</link>.  Only
	  games which are supported by both the particular client
	  <emphasis>and</emphasis> the server may be played.
	</para>
	
      </listitem>
      
      <listitem>
	<para>
	  To request a list of the games present on the server,
	  clients should send <link
	  linkend="req.list.rooms">REQ_LIST_ROOMS</link>.  The server
	  will then send back a <link
	  linkend="rsp.list.rooms">RSP_LIST_ROOMS</link> with the
	  desired information.
	</para>
      </listitem>
      
      <listitem>
	<para>
	  If the server has a message-of-the-day, it will send it to
	  the client upon login (see the section on <link
	  linkend="logging-in">logging in</link>).  The client may
	  request to see it again, however, by sending <link
	  linkend="req.motd">REQ_MOTD</link>.  If there is a
	  message-of-the-day, the server will send it via <link
	  linkend="rsp.motd">RSP_MOTD</link>.  If it does not exist,
	  the server will ignore the request.
	</para>
      </listitem>
      
    </itemizedlist>
  </para>
  
  <para>
    Some infomration about the server may change while the player is
    logged in.  If this occurs, the server will send an <link
    linkend="server-updates">update notification</link>.
  </para>

</section>
    
<section id="rooms">
  <title>Rooms</title>
  <para>
    Most of the real action on a GGZ server occurs in rooms.  Each
    room supports a particular game type, and provides a place for
    players to <link linkend="chatting">chat</link> back and forth
    with friends.  When a client first logs in, the player is not in a
    specific room, but in limbo.  In order to chat with other players
    or join a <link linkend="table-management">table</link>, the
    player must enter a specific room.
  </para>

  <para>
    Changing rooms is done via <link
    linkend="req.room.join">REQ_ROOM_JOIN</link>.  The server will
    respond to the room-change request with <link
    linkend="rsp.room.join">RSP_ROOM_JOIN</link>.  There is no
    equivalent command to leave a room since leaving the room takes
    place automatically when a player joins some other room (We can't
    have players in two places at once, now can we?).
  </para>
</section>

<section id="room-info"
  <title>Requesting room information</title>

  <para>
    Once the player has entered a room, he or she will no doubt want
    to know who else is there and if there are any games being
    played.

    <itemizedlist>
      <listitem>
	<para>
	  To request a list of the players in the current room and
	  what tables the are at, a client may send <link
	  linkend="req.list.players">REQ_LIST_PLAYERS</link>.  The
	  server will respond with <link
	  linkend="rsp.list.players">RSP_LIST_PLAYERS</link>.
	</para>
      </listitem>
      
      <listitem>
	<para>
	  Similarly, to request a list of the game tables in the room,
	  the client should send <link
	  linkend="req.list.tables">REQ_LIST_TABLES</link>.  The
	  server will respond via <link
	  linkend="rsp.list.tables">RSP_LIST_TABLES</link>.
	</para>
      </listitem>
    </itemizedlist>
  </para>
  
  <para>
    Rooms are busy places with players entering and leaving, and
    tables being launched and destroyed.  To keep the client from
    having to continually resend list requests, the server will send
    periodic <link linkend="server-updates">updates</link>.
  </para>

</section>
  
  
<section id="server-updates">
  <title>Server updates</title>
  
  <para>
    While the player is logged in, information about the server may
    change, espeically if that information pertains to the players or
    tables in a perticular room.  Rather than insist that the client
    send a new list request periodically, the server will send update
    messages to the client:

    <itemizedlist>
      <listitem>
	<para>
	  If the the room list changes in any way, the server will
	  send out a <link
	  linkend="msg.update.rooms">MSG_UPDATE_ROOMS</link> to each
	  of the clients.  Note that currently there is no mechanism
	  to change the rooms on the fly, so this message will never
	  occur.  However, it is probable that this functionality will
	  be added in the future.
	</para>
      </listitem>

      <listitem>
	<para>
	  If another player enters or leaves the room, the server will
	  send a <link
	  linkend="msg.update.players">MSG_UPDATE_PLAYERS</link> to
	  all of <emphasis>other</emphasis> players in that room.  A
	  player will never receive a player update about himself.
	</para>
      </listitem>

      <listitem>
	<para>
	  If the server's list of supported games types changes, it
	  will send a <link
	  linkend="msg.update.types">MSG_UPDATE_TYPES</link> to each
	  of the clients.  Note that currently there is no mechanism
	  to change game types on the fly, so this message will never
	  occur.  However, it is probable that this functionality will
	  be added in the future.
	</para>
      </listitem>

      <listitem>
	<para>
	  Whenever the list of tables in a room changes, each player
	  in the room will receive a <link
	  linkend="msg.update.tables">MSG_UPDATE_TABLES</link>
	  message.  This will occur whenever a table is launched or
	  destroyed, a player joins or leaves, or the table's state
	  has changed. 
	</para>
      </listitem>
    </itemizedlist>
  </para>
  
  <note>
    <para>
      It should be noted that these messages are asynchronous, are are
      sent by the server automatically without having been requested
      by the client.
    </para>
  </note>
</section>
  
<section id="table-management">
  <title>Table Management</title>
  
  <para>
    In order to play a game with other players logged into GGZ, a
    player must be at a table.  This is accomplished via one of two
    interactions: 
  
    <itemizedlist>
      <listitem>
	<para>
	  To join a player to an existing table, the client should
	  send <link linkend="req.table.join">REQ_TABLE_JOIN</link>.
	  The server will respond with <link
	  linkend="rsp.table.join">RSP_TABLE_JOIN</link>, notifying
	  the client if the attempt to join was successful.
	</para>
      </listitem>
      
      <listitem>
	<para>
	  To launch a new table, clients must send <link
	  linkend="req.table.launch">REQ_TABLE_LAUNCH</link>.  The server
	  will respond with <link
	  linkend="rsp.table.launch">RSP_TABLE_LAUNCH</link>,
	  notifying the client of the status of the table launch.
	</para>
      </listitem>
    </itemizedlist>
    
    <note>
      <para>
	Currently the server will automatically attempt to join the
	the player to the newly launched table.  The result of this
	join will be sent to the client via a <link
	linkend="rsp.table.join">RSP_TABLE_JOIN</link>, even though
	the client did not explicitly request a join.  This behaviour
	may change in future version of the server
	</para>
    </note>
  </para>
    
  <para>
    At the end of a game session, the server will automatically remove
    all players from the table.  Should a player wish to leave a table
    before the completion of the game, however, the client may send a
    <link linkend="req.table.leave">REQ_TABLE_LEAVE</link>.  The
    server will then send back <link
    linkend="rsp.table.leave">RSP_TABLE_LEAVE</link>.  Note that not
    all game types will support leaving in mid-game.
  </para>
    
</section>
  
<section id="chatting">
  <title>Chatting with friends</title>

  <para>
    What fun would playing games be if you can't taunt your opponents
    or laugh with your friends?  Similar to the "Taunt" feature
    provided with NetSpades, the GGZ server provides the ability to
    send messages to other players via the server.  The following
    interactions describe how this messaging is accomplished.
    
    <itemizedlist>
      <listitem>
	<para>
	  When a player wishes to send a chat message, the client
	  should send a <link linkend="req.chat">REQ_CHAT</link>.
	  Different types of chat messages are distinguished by the
	  <link linkend="chat-subopcodes">chat sub-opcodes</link> The
	  server will respond with the status of the chat operation
	  via <link linkend="rsp.chat">RSP_CHAT</link>
	</para>
      </listitem>
      
      <listitem>
	<para>
	  When a player receives a chat message from another player,
	  the server will send <link
	  linkend="msg.chat">MSG_CHAT</link> to the client.  The <link
	  linkend="chat-subopcodes">chat sub-opcodes</link>
	  distinguish between the various chat operations
	</para>
      </listitem>
    </itemizedlist>
  </para>

  <para id="chat-subopcodes">
    Sub-opcodes for chat messages are as follows:
    <itemizedlist>
      <listitem>
	<para>
	  <link linkend="ggz.chat.normal">GGZ_CHAT_NORMAL</link>
	  signifies a "typical" chat message which is sent to all
	  players in the current room.
	</para>
      </listitem>
      <listitem>
	<para>
	  <link linkend="ggz.chat.beep">GGZ_CHAT_BEEP</link> is a
	  special message with no text content, which is sent to a
	  specific player.  A typical client response to the receipt
	  of this message would be to emit a beep.
	</para>
      </listitem>
      <listitem>
	<para>
	  <link linkend="ggz.chat.normal">GGZ_CHAT_PERSONAL</link> is a
	  private message directed to a single player.
	  <warning>
	    <para>
	      To discourage cheating, private messages may not be sent
	      or received while the player is at a game table.
	    </para>
	  </warning>
	</para>
      </listitem>
    </itemizedlist>
  </para>
</section>
  
  
<section id="game-messages"><title>Game Interactions</title>
  <para>
    In order to allow the GGZ server to identify control messages
    during the course of a game, it is necessary that interactions
    with a game module have an identifiable header.  Therefore, all
    data destined for a game module should use the <link
    linkend="req.game">REQ_GAME</link> message.  This header will
    be stripped off before the data is sent to the game itself.
    Similarly, any messages from the game to the client will be sent
    via a <link linkend="rsp.game">RSP_GAME</link> message.

    <note>
      <para>
	In the future, the game module client and server may
	communicate directly via a separate socket connection.  When
	this happens, these opcodes will be eliminated.
      </para>
    </note>
  </para>
</section>

