Writing Game modules for GGZ
============================

GGZ is written in a modular fashion to allow games to written by third
party developers.  We obviously cannot possibly write modules for
every game people might be interested in playing, so if GGZ doesn't
have your favorite game, please consider writing a module and
submitting it for integration in GGZ.  Many existing network games
could probably be integrated into GGZ with a small amount of effort.


Each game "module" is really a program which the GGZ server will
execute after forking a "table" on which to play the game.  Since it
runs in its own process a game module don't have to worry about
clashing with GGZ global variables or functions.  Further, game
modules don't even have to be written in the same language as GGZ!  We
use C for our development, but maybe you'd like to use C++ or Tcl or
Python.  As log as it adheres to the protocol for communicating with
the GGZ server, it doesn't matter.  A specification of the protocol
can be found in section 3.1.1 of the GGZ design document.

Individual GGZ modules don't have to worry about about making network
connections to users or maintaining player statistics.  The GGZ server
handles all of that.  The only thing a module has to do is listen for
player data from the GGZ server, play its game, notify the GGZ server
when it's done and then die gracefully.

In order to communicate with its game modules, GGZ uses a Unix domain
socket in /tmp with the name GAME.PID where GAME is the name of the
game type being played (NetSpades, TicTacToe, etc), and PID is the
ID of the process in which the module is being run.


Example game module
==================
We have provided a simple tic-tac-toe module as an example for
developers to look at.  In the future we will provide a step-by-step
tutorial on how to write game modules, but in the mean-time, please
look at how the tic-tac-toe module is written.  The server side of it
should be very clean and easy to follow.  It can be found in the
game_modules/tictactoe subdirectory of the GGZ server source tree.

The functions tictactoe uses for communicating with the GGZ server are
all in ggz.c which you should be able to use as-is in your projects
(in fact, in the future it will probably become a shared lib which you
can simply link-in).  

