diff -Nur ggz-client-libs/configure.in ggz-client-libs.tls/configure.in
--- ggz-client-libs/configure.in	Sat Feb 23 03:16:00 2002
+++ ggz-client-libs.tls/configure.in	Sat Feb 23 03:14:16 2002
@@ -73,7 +73,7 @@
 dnl ==============
 
 AC_GGZ_LIBGGZ
-LDADD="$LDADD $LIB_GGZ"
+LDADD="$LDADD $LIB_GGZ -lggztls"
 
 
 dnl Check for popt
diff -Nur ggz-client-libs/ggzcore/Makefile.am ggz-client-libs.tls/ggzcore/Makefile.am
--- ggz-client-libs/ggzcore/Makefile.am	Sat Feb 23 03:15:50 2002
+++ ggz-client-libs.tls/ggzcore/Makefile.am	Sat Feb 23 03:14:17 2002
@@ -8,9 +8,8 @@
 ggz_config_LDADD = libggzcore.la @LDADD@
 ggz_config_SOURCES = ggz-config.c
 
-ggzconf_DATA = ggz.modules
-
-EXTRA_DIST = $(ggzconf_DATA)
+#ggzconf_DATA = ggz.modules
+#EXTRA_DIST = $(ggzconf_DATA)
 
 lib_LTLIBRARIES = libggzcore.la
 
diff -Nur ggz-client-libs/ggzcore/ggzcore.h ggz-client-libs.tls/ggzcore/ggzcore.h
--- ggz-client-libs/ggzcore/ggzcore.h	Sat Feb 23 03:15:39 2002
+++ ggz-client-libs.tls/ggzcore/ggzcore.h	Sat Feb 23 03:14:17 2002
@@ -371,7 +371,8 @@
  */
 int ggzcore_server_set_hostinfo(GGZServer *server, 
 				const char *host, 
-				const unsigned int port);
+				const unsigned int port,
+				const unsigned int use_tls);
 
 /** @brief Set login info for logging in to the server.
  *
@@ -454,6 +455,13 @@
  *  @return The state of the connection, or -1 on error.
  */
 GGZStateID   ggzcore_server_get_state(GGZServer *server);
+
+/** @brief Get the current TLS status of this server
+ *
+ * @param server The GGZ server object
+ * @return Whether TLS is active or not
+ */
+int             ggzcore_server_get_tls(GGZServer *server);
 
 /** @brief Return the number of rooms on the server, or -1 on error.
  *  @note Until we retrieve the list of rooms, this will return 0.
diff -Nur ggz-client-libs/ggzcore/net.h ggz-client-libs.tls/ggzcore/net.h
--- ggz-client-libs/ggzcore/net.h	Sat Feb 23 03:15:40 2002
+++ ggz-client-libs.tls/ggzcore/net.h	Sat Feb 23 03:14:17 2002
@@ -36,7 +36,8 @@
 void _ggzcore_net_init(struct _GGZNet *net, 
 		       struct _GGZServer *server, 
 		       const char *host,
-		       unsigned int port);
+		       unsigned int port,
+			   unsigned int use_tls);
 
 int _ggzcore_net_set_dump_file(struct _GGZNet *net, const char* filename);
 void _ggzcore_net_set_fd(struct _GGZNet *net, int fd);
@@ -46,6 +47,7 @@
 char*        _ggzcore_net_get_host(struct _GGZNet *net);
 unsigned int _ggzcore_net_get_port(struct _GGZNet *net);
 int          _ggzcore_net_get_fd(struct _GGZNet *net);
+int          _ggzcore_net_get_tls(struct _GGZNet *net);
 
 int _ggzcore_net_connect(struct _GGZNet *net);
 
diff -Nur ggz-client-libs/ggzcore/netxml.c ggz-client-libs.tls/ggzcore/netxml.c
--- ggz-client-libs/ggzcore/netxml.c	Sat Feb 23 03:15:40 2002
+++ ggz-client-libs.tls/ggzcore/netxml.c	Sat Feb 23 03:14:17 2002
@@ -36,6 +36,7 @@
 #include "gametype.h"
 
 #include <ggz.h>
+#include <ggz_tls.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <poll.h>
@@ -90,6 +91,8 @@
 	/* File to dump protocol session */
 	int dump_file;
 
+	/* Whether to use TLS or not */
+	int use_tls;
 };
 
 
@@ -164,6 +167,7 @@
 
 /* Dump network data to debugging file */
 static void _ggzcore_net_dump_data(struct _GGZNet *net, char *data, int size);
+static void _ggzcore_net_negotiate_tls(GGZNet *net);
 
 /* Utility functions */
 static int _ggzcore_net_send_table_seat(struct _GGZNet *net, struct _GGZSeat *seat);
@@ -185,17 +189,19 @@
 	/* Set fd to invalid value */
 	net->fd = -1;
 	net->dump_file = -1;
+	net->use_tls = -1;
 	
 	return net;
 }
 
 
-void _ggzcore_net_init(struct _GGZNet *net, struct _GGZServer *server, const char *host, unsigned int port)
+void _ggzcore_net_init(struct _GGZNet *net, struct _GGZServer *server, const char *host, unsigned int port, unsigned int use_tls)
 {
 	net->server = server;
 	net->host = ggz_strdup(host);
 	net->port = port;
 	net->fd = -1;
+	net->use_tls = use_tls;
 
 	/* Init parser */
 	if (!(net->parser = XML_ParserCreate("UTF-8")))
@@ -247,6 +253,10 @@
 	return net->fd;
 }
 
+int _ggzcore_net_get_tls(struct _GGZNet *net)
+{
+	return net->use_tls;
+}
 
 /* For debugging purposes only! */
 void _ggzcore_net_set_fd(struct _GGZNet *net, int fd)
@@ -619,7 +629,7 @@
 		ggzcore_error_sys_exit("Couldn't allocate buffer");
 
 	/* Read in data from socket */
-	if ( (len = read(net->fd, buf, XML_BUFFSIZE)) < 0) {
+	if ( (len = ggz_tls_read(net->fd, buf, XML_BUFFSIZE)) < 0) {
 		
 		/* If it's a non-blocking socket and there isn't data,
                    we get EAGAIN.  It's safe to just return */
@@ -770,7 +780,7 @@
 /* Functions for <SERVER> tag */
 static void _ggzcore_net_handle_server(GGZNet *net, GGZXMLElement *server)
 {
-	char *name, *id, *status;
+	char *name, *id, *status, *tls;
 	int version, chatlen;
 
 	if (server) {
@@ -778,11 +788,16 @@
 		id = ggz_xmlelement_get_attr(server, "ID");
 		status = ggz_xmlelement_get_attr(server, "STATUS");
 		version = safe_atoi(ggz_xmlelement_get_attr(server, "VERSION"));
+		tls = ggz_xmlelement_get_attr(server, "TLS_SUPPORT");
 		chatlen = (int)ggz_xmlelement_get_data(server);
 
 		ggzcore_debug(GGZ_DBG_NET, 
-			      "%s(%s) : status %s: protocol %d: chat size %d", 
-			      name, id, status, version, chatlen);
+			      "%s(%s) : status %s: protocol %d: chat size %d: tls %s", 
+			      name, id, status, version, chatlen, tls);
+
+		/* If TLS is enabled set it up */
+		if(!strcmp(tls, "yes") && _ggzcore_net_get_tls(net) && ggz_tls_support_query())
+			_ggzcore_net_negotiate_tls(net);
 
 		net->chat_size = chatlen;
 		/* FIXME: Do something with name, status */
@@ -1674,7 +1689,16 @@
 	_ggzcore_net_send_line(net, "<SESSION>");
 }
 
+/* Send a TLS_START notice and negotiate the handshake */
+static void _ggzcore_net_negotiate_tls(GGZNet *net)
+{
+	_ggzcore_net_send_line(net, "<TLS_START/>");
+	/* This should return a status one day to tell client if */
+	/* the handshake failed for some reason */
+	ggz_tls_enable_fd(net->fd, GGZ_TLS_CLIENT, GGZ_TLS_VERIFY_NONE);
+}
 
+				
 static int _ggzcore_net_send_line(GGZNet *net, char *line, ...)
 {
 	char buf[4096];
@@ -1684,7 +1708,7 @@
 	vsprintf(buf, line, ap);
 	va_end(ap);
 	strcat(buf, "\n");
-	return write(net->fd, buf, strlen(buf));
+	return ggz_tls_write(net->fd, buf, strlen(buf));
 }
 
 
@@ -1696,7 +1720,7 @@
 	va_start(ap, fmt);
 	vsprintf(buf, fmt, ap);
 	va_end(ap);
-	return write(net->fd, buf, strlen(buf));
+	return ggz_tls_write(net->fd, buf, strlen(buf));
 }
 
 
diff -Nur ggz-client-libs/ggzcore/server.c ggz-client-libs.tls/ggzcore/server.c
--- ggz-client-libs/ggzcore/server.c	Sat Feb 23 03:15:41 2002
+++ ggz-client-libs.tls/ggzcore/server.c	Sat Feb 23 03:14:17 2002
@@ -174,11 +174,11 @@
 }
 
 
-int ggzcore_server_set_hostinfo(GGZServer *server, const char *host, const unsigned int port)
+int ggzcore_server_set_hostinfo(GGZServer *server, const char *host, const unsigned int port, const unsigned int use_tls)
 {
 	/* Check for valid arguments */
 	if (server && host && server->state == GGZ_STATE_OFFLINE) {
-		_ggzcore_net_init(server->net, server, host, port);
+		_ggzcore_net_init(server->net, server, host, port, use_tls);
 		return 0;
 	}
 	else
@@ -341,6 +341,14 @@
 }
 
 
+int ggzcore_server_get_tls(GGZServer *server)
+{
+	if (server)
+		return _ggzcore_server_get_tls(server);
+	else
+		return -1;
+}
+
 int ggzcore_server_is_online(GGZServer *server)
 {
 	if (!server)
@@ -538,6 +546,16 @@
 	return server->num_rooms;
 }
 
+
+int _ggzcore_server_get_tls(struct _GGZServer *server)
+{
+	int tls;
+
+	tls = 0;
+	if (server && server->net)
+		tls = _ggzcore_net_get_tls(server->net);
+	return tls;
+}
 
 struct _GGZRoom* _ggzcore_server_get_cur_room(struct _GGZServer *server)
 {
diff -Nur ggz-client-libs/ggzcore/server.h ggz-client-libs.tls/ggzcore/server.h
--- ggz-client-libs/ggzcore/server.h	Sat Feb 23 03:15:41 2002
+++ ggz-client-libs.tls/ggzcore/server.h	Sat Feb 23 03:14:17 2002
@@ -39,6 +39,7 @@
 char*           _ggzcore_server_get_handle(struct _GGZServer *server);
 char*           _ggzcore_server_get_password(struct _GGZServer *server);
 GGZStateID      _ggzcore_server_get_state(struct _GGZServer *server);
+int             _ggzcore_server_get_tls(struct _GGZServer *server);
 
 int              _ggzcore_server_get_num_rooms(struct _GGZServer *server);
 struct _GGZRoom* _ggzcore_server_get_cur_room(struct _GGZServer *server);
