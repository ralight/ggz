diff -Nur ggzcore.20020114_19-26-00/gametype.c ggzcore/gametype.c
--- ggzcore.20020114_19-26-00/gametype.c	Mon Jan 14 19:26:46 2002
+++ ggzcore/gametype.c	Sun Jan 20 13:21:19 2002
@@ -115,6 +115,15 @@
 }
 
 
+int ggzcore_gametype_get_max_spectators(GGZGameType *type)
+{
+	if (!type)
+		return -1;
+
+	return _ggzcore_gametype_get_max_spectators(type);
+}
+
+
 /* Verify that a paticular number of players/bots is valid */
 int ggzcore_gametype_num_players_is_valid(GGZGameType *type, unsigned int num)
 {
@@ -134,6 +143,15 @@
 }
 
 
+int ggzcore_gametype_num_spectators_is_valid(GGZGameType *type, unsigned int num)
+{
+	if (!type)
+		return 0;
+
+	return _ggzcore_gametype_num_spectators_is_valid(type, num);
+}
+
+
 /* Internal library functions (prototypes in gametype.h) */
 
 struct _GGZGameType* _ggzcore_gametype_new(void)
@@ -153,8 +171,9 @@
 			    const char* version,
 			    const char* prot_engine,
 			    const char* prot_version,
-			    const GGZAllowed allow_players, 
-			    const GGZAllowed allow_bots,  
+			    const GGZAllowed allow_players,
+			    const GGZAllowed allow_bots,
+				const GGZAllowed allow_spectators,
 			    const char* desc,
 			    const char* author, 
 			    const char *url)
@@ -162,6 +181,7 @@
 	gametype->id = id;
 	gametype->allow_players = allow_players;
 	gametype->allow_bots = allow_bots;
+	gametype->allow_spectators = allow_spectators;
 	
 	gametype->name = ggz_strdup(name);
 	gametype->version = ggz_strdup(version);
@@ -273,6 +293,21 @@
 }
 
 
+unsigned int _ggzcore_gametype_get_max_spectators(struct _GGZGameType *type)
+{
+	int i, num = 0;
+	/* FIXME: come up with a cool bit maniuplation to do this */
+
+	for (i = 8; i > 0; i--)
+		if (_ggzcore_gametype_num_spectators_is_valid(type, i)) {
+			num = i;
+			break;
+		}
+	
+	return num;
+}
+
+
 /* Verify that a paticular number of players/bots is valid */
 unsigned int _ggzcore_gametype_num_players_is_valid(struct _GGZGameType *type, unsigned int num)
 {
@@ -299,6 +334,20 @@
 }
 
 
+unsigned int _ggzcore_gametype_num_spectators_is_valid(struct _GGZGameType *type, unsigned int num)
+{
+	char mask;
+
+	if (num != 0) {
+		/* 2^(num-1) */
+		mask = 1 << (num-1);
+		return ((type->allow_spectators & mask) != 0);
+	}
+	else /* always allow 0 spectators */
+		return 1;
+}
+
+
 /* Return 0 if equal, -1 greaterthan, 1 lessthan */
 int _ggzcore_gametype_compare(void* p, void* q)
 {
@@ -321,8 +370,8 @@
 
 	_ggzcore_gametype_init(new, src->id, src->name, src->version,
 			       src->prot_engine, src->prot_version,
-			       src->allow_players, src->allow_bots, src->desc,
-			       src->author, src->url);
+			       src->allow_players, src->allow_bots, src->allow_spectators,
+				   src->desc, src->author, src->url);
 	
 	return (void*)new;
 }
diff -Nur ggzcore.20020114_19-26-00/gametype.h ggzcore/gametype.h
--- ggzcore.20020114_19-26-00/gametype.h	Mon Jan 14 19:26:46 2002
+++ ggzcore/gametype.h	Sun Jan 20 13:20:15 2002
@@ -64,11 +64,14 @@
 	/* Homepage for game */
 	char *url;
 
-	/* Bitmask of alowable numbers of players */
+	/* Bitmask of allowable numbers of players */
 	GGZAllowed allow_players;
 
-	/* Bitmask of alowable numbers of bots */
+	/* Bitmask of allowable numbers of bots */
 	GGZAllowed allow_bots;
+
+	/* Bitmasl of allowable number of spectators */
+	GGZAllowed allow_spectators;
 	
 	/* ID of this game on the server */
 	unsigned int id;
@@ -85,8 +88,9 @@
 			    const char* version,
 			    const char* prot_engine,
 			    const char* prot_version,
-			    const GGZAllowed allow_players, 
-			    const GGZAllowed allow_bots,  
+			    const GGZAllowed allow_players,
+			    const GGZAllowed allow_bots,
+				const GGZAllowed allow_spectators,
 			    const char* desc,
 			    const char* author, 
 			    const char *url);
@@ -109,13 +113,15 @@
 
 char*  _ggzcore_gametype_get_desc(struct _GGZGameType *type);
 
-/* Return the maximum number of allowed players/bots */
+/* Return the maximum number of allowed players/bots/spectators */
 unsigned int _ggzcore_gametype_get_max_players(struct _GGZGameType *type);
 unsigned int _ggzcore_gametype_get_max_bots(struct _GGZGameType *type);
+unsigned int _ggzcore_gametype_get_max_spectators(struct _GGZGameType *type);
 
-/* Verify that a paticular number of players/bots is valid */
+/* Verify that a paticular number of players/bots/spectators is valid */
 unsigned int _ggzcore_gametype_num_players_is_valid(struct _GGZGameType *type, unsigned int num);
 unsigned int _ggzcore_gametype_num_bots_is_valid(struct _GGZGameType *type, unsigned int num);
+unsigned int _ggzcore_gametype_num_spectators_is_valid(struct _GGZGameType *type, unsigned int num);
 
 
 /* Utility functions used by _ggzcore_list */
diff -Nur ggzcore.20020114_19-26-00/ggzcore.h ggzcore/ggzcore.h
--- ggzcore.20020114_19-26-00/ggzcore.h	Mon Jan 14 19:26:46 2002
+++ ggzcore/ggzcore.h	Sun Jan 20 13:13:40 2002
@@ -488,6 +488,9 @@
 int ggzcore_table_add_reserved(GGZTable *table, 
 			       char *name, 
 			       const unsigned int seat);
+int ggzcore_table_add_spectator(GGZTable *table,
+                   char *name,
+				   const unsigned int seat);
 int ggzcore_table_remove_player(GGZTable *table, char *name);
 
 int          ggzcore_table_get_id(GGZTable *table);
@@ -512,13 +515,15 @@
 char* ggzcore_gametype_get_url(GGZGameType *type);
 char* ggzcore_gametype_get_desc(GGZGameType *type);
 
-/* Return the maximum number of allowed players/bots */
+/* Return the maximum number of allowed players/bots/spectators */
 int ggzcore_gametype_get_max_players(GGZGameType *type);
 int ggzcore_gametype_get_max_bots(GGZGameType *type);
+int ggzcore_gametype_get_max_spectators(GGZGameType *type);
 
-/* Verify that a paticular number of players/bots is valid */
+/* Verify that a paticular number of players/bots/spectators is valid */
 int ggzcore_gametype_num_players_is_valid(GGZGameType *type, unsigned int num);
 int ggzcore_gametype_num_bots_is_valid(GGZGameType *type, unsigned int num);
+int ggzcore_gametype_num_spectators_is_valid(GGZGameType *type, unsigned int num);
 
 
 /* ggzcore_error_sys()
diff -Nur ggzcore.20020114_19-26-00/net.c ggzcore/net.c
--- ggzcore.20020114_19-26-00/net.c	Mon Jan 14 19:26:46 2002
+++ ggzcore/net.c	Mon Jan 14 19:27:58 2002
@@ -513,6 +513,7 @@
 			status = es_write_string(net->fd, name);
 			break;
 		case GGZ_SEAT_BOT:
+		case GGZ_SEAT_SPECTATOR:
 			break;
 		default:
 			break;
@@ -920,6 +921,7 @@
 		es_read_string_alloc(net->fd, name);
 		break;
 	case GGZ_SEAT_BOT:
+	case GGZ_SEAT_SPECTATOR:
 		break;
 	default:
 		break;
@@ -1603,6 +1605,9 @@
 			break;
 		case GGZ_SEAT_BOT:
 			_ggzcore_table_add_bot(table, NULL, i);
+			break;
+		case GGZ_SEAT_SPECTATOR:
+			_ggzcore_table_add_spectator(table, NULL, i);
 			break;
 		default:
 			break;
diff -Nur ggzcore.20020114_19-26-00/netxml.c ggzcore/netxml.c
--- ggzcore.20020114_19-26-00/netxml.c	Mon Jan 14 19:26:46 2002
+++ ggzcore/netxml.c	Sun Jan 20 13:21:58 2002
@@ -98,8 +98,9 @@
 typedef struct _GGZGameData {
 	char *prot_engine;
 	char *prot_version;
-	GGZAllowed allow_players; 
-	GGZAllowed allow_bots;  
+	GGZAllowed allow_players;
+	GGZAllowed allow_bots; 
+	GGZAllowed allow_spectators;
 	char *desc;
 	char *author; 
 	char *url;
@@ -150,7 +151,7 @@
 /* Extra functions fot handling data associated with specific tags */
 static void _ggzcore_net_list_insert(GGZXMLElement*, void*);
 static void _ggzcore_net_game_set_protocol(GGZXMLElement*, char*, char *);
-static void _ggzcore_net_game_set_allowed(GGZXMLElement*, GGZAllowed, GGZAllowed);
+static void _ggzcore_net_game_set_allowed(GGZXMLElement*, GGZAllowed, GGZAllowed, GGZAllowed);
 static void _ggzcore_net_game_set_info(GGZXMLElement*, char*, char *);
 static void _ggzcore_net_game_set_desc(GGZXMLElement*, char*);
 static void _ggzcore_net_table_add_seat(GGZXMLElement*, GGZSeatData*);
@@ -1127,6 +1128,7 @@
 	char *prot_version = NULL;
 	GGZAllowed allow_players = 0;
 	GGZAllowed allow_bots = 0;
+	GGZAllowed allow_spectators = 0;
 	char *desc = NULL;
 	char *author = NULL;
 	char *url = NULL;
@@ -1147,6 +1149,7 @@
 			prot_version = data->prot_version;
 			allow_players = data->allow_players;
 			allow_bots = data->allow_bots;
+			allow_spectators = data->allow_spectators;
 			desc = data->desc;
 			author = data->author;
 			url = data->url;
@@ -1155,7 +1158,7 @@
 		type = _ggzcore_gametype_new();
 		_ggzcore_gametype_init(type, id, name, version, prot_engine,
 				       prot_version, allow_players,
-				       allow_bots,  desc, author, url);
+				       allow_bots, allow_spectators, desc, author, url);
 
 		parent_tag = ggz_xmlelement_get_tag(parent);
 		
@@ -1198,7 +1201,7 @@
 }
 
 
-static void _ggzcore_net_game_set_allowed(GGZXMLElement *game, GGZAllowed players, GGZAllowed bots)
+static void _ggzcore_net_game_set_allowed(GGZXMLElement *game, GGZAllowed players, GGZAllowed bots, GGZAllowed spectators)
 {
 	struct _GGZGameData *data;
 	
@@ -1212,6 +1215,7 @@
 	
 	data->allow_players = players;
 	data->allow_bots = bots;
+	data->allow_spectators = spectators;
 }
 
 
@@ -1275,7 +1279,8 @@
 	if (allow && parent) {
 		_ggzcore_net_game_set_allowed(parent, 
 						   safe_atoi(ggz_xmlelement_get_attr(allow, "PLAYERS")),
-						   safe_atoi(ggz_xmlelement_get_attr(allow, "BOTS")));
+						   safe_atoi(ggz_xmlelement_get_attr(allow, "BOTS")),
+						   safe_atoi(ggz_xmlelement_get_attr(allow, "SPECTATORS")));
 
 	}
 }
@@ -1460,6 +1465,9 @@
 			}
 			else if (strcmp(seat->type, "reserved") == 0) {
 				_ggzcore_table_add_reserved(table_obj, seat->name, seat->index);
+			}
+			else if (strcmp(seat->type, "spectator") == 0) {
+				_ggzcore_table_add_spectator(table_obj, seat->name, seat->index);
 			}
 			entry = ggz_list_next(entry);
 		}
diff -Nur ggzcore.20020114_19-26-00/table.c ggzcore/table.c
--- ggzcore.20020114_19-26-00/table.c	Mon Jan 14 19:26:46 2002
+++ ggzcore/table.c	Sun Jan 20 12:55:17 2002
@@ -101,6 +101,17 @@
 }
 
 
+int ggzcore_table_add_spectator(GGZTable *table, char *name, const unsigned int seat)
+{
+	if (table && name && seat < table->num_seats) {
+		_ggzcore_table_add_spectator(table, name, seat);
+		return 0;
+	}
+	else 
+		return -1;
+}
+
+
 int ggzcore_table_remove_player(GGZTable *table, char *name)
 {
 	if (table && name)
@@ -288,6 +299,17 @@
 	struct _GGZSeat new_seat;
 
 	new_seat.type = GGZ_SEAT_RESERVED;
+	new_seat.name = ggz_strdup(name);
+
+	table->seats[seat] = new_seat;
+}
+
+
+void _ggzcore_table_add_spectator(struct _GGZTable *table, char *name, const unsigned int seat)
+{
+	struct _GGZSeat new_seat;
+
+	new_seat.type = GGZ_SEAT_SPECTATOR;
 	new_seat.name = ggz_strdup(name);
 
 	table->seats[seat] = new_seat;
diff -Nur ggzcore.20020114_19-26-00/table.h ggzcore/table.h
--- ggzcore.20020114_19-26-00/table.h	Mon Jan 14 19:26:46 2002
+++ ggzcore/table.h	Mon Jan 14 19:28:32 2002
@@ -86,6 +86,9 @@
 void _ggzcore_table_add_reserved(struct _GGZTable *table, 
 				 char *name, 
 				 const unsigned int seat);
+void _ggzcore_table_add_spectator(struct _GGZTable *table, 
+			    char *name, 
+			    const unsigned int seat);
 int _ggzcore_table_remove_player(struct _GGZTable *table, char *name);
 
 int                   _ggzcore_table_get_id(struct _GGZTable *table);
