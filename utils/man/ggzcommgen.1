.TH "ggzcommgen" "1" "0.0.14" "The GGZ Development Team" "GGZ Gaming Zone"
.SH "NAME"
.LP 
ggzcommgen \- GGZ Communication Protocol Generator
.SH "SYNOPSIS"
.LP
\fBggzcommgen\fR [\fIOPTIONS\fR...] \fIPROTOCOL\fR
.SH "DESCRIPTION"
.LP
The ggzcommgen tool allows game and application developers to create
client-server protocol implementations using XML source files.
The protocol description is converted into source files for certain
programming languages, and then be added the the source tree of the game
or application. This saves a lot of work, since no networking code has
to be written by hand.
.LP
The \fIPROTOCOL\fR file should be given without the .protocol file ending
and will result in source files using this name as a base, plus
language-specific file endings.
.SH "OPTIONS"
.TP
\fB-l\fR, \fB--language\fR=\fILANGUAGE\fR
The programming language of the files which are generated.
\fILANGUAGE\fR can be either 'c', 'c++' or 'python'.
.TP
\fB-i\fR, \fB--interface\fR=\fILIBRARY\fR
The library to use for handling the network input/output operations.
The choice of \fILIBRARY\fR mostly depends on the programming language,
and is one of 'ggz' (libggz for C/C++), 'qt' (Qt library for C++), 'mnet'
(C++ server library) and 'socket' (Python standard library).
.TP
\fB-r\fR, \fB--role\fR=\fIROLE\fR
Whether the generated source file should be used in the server or in the
client. The value of \fIROLE\fR is then 'client' or 'server', respectively.
.SH "AUTHORS"
.LP 
The GGZ Development Team
<ggz\-dev@mail.ggzgamingzone.org>
