? libggz/src/ggzd.protocol
? libggz/src/tls.c
Index: libggz/acconfig.h
===================================================================
RCS file: /cvsroot/ggz/libggz/acconfig.h,v
retrieving revision 1.4
diff -r1.4 acconfig.h
28a29
> #undef HAVE_GNUTLS
Index: libggz/configure.in
===================================================================
RCS file: /cvsroot/ggz/libggz/configure.in,v
retrieving revision 1.6
diff -r1.6 configure.in
36a37
> AC_ARG_ENABLE(gnutls,       [  --enable-gnutls         Compile with gnutls support ],, enable_gnutls=no)
120a122,130
> dnl Test for gnutls headers and libs
> dnl ================================
> if test "$enable_gnutls" = yes; then
>   AC_CHECK_LIB(gnutls, gnutls_write,
>     AC_CHECK_HEADER(gnutls.h, LDADD="$LDADD -lgnutls -lgcrypt",
>       AC_MSG_ERROR(*** Cannot find gnutls.h header ); exit ),
>     AC_MSG_ERROR(*** Cannot find gnutls library ); exit,  -lgcrypt )
>   AC_DEFINE(HAVE_GNUTLS)
> fi
167a178
> echo "    TLS Support........$enable_gnutls"
175c186
< echo "need to perform this step as root."
\ No newline at end of file
---
> echo "need to perform this step as root."
Index: libggz/src/Makefile.am
===================================================================
RCS file: /cvsroot/ggz/libggz/src/Makefile.am,v
retrieving revision 1.9
diff -r1.9 Makefile.am
21a22
> 			tls.c \
Index: libggz/src/ggz.h
===================================================================
RCS file: /cvsroot/ggz/libggz/src/ggz.h,v
retrieving revision 1.20
diff -r1.20 ggz.h
1028a1029,1086
> 
> /****************************************************************************
>  * @defgroup tls TLS Extensions for Easysock IO
>  * 
>  * Routines to enable easysock to utilize TLS using gnutls
>  *
>  * @{
>  ****************************************************************************/
> 
> typedef enum {
> 	GGZ_TLS_CLIENT,
> 	GGZ_TLS_SERVER
> } GGZTLSType;
> 
> /**
>  * Check to see whether TLS support is compiled into this version of libggz
>  * @return 1 if TLS support is compiled into libggz, 0 if not
>  */
> int ggz_tls_support_query(void);
> 
> /**
>  * Setup and perform TLS handshake on fdes
>  * @param fdes File descriptor to use for secure communications
>  * @param whoami Set to GGZ_TLS_CLIENT or GGZ_TLS_SERVER
>  */
> void ggz_tls_enable_fd(int fdes, GGZTLSType whoami);
> 
> /**
>  * Turn off TLS usage on a file descriptor, this should be done in any
>  * application where the fdes might be reused at some point by easysock
>  * so that easysock knows not to use TLS anymore.
>  * @param fdes File descriptor to turn off secure communications
>  */
> void ggz_tls_disable_fd(int fdes);
> 
> /**
>  * Write to a socket (fd) using TLS if it's enabled, or a normal write if
>  * TLS is not activated.
>  * @param fd File descriptor
>  * @param ptr Pointer to data to be written
>  * @param n Number of bytes to write
>  * @return Number of bytes written or <0 on error
>  */
> size_t ggz_tls_write(int fd, void *ptr, size_t n);
> 
> /**
>  * Read from a socket (fd) using TLS if it's enabled, or a normal read if
>  * TLS is not activated.
>  * @param fd File descriptor
>  * @param ptr Pointer to buffer were data will be stored
>  * @param n Number of bytes to read
>  * @return Number of bytes read, 0 on EOF, or <0 on error
>  */
> size_t ggz_tls_read(int fd, void *ptr, size_t n);
> 
> /** @} */
> 
> 
